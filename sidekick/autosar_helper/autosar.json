{
    "123": {
        "name": "ADC Driver",
        "short_name": "Adc",
        "functions": {
            "0": {
                "name": "Adc_Init",
                "type": "void Adc_Init (const Adc_ConfigType* ConfigPtr)",
                "comments": "Initializes the ADC hardware units and driver."
            },
            "12": {
                "name": "Adc_SetupResultBuffer",
                "type": "Std_ReturnType Adc_SetupResultBuffer (Adc_GroupType Group,Adc_ValueGroupType* DataBufferPtr)",
                "comments": "Initializes ADC driver with the group-specific result buffer start address where the conversion results will be stored. The application has to ensure that the application buffer, where DataBufferPtr points to, can hold all the conversion results of the specified group. The initialization with Adc_SetupResultBuffer is required after reset, before a group conversion can be started."
            },
            "1": {
                "name": "Adc_DeInit",
                "type": "void Adc_DeInit (void)",
                "comments": "Returns all ADC HW Units to a state comparable to their power on reset state."
            },
            "2": {
                "name": "Adc_StartGroupConversion",
                "type": "void Adc_StartGroupConversion (Adc_GroupType Group)",
                "comments": "Starts the conversion of all channels of the requested ADC Channel group."
            },
            "3": {
                "name": "Adc_StopGroupConversion",
                "type": "void Adc_StopGroupConversion (Adc_GroupType Group)",
                "comments": "Stops the conversion of the requested ADC channel group."
            },
            "4": {
                "name": "Adc_ReadGroup",
                "type": "Std_ReturnType Adc_ReadGroup (Adc_GroupType Group,Adc_ValueGroupType* DataBufferPtr)",
                "comments": "Reads the group conversion result of the last completed conversion round of the requested group and stores the channel values starting at the Data Buffer Ptr address. The group channel values are stored in ascending channel number order (in contrast to the storage layout of the result buffer if streaming access is configured)."
            },
            "5": {
                "name": "Adc_EnableHardwareTrigger",
                "type": "void Adc_EnableHardwareTrigger (Adc_GroupType Group)",
                "comments": "Enables the hardware trigger for the requested ADC Channel group."
            },
            "6": {
                "name": "Adc_DisableHardwareTrigger",
                "type": "void Adc_DisableHardwareTrigger (Adc_GroupType Group)",
                "comments": "Disables the hardware trigger for the requested ADC Channel group."
            },
            "7": {
                "name": "Adc_EnableGroupNotification",
                "type": "void Adc_EnableGroupNotification (Adc_GroupType Group)",
                "comments": "Enables the notification mechanism for the requested ADC Channel group."
            },
            "8": {
                "name": "Adc_DisableGroupNotification",
                "type": "void Adc_DisableGroupNotification (Adc_GroupType Group)",
                "comments": "Disable the notification mechanism for the requested ADC Channel group."
            },
            "9": {
                "name": "Adc_GetGroupStatus",
                "type": "Adc_StatusType Adc_GetGroupStatus (Adc_GroupType Group)",
                "comments": "Returns the conversion status of the requested ADC Channel group."
            },
            "11": {
                "name": "Adc_GetStreamLastPointer",
                "type": "Adc_StreamNumSampleType Adc_GetStreamLastPointer (Adc_GroupType Group,Adc_ValueGroupType** PtrToSamplePtr)",
                "comments": "Returns the number of valid samples per channel, stored in the result buffer. Reads a pointer, pointing to a position in the group result buffer. With the pointer position, the results of all group channels of the last completed conversion round can be accessed. With the pointer and the return value, all valid group conversion results can be accessed (the user has to take the layout of the result buffer into account)."
            },
            "10": {
                "name": "Adc_GetVersionInfo",
                "type": "void Adc_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "16": {
                "name": "Adc_SetPowerState",
                "type": "Std_ReturnType Adc_SetPowerState (Adc_PowerStateRequestResultType* Result)",
                "comments": "This API configures the Adc module so that it enters the already prepared power state, chosen between a predefined set of configured ones."
            },
            "17": {
                "name": "Adc_GetCurrentPowerState",
                "type": "Std_ReturnType Adc_GetCurrentPowerState (Adc_PowerStateType* CurrentPowerState,Adc_PowerStateRequestResultType* Result)",
                "comments": "This API returns the current power state of the ADC HW unit."
            },
            "18": {
                "name": "Adc_GetTargetPowerState",
                "type": "Std_ReturnType Adc_GetTargetPowerState (Adc_PowerStateType* TargetPowerState,Adc_PowerStateRequestResultType* Result)",
                "comments": "This API returns the Target power state of the ADC HW unit."
            },
            "19": {
                "name": "Adc_PreparePowerState",
                "type": "Std_ReturnType Adc_PreparePowerState (Adc_PowerStateType PowerState,Adc_PowerStateRequestResultType* Result)",
                "comments": "This API starts the needed process to allow the ADC HW module to enter the requested power state."
            },
            "20": {
                "name": "Adc_Main_PowerTransitionManager",
                "type": "void Adc_Main_PowerTransitionManager (void)",
                "comments": "This API is cyclically called and supervises the power state transitions, checking for the readiness of the module and issuing the callbacks IoHwAb_Adc_NotifyReadyForPowerState<Mode> (see AdcPowerStateReadyCbkRef configuration parameter)."
            }
        }
    },
    "5": {
        "name": "AUTOSAR Run-Time Interface",
        "short_name": "Arti",
        "functions": {
            "0": {
                "name": "Arti_Init",
                "type": "void Arti_Init (void)",
                "comments": "Service to initialize the ARTI module"
            },
            "1": {
                "name": "Arti_GetVersionInfo",
                "type": "void Arti_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information of this module."
            }
        }
    },
    "42": {
        "name": "BSW Mode Manager",
        "short_name": "BswM",
        "functions": {
            "30": {
                "name": "BswM_BswMPartitionRestarted",
                "type": "void BswM_BswMPartitionRestarted (void)",
                "comments": "Function called by Restart Task if the partition containing the BswM has been restarted."
            },
            "5": {
                "name": "BswM_CanSM_CurrentState",
                "type": "void BswM_CanSM_CurrentState (NetworkHandleType Network,CanSM_BswMCurrentStateType CurrentState)",
                "comments": "Function called by Can SM to indicate its current state."
            },
            "14": {
                "name": "BswM_ComM_CurrentMode",
                "type": "void BswM_ComM_CurrentMode (NetworkHandleType Network,ComM_ModeType RequestedMode)",
                "comments": "Function called by ComM to indicate the current communication mode of a ComM channel."
            },
            "21": {
                "name": "BswM_ComM_CurrentPNCMode",
                "type": "void BswM_ComM_CurrentPNCMode (PNCHandleType PNC,ComM_PncModeType CurrentPncMode)",
                "comments": "Function is called by ComM to indicate the current mode of the PNC."
            },
            "34": {
                "name": "BswM_ComM_InitiateReset",
                "type": "void BswM_ComM_InitiateReset (void)",
                "comments": "Function is called by ComM to signal a shutdown."
            },
            "20": {
                "name": "BswM_Dcm_ApplicationUpdated",
                "type": "void BswM_Dcm_ApplicationUpdated (void)",
                "comments": "This function is called by the DCM in order to report an updated application."
            },
            "6": {
                "name": "BswM_Dcm_CommunicationMode_CurrentState",
                "type": "void BswM_Dcm_CommunicationMode_CurrentState (NetworkHandleType Network,Dcm_CommunicationModeType RequestedMode)",
                "comments": "Function called by DCM to inform the BswM about the current state of the communication mode."
            },
            "4": {
                "name": "BswM_Deinit",
                "type": "void BswM_Deinit (void)",
                "comments": "Deinitializes the BSW Mode Manager."
            },
            "40": {
                "name": "BswM_EcuM_CurrentState",
                "type": "void BswM_EcuM_CurrentState (EcuM_StateType CurrentState)",
                "comments": "Function called EcuM to indicate the current ECU Operation Mode."
            },
            "16": {
                "name": "BswM_EcuM_CurrentWakeup",
                "type": "void BswM_EcuM_CurrentWakeup (EcuM_WakeupSourceType source,EcuM_WakeupStatusType state)",
                "comments": "Function called by EcuM to indicate the current state of awake up source."
            },
            "41": {
                "name": "BswM_EcuM_RequestedState",
                "type": "void BswM_EcuM_RequestedState (EcuM_StateType State,EcuM_RunStatusType CurrentState)",
                "comments": "Function called by EcuM to notify about current status of the Run Request Protocol."
            },
            "38": {
                "name": "BswM_EthIf_PortGroupLinkStateChg",
                "type": "void BswM_EthIf_PortGroupLinkStateChg (EthIf_SwitchPortGroupIdxType PortGroupIdx,EthTrcv_LinkStateType PortGroupState)",
                "comments": "Function called by Eth If to indicate the link state change of a certain Ethernet switch port group."
            },
            "13": {
                "name": "BswM_EthSM_CurrentState",
                "type": "void BswM_EthSM_CurrentState (NetworkHandleType Network,EthSM_NetworkModeStateType CurrentState)",
                "comments": "Function called by EthSM to indicate its current state."
            },
            "12": {
                "name": "BswM_FrSM_CurrentState",
                "type": "void BswM_FrSM_CurrentState (NetworkHandleType Network,FrSM_BswM_StateType CurrentState)",
                "comments": "Function called by FrSM to indicate its current state."
            },
            "1": {
                "name": "BswM_GetVersionInfo",
                "type": "void BswM_GetVersionInfo (Std_VersionInfoType* VersionInfo)",
                "comments": "Returns the version information of this module."
            },
            "0": {
                "name": "BswM_Init",
                "type": "void BswM_Init (const BswM_ConfigType * ConfigPtr)",
                "comments": "Initializes the BSW Mode Manager."
            },
            "27": {
                "name": "BswM_J1939DcmBroadcastStatus",
                "type": "void BswM_J1939DcmBroadcastStatus (uint16 NetworkMask)",
                "comments": "This API tells the BS what the desired communication status of the available networks. The status will typically be activated via COMI-PDU group switch es."
            },
            "24": {
                "name": "BswM_J1939Nm_StateChangeNotification",
                "type": "void BswM_J1939Nm_StateChangeNotification (NetworkHandleType Network,uint8 Node,Nm_StateType NmState)",
                "comments": "Notification of current J1939 Nm state after state changes."
            },
            "10": {
                "name": "BswM_LinSM_CurrentSchedule",
                "type": "void BswM_LinSM_CurrentSchedule (NetworkHandleType Network,LinIf_SchHandleType CurrentSchedule)",
                "comments": "Function called by Lin SM to indicate the currently active schedule table for a specific LIN channel."
            },
            "9": {
                "name": "BswM_LinSM_CurrentState",
                "type": "void BswM_LinSM_CurrentState (NetworkHandleType Network,LinSM_ModeType CurrentState)",
                "comments": "Function called by Lin SM to indicate its current state."
            },
            "11": {
                "name": "BswM_LinTp_RequestMode",
                "type": "void BswM_LinTp_RequestMode (NetworkHandleType Network,LinTp_Mode LinTpRequestedMode)",
                "comments": "Function called by LinTP to request a mode for the corresponding LIN channel. The LinTp_Mode correlates to the LIN schedule table that should be used."
            },
            "36": {
                "name": "BswM_Nm_CarWakeUpIndication",
                "type": "void BswM_Nm_CarWakeUpIndication (NetworkHandleType Network)",
                "comments": "Function called by Nm to indicate a Car Wakeup."
            },
            "39": {
                "name": "BswM_Nm_StateChangeNotification",
                "type": "void BswM_Nm_StateChangeNotification (NetworkHandleType Network,Nm_StateType currentState)",
                "comments": "Notification of current Nm state after state changes."
            },
            "22": {
                "name": "BswM_NvM_CurrentBlockMode",
                "type": "void BswM_NvM_CurrentBlockMode (NvM_BlockIdType Block,NvM_RequestResultType CurrentBlockMode)",
                "comments": "Function called by NvM to indicate the current block mode of an NvM block."
            },
            "23": {
                "name": "BswM_NvM_CurrentJobMode",
                "type": "void BswM_NvM_CurrentJobMode (NvM_MultiBlockRequestType MultiBlockRequest,NvM_RequestResultType CurrentJobMode)",
                "comments": "Function called by NvM to inform the BswM about the current state of a multiblock job."
            },
            "2": {
                "name": "BswM_RequestMode",
                "type": "void BswM_RequestMode (BswM_UserType requesting_user,BswM_ModeType requested_mode)",
                "comments": "Generic function call to request modes. This function shall only be used by other BSW modules that do not have a specific mode request interface."
            },
            "31": {
                "name": "BswM_Sd_ClientServiceCurrentState",
                "type": "void BswM_Sd_ClientServiceCurrentState (uint16 SdClientServiceHandleId,Sd_ClientServiceCurrentStateType CurrentClientState)",
                "comments": "Function called by Service Discovery to indicate current state of the Client Service (available/down)."
            },
            "33": {
                "name": "BswM_Sd_ConsumedEventGroupCurrentState",
                "type": "void BswM_Sd_ConsumedEventGroupCurrentState (uint16 SdConsumedEventGroupHandleId,Sd_ConsumedEventGroupCurrentStateType ConsumedEventGroupState)",
                "comments": "Function called by Service Discovery to indicate current status of the Consumed Event group (available/down)."
            },
            "32": {
                "name": "BswM_Sd_EventHandlerCurrentState",
                "type": "void BswM_Sd_EventHandlerCurrentState (uint16 SdEventHandlerHandleId,Sd_EventHandlerCurrentStateType EventHandlerStatus)",
                "comments": "Function called by Service Discovery to indicate current status of the Event Handler (requested/released)."
            },
            "42": {
                "name": "BswM_SoAd_SoConModeChg",
                "type": "void BswM_SoAd_SoConModeChg (SoAd_SoConIdType SoConId,SoAd_SoConModeType State)",
                "comments": "Function called by SoAd to notify state changes of a socket connection."
            },
            "3": {
                "name": "BswM_MainFunction",
                "type": "void BswM_MainFunction (void)",
                "comments": "Main function of the BSWM"
            }
        }
    },
    "23": {
        "name": "Bulk NvData Manager",
        "short_name": "BndM",
        "functions": {
            "1": {
                "name": "BndM_Init",
                "type": "void BndM_Init (const BndM_ConfigType* ConfigPtr)",
                "comments": "Initializes or reinitializes this module."
            },
            "2": {
                "name": "BndM_GetVersionInfo",
                "type": "void BndM_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module. API Availability: This API will be available only if (ecucBndM / BndMGeneral.BndMVersionInfoApi) == true."
            },
            "3": {
                "name": "BndM_GetBlockPtr_BlockId_Shortname",
                "type": "Std_ReturnType BndM_GetBlockPtr_BlockId_Shortname (BndM_BlockIdType BlockId,BndM_Block_BlockId_ShortnameType** BndM_BlockPtr)",
                "comments": "It seems like you might have meant to provide a specific text that needs corrections or edits. Please share the text you would like me to fix, and I\u2019d be happy to help!"
            },
            "4": {
                "name": "BndM_WriteStart",
                "type": "Std_ReturnType BndM_WriteStart (void)",
                "comments": "Will trigger the start of writing phase. The finish of asynchronous processing will trigger the callback xxx_BndMWriteStartFinish including the result of this operation."
            },
            "5": {
                "name": "BndM_WriteBlock_BlockId_Shortname",
                "type": "Std_ReturnType BndM_WriteBlock_BlockId_Shortname (BndM_BlockIdType BlockId,const BndM_Block_BlockId_ShortnameType* BndM_SrcPtr)",
                "comments": "Will persist the data in flash, that it can later directly accessed via BndM_GetBlockPtr API. The writing takes a while and is finished after the successful callback xxx_BndMWriteBlockFinish."
            },
            "6": {
                "name": "BndM_WriteFinalize",
                "type": "Std_ReturnType BndM_WriteFinalize (void)",
                "comments": "Will trigger the finalization of writing phase. The finish of asynchronous processing will trigger the callback xxx_BndMWriteFinalizeFinish including the result of this operation."
            },
            "7": {
                "name": "BndM_WriteCancel",
                "type": "void BndM_WriteCancel (void)",
                "comments": "Cancels the writing"
            },
            "8": {
                "name": "BndM_JobEndNotification",
                "type": "void BndM_JobEndNotification (void)",
                "comments": "This callback function is called when a FLS job has been finished with positive result."
            },
            "9": {
                "name": "BndM_JobErrorNotification",
                "type": "void BndM_JobErrorNotification (void)",
                "comments": "This callback function is called when a FLS job has been canceled or finished with negative result."
            },
            "85": {
                "name": "BndM_MainFunction",
                "type": "void BndM_MainFunction (void)",
                "comments": "Schedule function for the background processing."
            },
            "86": {
                "name": "Xxx_BndMWriteStartFinish",
                "type": "void Xxx_BndMWriteStartFinish (BndM_BlockIdType BlockId,BndM_ResultType result)",
                "comments": "This callback function is called when BndM_WriteStart is finished."
            },
            "87": {
                "name": "Xxx_BndMWriteBlockFinish",
                "type": "void Xxx_BndMWriteBlockFinish (BndM_BlockIdType BlockId,BndM_ResultType result)",
                "comments": "This callback function is called when BndM_WriteBlock is finished."
            },
            "88": {
                "name": "Xxx_BndMWriteFinalizeFinish",
                "type": "void Xxx_BndMWriteFinalizeFinish (BndM_BlockIdType BlockId,BndM_ResultType result)",
                "comments": "This callback function is called when BndM_WriteFinalize is finished."
            }
        }
    },
    "48": {
        "name": "Bus Mirroring",
        "short_name": "Mirror",
        "functions": {
            "1": {
                "name": "Mirror_Init",
                "type": "void Mirror_Init (const Mirror_ConfigType* configPtr)",
                "comments": "This function initializes the Bus Mirroring module. In configurations in which Mirror is assigned to more than one partition (i.e. Mirror_Main Functions are mapped to partitions), Mirror may provide one init function per partition."
            },
            "2": {
                "name": "Mirror_DeInit",
                "type": "void Mirror_DeInit (void)",
                "comments": "This function resets the Bus Mirroring module to the uninitialized state."
            },
            "3": {
                "name": "Mirror_GetVersionInfo",
                "type": "void Mirror_GetVersionInfo (Std_VersionInfoType* versionInfo)",
                "comments": "Returns the version information of this module."
            },
            "35": {
                "name": "Mirror_GetStaticFilterState",
                "type": "Std_ReturnType Mirror_GetStaticFilterState (NetworkHandleType network,uint8 filterId,boolean* isActive)",
                "comments": "Returns the state of a pre-configured filter."
            },
            "20": {
                "name": "Mirror_SetStaticFilterState",
                "type": "Std_ReturnType Mirror_SetStaticFilterState (NetworkHandleType network,uint8 filterId,boolean isActive)",
                "comments": "Sets the state of a pre-configured filter."
            },
            "21": {
                "name": "Mirror_AddCanRangeFilter",
                "type": "Std_ReturnType Mirror_AddCanRangeFilter (NetworkHandleType network,uint8* filterId,Can_IdType lowerId,Can_IdType upperId)",
                "comments": "Creates a CAN ID range filter."
            },
            "22": {
                "name": "Mirror_AddCanMaskFilter",
                "type": "Std_ReturnType Mirror_AddCanMaskFilter (NetworkHandleType network,uint8* filterId,Can_IdType id,Can_IdType mask)",
                "comments": "Creates a CAN ID mask filter."
            },
            "23": {
                "name": "Mirror_AddLinRangeFilter",
                "type": "Std_ReturnType Mirror_AddLinRangeFilter (NetworkHandleType network,uint8* filterId,uint8 lowerId,uint8 upperId)",
                "comments": "Create a SLInframe ID range filter."
            },
            "24": {
                "name": "Mirror_AddLinMaskFilter",
                "type": "Std_ReturnType Mirror_AddLinMaskFilter (NetworkHandleType network,uint8* filterId,uint8 id,uint8 mask)",
                "comments": "Creates a LIN frame ID mask filter."
            },
            "25": {
                "name": "Mirror_AddFlexRayFilter",
                "type": "Std_ReturnType Mirror_AddFlexRayFilter (NetworkHandleType network,uint8* filterId,uint16 lowerSlotId,uint16 upperSlotId,uint8 lowerBaseCycle,uint8 upperBaseCycle,uint8 cycleRepetition,Fr_ChannelType frChannel)",
                "comments": "Creates a FlexRay filter."
            },
            "26": {
                "name": "Mirror_RemoveFilter",
                "type": "Std_ReturnType Mirror_RemoveFilter (NetworkHandleType network,uint8 filterId)",
                "comments": "Removes a CAN, LIN, or FlexRay filter that was added at runtime."
            },
            "32": {
                "name": "Mirror_IsMirrorActive",
                "type": "boolean Mirror_IsMirrorActive (void)",
                "comments": "Returns the global mirroring state."
            },
            "19": {
                "name": "Mirror_Offline",
                "type": "void Mirror_Offline (void)",
                "comments": "Completely disables any mirroring activities. Source buses are reset to disabled, queued messages are purged, and the destination bus is reset to the default destination. Pre-configured filters are disabled, and filters added at runtime are removed."
            },
            "33": {
                "name": "Mirror_GetDestNetwork",
                "type": "NetworkHandleType Mirror_GetDestNetwork (void)",
                "comments": "Returns the currently selected destination bus."
            },
            "18": {
                "name": "Mirror_SwitchDestNetwork",
                "type": "Std_ReturnType Mirror_SwitchDestNetwork (NetworkHandleType network)",
                "comments": "Change the destination bus to the given ComM channel. The previously active destination bus and all source buses are disabled."
            },
            "34": {
                "name": "Mirror_IsSourceNetworkStarted",
                "type": "boolean Mirror_IsSourceNetworkStarted (NetworkHandleType network)",
                "comments": "Returns the state of a source bus."
            },
            "16": {
                "name": "Mirror_StartSourceNetwork",
                "type": "Std_ReturnType Mirror_StartSourceNetwork (NetworkHandleType network)",
                "comments": "Activates a source bus."
            },
            "17": {
                "name": "Mirror_StopSourceNetwork",
                "type": "Std_ReturnType Mirror_StopSourceNetwork (NetworkHandleType network)",
                "comments": "Deactivates a source bus."
            },
            "36": {
                "name": "Mirror_GetNetworkType",
                "type": "Mirror_NetworkType Mirror_GetNetworkType (NetworkHandleType network)",
                "comments": "Returns the network type of the given network."
            },
            "37": {
                "name": "Mirror_GetNetworkId",
                "type": "uint8 Mirror_GetNetworkId (NetworkHandleType network)",
                "comments": "Returns the network ID of the given network."
            },
            "38": {
                "name": "Mirror_GetNetworkHandle",
                "type": "NetworkHandleType Mirror_GetNetworkHandle (Mirror_NetworkType networkType,uint8 networkId)",
                "comments": "Returns the network handle (ComM Channel) of the bus identified by the given network type and network ID, or MIRROR_INVALID_NETWORK."
            },
            "80": {
                "name": "Mirror_ReportCanFrame",
                "type": "void Mirror_ReportCanFrame (uint8 controllerId,Can_IdType canId,uint8 length,const uint8* payload)",
                "comments": "Reports are received or transmitted CAN frame. All received CAN frames that pass the hardware acceptance filter are reported, independent of the software filter configuration. Transmitted CAN frames are reported when the transmission is confirmed."
            },
            "81": {
                "name": "Mirror_ReportLinFrame",
                "type": "void Mirror_ReportLinFrame (NetworkHandleType network,Lin_FramePidType pid,const PduInfoType* pdu,Lin_StatusType status)",
                "comments": "Reports are received or transmitted in LIN frame."
            },
            "82": {
                "name": "Mirror_ReportFlexRayFrame",
                "type": "void Mirror_ReportFlexRayFrame (uint8 controllerId,uint16 slotId,uint8 cycle,Fr_ChannelType frChannel,const PduInfoType* frame,boolean txConflict)",
                "comments": "Reports are received or transmitted FlexRay frame or a Tx conflict."
            },
            "83": {
                "name": "Mirror_ReportFlexRayChannelStatus",
                "type": "void Mirror_ReportFlexRayChannelStatus (uint8 clusterId,uint16 channelAStatus,uint16 channelBStatus)",
                "comments": "Reports the aggregated channel status for FlexRay channels A and B of a cluster. The status is encoded as specified in SWS_Fr_00558."
            },
            "64": {
                "name": "Mirror_TxConfirmation",
                "type": "void Mirror_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "65": {
                "name": "Mirror_TriggerTransmit",
                "type": "Std_ReturnType Mirror_TriggerTransmit (PduIdType TxPduId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr."
            },
            "4": {
                "name": "Mirror_MainFunction",
                "type": "void Mirror_MainFunction (void)",
                "comments": "Main function of the Bus Mirroring module. Used for scheduling purposes and timeout supervision. Preconfigured Mirror Main Function instance one Mirror_MainFunction_<shortName> shall be implemented. Hereby <shortName> is the short name of the Mirror Main Function configuration container in the ECU configuration."
            }
        }
    },
    "80": {
        "name": "CAN Driver",
        "short_name": "Can",
        "functions": {
            "0": {
                "name": "Can_Init",
                "type": "void Can_Init (const Can_ConfigType* Config)",
                "comments": "This function initializes the module."
            },
            "7": {
                "name": "Can_GetVersionInfo",
                "type": "void Can_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "This function returns the version information of this module."
            },
            "16": {
                "name": "Can_DeInit",
                "type": "void Can_DeInit (void)",
                "comments": "This function de-initializes the module."
            },
            "15": {
                "name": "Can_SetBaudrate",
                "type": "Std_ReturnType Can_SetBaudrate (uint8 Controller,uint16 BaudRateConfigID)",
                "comments": "This service shall set the baud rate configuration of the CAN controller. Depending on necessary baud rate modifications, the controller might have to reset."
            },
            "3": {
                "name": "Can_SetControllerMode",
                "type": "Std_ReturnType Can_SetControllerMode (uint8 Controller,Can_ControllerStateType Transition)",
                "comments": "This function performs software triggered state transitions of the CAN controller State machine."
            },
            "4": {
                "name": "Can_DisableControllerInterrupts",
                "type": "void Can_DisableControllerInterrupts (uint8 Controller)",
                "comments": "This function disables all interrupts for this CAN controller."
            },
            "5": {
                "name": "Can_EnableControllerInterrupts",
                "type": "void Can_EnableControllerInterrupts (uint8 Controller)",
                "comments": "This function enables all allowed interrupts."
            },
            "11": {
                "name": "Can_CheckWakeup",
                "type": "Std_ReturnType Can_CheckWakeup (uint8 Controller)",
                "comments": "This function checks if a wake up has occurred for the given controller."
            },
            "17": {
                "name": "Can_GetControllerErrorState",
                "type": "Std_ReturnType Can_GetControllerErrorState (uint8 ControllerId,Can_ErrorStateType* ErrorStatePtr)",
                "comments": "This service obtains the error state of the CAN controller."
            },
            "18": {
                "name": "Can_GetControllerMode",
                "type": "Std_ReturnType Can_GetControllerMode (uint8 Controller,Can_ControllerStateType* ControllerModePtr)",
                "comments": "This service reports about the current status of the requested CAN controller."
            },
            "48": {
                "name": "Can_GetControllerRxErrorCounter",
                "type": "Std_ReturnType Can_GetControllerRxErrorCounter (uint8 ControllerId,uint8* RxErrorCounterPtr)",
                "comments": "Returns the Rx error counter for a CAN controller. This value might not be available for all CAN controllers, in which case E_NOT_OK would be returned. Please note that the value of the counter might not be correct at the moment the API returns it, because the Rx counter is handled asynchronously in hardware. Applications should not trust this value for any assumption about the current bus state."
            },
            "49": {
                "name": "Can_GetControllerTxErrorCounter",
                "type": "Std_ReturnType Can_GetControllerTxErrorCounter (uint8 ControllerId,uint8* TxErrorCounterPtr)",
                "comments": "Returns the Tx error counter for a CAN controller. This value might not be available for all CAN controllers, in which case E_NOT_OK would be returned. Please note that the value of the counter might not be correct at the moment the API returns it, because the Tx counter is handled asynchronously in hardware. Applications should not trust this value for any assumption about the current bus state."
            },
            "50": {
                "name": "Can_GetCurrentTime",
                "type": "Std_ReturnType Can_GetCurrentTime (uint8 ControllerId,Can_TimeStampType* timeStampPtr)",
                "comments": "Returns a time value out of the HW registers according to the capability of the HW. Important Note: Can_GetCurrentTime may be called within an exclusive area. Tags: atp. Status = draft."
            },
            "51": {
                "name": "Can_EnableEgressTimeStamp",
                "type": "void Can_EnableEgressTimeStamp (Can_HwHandleType Hth)",
                "comments": "Activate segregated timestamping on a dedicated HTH. Some HW does store once the egress timestamp marker and some HW needs it always before transmission. There will be no \"disable\" functionality, due to the fact that the message type is always \"timestamped\" by network design. Tags: atp. Status = draft"
            },
            "52": {
                "name": "Can_GetEgressTimeStamp",
                "type": "Std_ReturnType Can_GetEgressTimeStamp (PduIdType TxPduId,Can_HwHandleType Hth,Can_TimeStampType* timeStampPtr)",
                "comments": "Reads back the egress timestamp on a dedicated message object. It needs to be called within the TxConfirmation() function. Tags: atp. Status = draft."
            },
            "53": {
                "name": "Can_GetIngressTimeStamp",
                "type": "Std_ReturnType Can_GetIngressTimeStamp (Can_HwHandleType Hrh,Can_TimeStampType* timeStampPtr)",
                "comments": "Reads back the ingress timestamp on a dedicated message object. It needs to be called within the RxIndication() function. Tags: atp. Status = draft"
            },
            "6": {
                "name": "Can_Write",
                "type": "Std_ReturnType Can_Write (Can_HwHandleType Hth,const Can_PduType* PduInfo)",
                "comments": "This function is called by CanIf to pass a CAN message to CanDrv for transmission."
            },
            "32": {
                "name": "LPDU_CalloutName",
                "type": "boolean LPDU_CalloutName (uint8 Hrh,Can_IdType CanId,uint8 CanDataLegth,const uint8* CanSduPtr)",
                "comments": "It seems like there was an error as no text was provided to fix. Could you please provide the text you would like me to correct?"
            },
            "1": {
                "name": "Can_MainFunction_Write",
                "type": "void Can_MainFunction_Write (void)",
                "comments": "This function performs the polling of TX confirmation when CAN_TX_PROCESSING is set to POLLING."
            },
            "8": {
                "name": "Can_MainFunction_Read",
                "type": "void Can_MainFunction_Read (void)",
                "comments": "This function performs the polling of RX indications when CAN_RX_PROCESSING is set to POLLING."
            },
            "9": {
                "name": "Can_MainFunction_BusOff",
                "type": "void Can_MainFunction_BusOff (void)",
                "comments": "This function performs the polling of bus-off events that are configured statically as 'to be polled'."
            },
            "10": {
                "name": "Can_MainFunction_Wakeup",
                "type": "void Can_MainFunction_Wakeup (void)",
                "comments": "This function performs the polling of wake-up events that are configured statically as \u2018to be polled\u2019."
            },
            "12": {
                "name": "Can_MainFunction_Mode",
                "type": "void Can_MainFunction_Mode (void)",
                "comments": "This function performs the polling of CAN controller mode transitions."
            }
        }
    },
    "60": {
        "name": "CAN Interface",
        "short_name": "CanIf",
        "functions": {
            "1": {
                "name": "CanIf_Init",
                "type": "void CanIf_Init (const CanIf_ConfigType* ConfigPtr)",
                "comments": "This service initializes internal and external interfaces of the CAN Interface for the further processing."
            },
            "2": {
                "name": "CanIf_DeInit",
                "type": "void CanIf_DeInit (void)",
                "comments": "De-initializes the Can If module."
            },
            "3": {
                "name": "CanIf_SetControllerMode",
                "type": "Std_ReturnType CanIf_SetControllerMode (uint8 ControllerId,Can_ControllerStateType ControllerMode)",
                "comments": "This service calls the corresponding CAN Driver service for changing of the CAN controller mode."
            },
            "4": {
                "name": "CanIf_GetControllerMode",
                "type": "Std_ReturnType CanIf_GetControllerMode (uint8 ControllerId,Can_ControllerStateType* ControllerModePtr)",
                "comments": "This service calls the corresponding CAN Driver service for obtaining the current status of the CAN controller."
            },
            "75": {
                "name": "CanIf_GetControllerErrorState",
                "type": "Std_ReturnType CanIf_GetControllerErrorState (uint8 ControllerId,Can_ErrorStateType* ErrorStatePtr)",
                "comments": "This service calls the corresponding CAN Driver service for obtaining the error state of the CAN controller."
            },
            "73": {
                "name": "CanIf_Transmit",
                "type": "Std_ReturnType CanIf_Transmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU."
            },
            "6": {
                "name": "CanIf_ReadRxPduData",
                "type": "Std_ReturnType CanIf_ReadRxPduData (PduIdType CanIfRxSduId,PduInfoType* CanIfRxInfoPtr)",
                "comments": "This service provides the Data Length and the received data of the requested CanIf Rx Sdu Id to the calling upper layer."
            },
            "7": {
                "name": "CanIf_ReadTxNotifStatus",
                "type": "CanIf_NotifStatusType CanIf_ReadTxNotifStatus (PduIdType CanIfTxSduId)",
                "comments": "This service returns the confirmation status (confirmation occurred or not) of a specific static or dynamic CAN Tx L-PDU, requested by the Can If Tx Sdu Id."
            },
            "8": {
                "name": "CanIf_ReadRxNotifStatus",
                "type": "CanIf_NotifStatusType CanIf_ReadRxNotifStatus (PduIdType CanIfRxSduId)",
                "comments": "This service returns the indication status (indication occurred or not) of a specific CAN Rx L-PDU, requested by the Can If Rx Sdu Id."
            },
            "9": {
                "name": "CanIf_SetPduMode",
                "type": "Std_ReturnType CanIf_SetPduMode (uint8 ControllerId,CanIf_PduModeType PduModeRequest)",
                "comments": "This service sets the requested mode at the L-PDUs of a predefined logical PDU channel."
            },
            "10": {
                "name": "CanIf_GetPduMode",
                "type": "Std_ReturnType CanIf_GetPduMode (uint8 ControllerId,CanIf_PduModeType* PduModePtr)",
                "comments": "This service reports the current mode of a requested PDU channel."
            },
            "11": {
                "name": "CanIf_GetVersionInfo",
                "type": "void CanIf_GetVersionInfo (Std_VersionInfoType* VersionInfo)",
                "comments": "This service returns the version information of the called CAN Interface module."
            },
            "12": {
                "name": "CanIf_SetDynamicTxId",
                "type": "void CanIf_SetDynamicTxId (PduIdType CanIfTxSduId,Can_IdType CanId)",
                "comments": "This service reconfigures the corresponding CAN identifier of the requested CAN L-PDU."
            },
            "13": {
                "name": "CanIf_SetTrcvMode",
                "type": "Std_ReturnType CanIf_SetTrcvMode (uint8 TransceiverId,CanTrcv_TrcvModeType TransceiverMode)",
                "comments": "This service changes the operation mode of the transceiver Transceiver Id, via calling the corresponding CAN Transceiver Driver service."
            },
            "14": {
                "name": "CanIf_GetTrcvMode",
                "type": "Std_ReturnType CanIf_GetTrcvMode (uint8 TransceiverId,CanTrcv_TrcvModeType* TransceiverModePtr)",
                "comments": "This function invokes CanTrcv_GetOpMode and updates the parameter TransceiverModePtr with the value OpMode provided by CanTrcv."
            },
            "15": {
                "name": "CanIf_GetTrcvWakeupReason",
                "type": "Std_ReturnType CanIf_GetTrcvWakeupReason (uint8 TransceiverId,CanTrcv_TrcvWakeupReasonType* TrcvWuReasonPtr)",
                "comments": "This service returns the reason for the wake up of the transceiver TransceiverId, via calling the corresponding CAN Transceiver Driver service."
            },
            "16": {
                "name": "CanIf_SetTrcvWakeupMode",
                "type": "Std_ReturnType CanIf_SetTrcvWakeupMode (uint8 TransceiverId,CanTrcv_TrcvWakeupModeType TrcvWakeupMode)",
                "comments": "This function shall call CanTrcv_SetTrcvWakeupMode."
            },
            "17": {
                "name": "CanIf_CheckWakeup",
                "type": "Std_ReturnType CanIf_CheckWakeup (EcuM_WakeupSourceType WakeupSource)",
                "comments": "This service checks whether an underlying CAN driver or a CAN transceiver driver already signals a wake-up event."
            },
            "18": {
                "name": "CanIf_CheckValidation",
                "type": "Std_ReturnType CanIf_CheckValidation (EcuM_WakeupSourceType WakeupSource)",
                "comments": "This service is performed to validate a previous wake up event."
            },
            "25": {
                "name": "CanIf_GetTxConfirmationState",
                "type": "CanIf_NotifStatusType CanIf_GetTxConfirmationState (uint8 ControllerId)",
                "comments": "This service reports, if any TX confirmation has been done for the whole CAN controllers since the last CAN controller start."
            },
            "30": {
                "name": "CanIf_ClearTrcvWufFlag",
                "type": "Std_ReturnType CanIf_ClearTrcvWufFlag (uint8 TransceiverId)",
                "comments": "Request the Can If module to clear the WUF flag of the designated CAN transceiver."
            },
            "31": {
                "name": "CanIf_CheckTrcvWakeFlag",
                "type": "Std_ReturnType CanIf_CheckTrcvWakeFlag (uint8 TransceiverId)",
                "comments": "Request the Can If module to check the Wake flag of the designated CAN transceiver."
            },
            "39": {
                "name": "CanIf_SetBaudrate",
                "type": "Std_ReturnType CanIf_SetBaudrate (uint8 ControllerId,uint16 BaudRateConfigID)",
                "comments": "This service shall set the baud rate configuration of the CAN controller. Depending on necessary baud rate modifications, the controller might have to reset."
            },
            "77": {
                "name": "CanIf_GetControllerRxErrorCounter",
                "type": "Std_ReturnType CanIf_GetControllerRxErrorCounter (uint8 ControllerId,uint8* RxErrorCounterPtr)",
                "comments": "This service calls the corresponding CAN Driver service for obtaining the Rx error counter of the CAN controller."
            },
            "78": {
                "name": "CanIf_GetControllerTxErrorCounter",
                "type": "Std_ReturnType CanIf_GetControllerTxErrorCounter (uint8 ControllerId,uint8* TxErrorCounterPtr)",
                "comments": "This service calls the corresponding CAN Driver service for obtaining the Tx error counter of the CAN controller."
            },
            "76": {
                "name": "CanIf_EnableBusMirroring",
                "type": "Std_ReturnType CanIf_EnableBusMirroring (uint8 ControllerId,boolean MirroringActive)",
                "comments": "Enables or disables mirroring for a CAN controller."
            },
            "81": {
                "name": "CanIf_GetCurrentTime",
                "type": "Std_ReturnType CanIf_GetCurrentTime (uint8 Controller,Can_TimeStampType* timeStampPtr)",
                "comments": "This service calls the corresponding CAN Driver service to retrieve the current time value out of the HW registers. Tags: atp. Status = draft"
            },
            "82": {
                "name": "CanIf_EnableEgressTimeStamp",
                "type": "void CanIf_EnableEgressTimeStamp (PduIdType TxPduId)",
                "comments": "This service calls the corresponding CAN Driver service to activate egress timestamping on a dedicated message object. Tags: atp. Status=draft"
            },
            "83": {
                "name": "CanIf_GetEgressTimeStamp",
                "type": "Std_ReturnType CanIf_GetEgressTimeStamp (PduIdType TxPduId,Can_TimeStampType* timeStampPtr)",
                "comments": "This service calls the corresponding CAN Driver service to read back the egress timestamp on a dedicated message object. It needs to be called within the TxConfirmation() function. Tags: atp.Status = draft"
            },
            "84": {
                "name": "CanIf_GetIngressTimeStamp",
                "type": "Std_ReturnType CanIf_GetIngressTimeStamp (PduIdType RxPduId,Can_TimeStampType* timeStampPtr)",
                "comments": "This service calls the corresponding CAN Driver service to read back the ingress timestamp on a dedicated message object. It needs to be called within the RxIndication() function. Tags: atp. Status = draft"
            },
            "65": {
                "name": "CanIf_TriggerTransmit",
                "type": "Std_ReturnType CanIf_TriggerTransmit (PduIdType TxPduId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr."
            },
            "19": {
                "name": "CanIf_TxConfirmation",
                "type": "void CanIf_TxConfirmation (PduIdType CanTxPduId)",
                "comments": "This service confirms a previously successfully processed transmission of a CAN Tx PDU."
            },
            "20": {
                "name": "CanIf_RxIndication",
                "type": "void CanIf_RxIndication (const Can_HwType* Mailbox,const PduInfoType* PduInfoPtr)",
                "comments": "This service indicates a successful reception of a received CAN RxL-PDU to the Can If after passing all filters and validation checks."
            },
            "85": {
                "name": "CanIf_XLRxIndication",
                "type": "void CanIf_XLRxIndication (const CanXL_HwType* Mailbox,const PduInfoType* PduInfoPtr)",
                "comments": "This service indicates a successful reception of a received CAN XL RX L-PDU to the Can If after passing all filters and validation checks. It provides the CAN XL specific parameters besides the hardware and actual L-PDU information."
            },
            "22": {
                "name": "CanIf_ControllerBusOff",
                "type": "void CanIf_ControllerBusOff (uint8 ControllerId)",
                "comments": "This service indicates a Controller Bus Off event referring to the corresponding CAN Controller with the abstract Can If Controller Id."
            },
            "26": {
                "name": "CanIf_ConfirmPnAvailability",
                "type": "void CanIf_ConfirmPnAvailability (uint8 TransceiverId)",
                "comments": "This service indicates that the transceiver is running in PN communication mode referring to the corresponding CAN transceiver with the abstract CanIfTransceiverId."
            },
            "86": {
                "name": "CanIf_ConfirmCtrlPnAvailability",
                "type": "void CanIf_ConfirmCtrlPnAvailability (uint8 ControllerId)",
                "comments": "This service indicates that the controller is running in PN communication mode referring to the corresponding CAN controller with the abstract Can If Controller Id. Tags: atp. Status = draft"
            },
            "32": {
                "name": "CanIf_ClearTrcvWufFlagIndication",
                "type": "void CanIf_ClearTrcvWufFlagIndication (uint8 TransceiverId)",
                "comments": "This service indicates that the transceiver has cleared the Wuf Flag referring to the corresponding CAN transceiver with the abstract Can If Transceiver Id."
            },
            "33": {
                "name": "CanIf_CheckTrcvWakeFlagIndication",
                "type": "void CanIf_CheckTrcvWakeFlagIndication (uint8 TransceiverId)",
                "comments": "This service indicates that the check of the transceiver\u2019s wake-up flag has been finished by the corresponding CAN transceiver with the abstract Can If Transceiver Id. This indication is used to cope with the asynchronous transceiver communication."
            },
            "23": {
                "name": "CanIf_ControllerModeIndication",
                "type": "void CanIf_ControllerModeIndication (uint8 ControllerId,Can_ControllerStateType ControllerMode)",
                "comments": "This service indicates a controller state transition referring to the corresponding CAN controller with the abstract Can If Controller Id."
            },
            "34": {
                "name": "CanIf_TrcvModeIndication",
                "type": "void CanIf_TrcvModeIndication (uint8 TransceiverId,CanTrcv_TrcvModeType TransceiverMode)",
                "comments": "This service indicates a transceiver state transition referring to the corresponding CAN transceiver with the abstract CanIfTransceiverId."
            },
            "79": {
                "name": "CanIf_ControllerErrorStatePassive",
                "type": "void CanIf_ControllerErrorStatePassive (uint8 ControllerId,uint16 RxErrorCounter,uint16 TxErrorCounter)",
                "comments": "The function derives the Error Counter Threshold from Rx Error Counter / Tx Error Counter values and reports it to the Ids Mas security event SEV_CAN_ERROR_STATE_PASSIVE to the Ids M. It also prepares the context data for the respective security event."
            },
            "80": {
                "name": "CanIf_ErrorNotification",
                "type": "void CanIf_ErrorNotification (uint8 ControllerId,Can_ErrorType Can_ErrorType)",
                "comments": "The function shall derive the bus error source rx or tx from the parameter CanError and report the bus error as security event SEV_CAN_TX_ERROR_DETECTED or SEV_CAN_RX_ERROR_DETECTED. It also prepares the context data for the respective security event."
            }
        }
    },
    "31": {
        "name": "CAN Network Management",
        "short_name": "CanNm",
        "functions": {
            "0": {
                "name": "CanNm_Init",
                "type": "void CanNm_Init (const CanNm_ConfigType* cannmConfigPtr)",
                "comments": "Initialize the CanNm module."
            },
            "16": {
                "name": "CanNm_DeInit",
                "type": "void CanNm_DeInit (void)",
                "comments": "De-initializes the CanNm module."
            },
            "1": {
                "name": "CanNm_PassiveStartUp",
                "type": "Std_ReturnType CanNm_PassiveStartUp (NetworkHandleType nmChannelHandle)",
                "comments": "PassivestartupoftheAUTOSARCANNM. It triggersthetransitionfromBus-SleepModeorPrepareBusSleepModetotheNetworkModeinRepeatMessageState. Caveats: Can Nmis initialized correctly."
            },
            "2": {
                "name": "CanNm_NetworkRequest",
                "type": "Std_ReturnType CanNm_NetworkRequest (NetworkHandleType nmChannelHandle)",
                "comments": "Request the network, since ECU needs to communicate on the bus."
            },
            "3": {
                "name": "CanNm_NetworkRelease",
                "type": "Std_ReturnType CanNm_NetworkRelease (NetworkHandleType nmChannelHandle)",
                "comments": "Release the network, since ECU doesn\u2019t have to communicate on the bus."
            },
            "12": {
                "name": "CanNm_DisableCommunication",
                "type": "Std_ReturnType CanNm_DisableCommunication (NetworkHandleType nmChannelHandle)",
                "comments": "Disable the NMPDU transmission ability due to a ISO 14229 Communication Control (28 hex) service."
            },
            "13": {
                "name": "CanNm_EnableCommunication",
                "type": "Std_ReturnType CanNm_EnableCommunication (NetworkHandleType nmChannelHandle)",
                "comments": "Enable the NMPDU transmission ability due to a ISO 14229 Communication Control (28 hex) service."
            },
            "4": {
                "name": "CanNm_SetUserData",
                "type": "Std_ReturnType CanNm_SetUserData (NetworkHandleType nmChannelHandle,const uint8* nmUserDataPtr)",
                "comments": "Set user data for NM PDU transmitted next on the bus."
            },
            "5": {
                "name": "CanNm_GetUserData",
                "type": "Std_ReturnType CanNm_GetUserData (NetworkHandleType nmChannelHandle,uint8* nmUserDataPtr)",
                "comments": "Get user data out of the most recently received NM PDU."
            },
            "73": {
                "name": "CanNm_Transmit",
                "type": "Std_ReturnType CanNm_Transmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU."
            },
            "6": {
                "name": "CanNm_GetNodeIdentifier",
                "type": "Std_ReturnType CanNm_GetNodeIdentifier (NetworkHandleType nmChannelHandle,uint8* nmNodeIdPtr)",
                "comments": "Get node identifier out of the most recently received NMPDU."
            },
            "7": {
                "name": "CanNm_GetLocalNodeIdentifier",
                "type": "Std_ReturnType CanNm_GetLocalNodeIdentifier (NetworkHandleType nmChannelHandle,uint8* nmNodeIdPtr)",
                "comments": "Get node identifier configured for the local node."
            },
            "8": {
                "name": "CanNm_RepeatMessageRequest",
                "type": "Std_ReturnType CanNm_RepeatMessageRequest (NetworkHandleType nmChannelHandle)",
                "comments": "Set Repeat Message Request Bit for NMPDU's transmitted next on the bus."
            },
            "10": {
                "name": "CanNm_GetPduData",
                "type": "Std_ReturnType CanNm_GetPduData (NetworkHandleType nmChannelHandle,uint8* nmPduDataPtr)",
                "comments": "Get the whole PDU data out of the most recently received NM PDU."
            },
            "11": {
                "name": "CanNm_GetState",
                "type": "Std_ReturnType CanNm_GetState (NetworkHandleType nmChannelHandle,Nm_StateType* nmStatePtr,Nm_ModeType* nmModePtr)",
                "comments": "Returns the state and the mode of the network management."
            },
            "241": {
                "name": "CanNm_GetVersionInfo",
                "type": "void CanNm_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "This service returns the version information of this module."
            },
            "192": {
                "name": "CanNm_RequestBusSynchronization",
                "type": "Std_ReturnType CanNm_RequestBusSynchronization (NetworkHandleType nmChannelHandle)",
                "comments": "Request bus synchronization."
            },
            "208": {
                "name": "CanNm_CheckRemoteSleepIndication",
                "type": "Std_ReturnType CanNm_CheckRemoteSleepIndication (NetworkHandleType nmChannelHandle,boolean* nmRemoteSleepIndPtr)",
                "comments": "Check if remote sleep indication takes place or not."
            },
            "23": {
                "name": "CanNm_SetSleepReadyBit",
                "type": "Std_ReturnType CanNm_SetSleepReadyBit (NetworkHandleType nmChannelHandle,boolean nmSleepReadyBit)",
                "comments": "Set the NM Coordinator Sleep Ready bit in the Control Bit Vector"
            },
            "242": {
                "name": "CanNm_PnLearningRequest",
                "type": "Std_ReturnType CanNm_PnLearningRequest (NetworkHandleType nmChannelHandle)",
                "comments": "Set Repeat Message Request Bit and Partial Network Learning Bit for NM messages transmitted next on the bus. This will force all nodes to enter the PNC Learning Phase. This is needed for the optional Dynamic PNC-to-channel-mapping feature."
            },
            "244": {
                "name": "CanNm_ActivateTxPnShutdownMsg",
                "type": "Std_ReturnType CanNm_ActivateTxPnShutdownMsg (NetworkHandleType nmChannelHandle)",
                "comments": "N Mind indicate to activate the transmission of PN shutdown messages on the given NM-Channel. This results in transmission of a NM-PDU with PN SR bit set to 1 (PN shutdown message)."
            },
            "245": {
                "name": "CanNm_DeactivateTxPnShutdownMsg",
                "type": "Std_ReturnType CanNm_DeactivateTxPnShutdownMsg (NetworkHandleType nmChannelHandle)",
                "comments": "N Mindicate to deactivate the transmission of PN shutdown messages on the given NM-Channel. This results in transmission of usual NM-PDUs with PN SR bit set to 0."
            },
            "64": {
                "name": "CanNm_TxConfirmation",
                "type": "void CanNm_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "66": {
                "name": "CanNm_RxIndication",
                "type": "void CanNm_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "22": {
                "name": "CanNm_ConfirmPnAvailability",
                "type": "void CanNm_ConfirmPnAvailability (NetworkHandleType nmChannelHandle)",
                "comments": "Enables the PN filter functionality on the indicated NM channel. Availability: The API is only available if CanNmGlobalPnSupport is TRUE."
            },
            "65": {
                "name": "CanNm_TriggerTransmit",
                "type": "Std_ReturnType CanNm_TriggerTransmit (PduIdType TxPduId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr."
            },
            "19": {
                "name": "CanNm_MainFunction",
                "type": "void CanNm_MainFunction (void)",
                "comments": "Main function of the CanNm which processes the algorithm described in that document."
            }
        }
    },
    "140": {
        "name": "CAN State Manager",
        "short_name": "CanSM",
        "functions": {
            "0": {
                "name": "CanSM_Init",
                "type": "void CanSM_Init (const CanSM_ConfigType* ConfigPtr)",
                "comments": "This service initializes the CanSM module."
            },
            "20": {
                "name": "CanSM_DeInit",
                "type": "void CanSM_DeInit (void)",
                "comments": "This service de-initializes the CanSM module."
            },
            "2": {
                "name": "CanSM_RequestComMode",
                "type": "Std_ReturnType CanSM_RequestComMode (NetworkHandleType network,ComM_ModeType ComM_Mode)",
                "comments": "This service shall change the communication mode of a CAN network to the requested one."
            },
            "3": {
                "name": "CanSM_GetCurrentComMode",
                "type": "Std_ReturnType CanSM_GetCurrentComMode (NetworkHandleType network,ComM_ModeType* ComM_ModePtr)",
                "comments": "This service shall put out the current communication mode of a CAN network."
            },
            "17": {
                "name": "CanSM_StartWakeupSource",
                "type": "Std_ReturnType CanSM_StartWakeupSource (NetworkHandleType network)",
                "comments": "This function shall be called by EcuM when wake up source shall be started."
            },
            "18": {
                "name": "CanSM_StopWakeupSource",
                "type": "Std_ReturnType CanSM_StopWakeupSource (NetworkHandleType network)",
                "comments": "This function shall be called by EcuM when a wakeup source shall be stopped."
            },
            "1": {
                "name": "CanSM_GetVersionInfo",
                "type": "void CanSM_GetVersionInfo (Std_VersionInfoType* VersionInfo)",
                "comments": "This service puts out the version information of this module (moduleID, vendorID, vendor specific version numbers related to BSW 00407)."
            },
            "13": {
                "name": "CanSM_SetBaudrate",
                "type": "Std_ReturnType CanSM_SetBaudrate (NetworkHandleType Network,uint16 BaudRateConfigID)",
                "comments": "This service shall start an asynchronous process to change the baud rate for the configured CAN controllers of a certain CAN network. Depending on necessary baud rate modifications, the controllers might have to reset."
            },
            "19": {
                "name": "CanSM_SetEcuPassive",
                "type": "Std_ReturnType CanSM_SetEcuPassive (boolean CanSM_Passive)",
                "comments": "This function can be used to set all CanSM channels of the ECU to a receive only mode."
            },
            "4": {
                "name": "CanSM_ControllerBusOff",
                "type": "void CanSM_ControllerBusOff (uint8 ControllerId)",
                "comments": "This callback function notifies the CanSM about a bus-off event on a certain CAN controller, which needs to be considered with the specified bus-off recovery handling for the impacted CAN network."
            },
            "7": {
                "name": "CanSM_ControllerModeIndication",
                "type": "void CanSM_ControllerModeIndication (uint8 ControllerId,Can_ControllerStateType ControllerMode)",
                "comments": "This callback shall notify the CanSM module about a CAN controller mode change."
            },
            "9": {
                "name": "CanSM_TransceiverModeIndication",
                "type": "void CanSM_TransceiverModeIndication (uint8 TransceiverId,CanTrcv_TrcvModeType TransceiverMode)",
                "comments": "This callback shall notify the CanSM module about a CAN transceiver mode change."
            },
            "11": {
                "name": "CanSM_TxTimeoutException",
                "type": "void CanSM_TxTimeoutException (NetworkHandleType Channel)",
                "comments": "This function shall notify the CanSM module, that the CanNm has detected for the affected partial CAN network a timeout exception, which shall be recovered within the respective network state machine of the CanSM module."
            },
            "8": {
                "name": "CanSM_ClearTrcvWufFlagIndication",
                "type": "void CanSM_ClearTrcvWufFlagIndication (uint8 Transceiver)",
                "comments": "This callback function shall indicate the CanIf_ClearTrcvWufFlag API process end for the notified CAN Transceiver."
            },
            "10": {
                "name": "CanSM_CheckTransceiverWakeFlagIndication",
                "type": "void CanSM_CheckTransceiverWakeFlagIndication (uint8 Transceiver)",
                "comments": "This callback function indicates the CanIf_CheckTrcvWakeFlag API process end for the notified CAN Transceiver."
            },
            "6": {
                "name": "CanSM_ConfirmPnAvailability",
                "type": "void CanSM_ConfirmPnAvailability (uint8 TransceiverId)",
                "comments": "This callback function indicates that the transceiver is running in PN communication mode."
            },
            "21": {
                "name": "CanSM_ConfirmCtrlPnAvailability",
                "type": "void CanSM_ConfirmCtrlPnAvailability (uint8 ControllerId)",
                "comments": "This callback function indicates that the controller is running in PN communication mode. Tags: atp.Status = draft"
            },
            "5": {
                "name": "CanSM_MainFunction",
                "type": "void CanSM_MainFunction (void)",
                "comments": "Scheduled function of the CanSM"
            }
        }
    },
    "70": {
        "name": "CAN Tranceiver Driver",
        "short_name": "CanTrcv",
        "functions": {
            "0": {
                "name": "CanTrcv_Init",
                "type": "void CanTrcv_Init (const CanTrcv_ConfigType* ConfigPtr)",
                "comments": "Initializes the CanTrcv module."
            },
            "1": {
                "name": "CanTrcv_SetOpMode",
                "type": "Std_ReturnType CanTrcv_SetOpMode (uint8 Transceiver,CanTrcv_TrcvModeType OpMode)",
                "comments": "Sets the mode of the Transceiver to the value OpMode."
            },
            "2": {
                "name": "CanTrcv_GetOpMode",
                "type": "Std_ReturnType CanTrcv_GetOpMode (uint8 Transceiver,CanTrcv_TrcvModeType* OpMode)",
                "comments": "Get the mode of the Transceiver and return it in OpMode."
            },
            "3": {
                "name": "CanTrcv_GetBusWuReason",
                "type": "Std_ReturnType CanTrcv_GetBusWuReason (uint8 Transceiver,CanTrcv_TrcvWakeupReasonType* reason)",
                "comments": "Get the wake up reason for the Transceiver and return sit in parameter Reason."
            },
            "4": {
                "name": "CanTrcv_GetVersionInfo",
                "type": "void CanTrcv_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Gets the version of the module and returns it in Version Info."
            },
            "5": {
                "name": "CanTrcv_SetWakeupMode",
                "type": "Std_ReturnType CanTrcv_SetWakeupMode (uint8 Transceiver,CanTrcv_TrcvWakeupModeType TrcvWakeupMode)",
                "comments": "Enables, disables or clears wake-up events of the Transceiver according to Trcv Wakeup Mode."
            },
            "9": {
                "name": "CanTrcv_GetTrcvSystemData",
                "type": "Std_ReturnType CanTrcv_GetTrcvSystemData (uint8 Transceiver,uint32* TrcvSysData)",
                "comments": "Reads the transceiver configuration/status data and returns it through parameter TrcvSysData. This API shall exist only if CanTrcvHwPnSupport = TRUE."
            },
            "10": {
                "name": "CanTrcv_ClearTrcvWufFlag",
                "type": "Std_ReturnType CanTrcv_ClearTrcvWufFlag (uint8 Transceiver)",
                "comments": "Clears the WUF flag in the transceiver hardware. This API shall exist only if CanTrcvHwPnSupport = TRUE."
            },
            "11": {
                "name": "CanTrcv_ReadTrcvTimeoutFlag",
                "type": "Std_ReturnType CanTrcv_ReadTrcvTimeoutFlag (uint8 Transceiver,CanTrcv_TrcvFlagStateType* FlagState)",
                "comments": "Reads the status of the timeout flag from the transceiver hardware. This API shall exist only if CanTrcvHwPnSupport = TRUE."
            },
            "12": {
                "name": "CanTrcv_ClearTrcvTimeoutFlag",
                "type": "Std_ReturnType CanTrcv_ClearTrcvTimeoutFlag (uint8 Transceiver)",
                "comments": "Clears the status of the timeout flag in the transceiver hardware. This API shall exist only if CanTrcvHwPnSupport = TRUE."
            },
            "13": {
                "name": "CanTrcv_ReadTrcvSilenceFlag",
                "type": "Std_ReturnType CanTrcv_ReadTrcvSilenceFlag (uint8 Transceiver,CanTrcv_TrcvFlagStateType* FlagState)",
                "comments": "Reads the status of the silence flag from the transceiver hardware. This API shall exist only if CanTrcvHwPnSupport = TRUE."
            },
            "7": {
                "name": "CanTrcv_CheckWakeup",
                "type": "Std_ReturnType CanTrcv_CheckWakeup (uint8 Transceiver)",
                "comments": "Service is called by underlying CAN IF in case a wake up interrupt is detected."
            },
            "15": {
                "name": "CanTrcv_SetPNActivationState",
                "type": "Std_ReturnType CanTrcv_SetPNActivationState (CanTrcv_PNActivationType ActivationState)",
                "comments": "The API configures the wake-up of the transceiver for Standby and Sleep Mode: Either the CAN transceiver is woken up by a remote wake-up pattern (standard CAN wake-up) or by the configured remote wake-up frame."
            },
            "14": {
                "name": "CanTrcv_CheckWakeFlag",
                "type": "Std_ReturnType CanTrcv_CheckWakeFlag (uint8 Transceiver)",
                "comments": "Requests to check the status of the wakeup flag from the transceiver hardware."
            },
            "16": {
                "name": "CanTrcv_DeInit",
                "type": "void CanTrcv_DeInit (void)",
                "comments": "De-initializes the CanTrcv module."
            },
            "6": {
                "name": "CanTrcv_MainFunction",
                "type": "void CanTrcv_MainFunction (void)",
                "comments": "Service to scan all buses for wake-up events and perform these events."
            },
            "8": {
                "name": "CanTrcv_MainFunctionDiagnostics",
                "type": "void CanTrcv_MainFunctionDiagnostics (void)",
                "comments": "Reads the transceiver diagnostic status periodically and sets product/development accordingly."
            }
        }
    },
    "35": {
        "name": "CAN Transport Layer",
        "short_name": "CanTp",
        "functions": {
            "1": {
                "name": "CanTp_Init",
                "type": "void CanTp_Init (const CanTp_ConfigType* CfgPtr)",
                "comments": "This function initializes the CanTp module."
            },
            "7": {
                "name": "CanTp_GetVersionInfo",
                "type": "void CanTp_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "This function returns the version information of the CanTpm module."
            },
            "2": {
                "name": "CanTp_Shutdown",
                "type": "void CanTp_Shutdown (void)",
                "comments": "This function is called to shut down the CanTp module."
            },
            "73": {
                "name": "CanTp_Transmit",
                "type": "Std_ReturnType CanTp_Transmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU."
            },
            "74": {
                "name": "CanTp_CancelTransmit",
                "type": "Std_ReturnType CanTp_CancelTransmit (PduIdType TxPduId)",
                "comments": "Request cancellation of an ongoing transmission of a PDU in a lower layer communication module."
            },
            "76": {
                "name": "CanTp_CancelReceive",
                "type": "Std_ReturnType CanTp_CancelReceive (PduIdType RxPduId)",
                "comments": "Requests cancellation of an ongoing reception of a PDU in a lower layer transport protocol module."
            },
            "75": {
                "name": "CanTp_ChangeParameter",
                "type": "Std_ReturnType CanTp_ChangeParameter (PduIdType id,TPParameterType parameter,uint16 value)",
                "comments": "Request to change a specific transport protocol parameter (e.g. block size)."
            },
            "11": {
                "name": "CanTp_ReadParameter",
                "type": "Std_ReturnType CanTp_ReadParameter (PduIdType id,TPParameterType parameter,uint16* value)",
                "comments": "This service is used to read the current value of reception parameters BS and ST min for a specified N-SDU."
            },
            "6": {
                "name": "CanTp_MainFunction",
                "type": "void CanTp_MainFunction (void)",
                "comments": "The main function for scheduling the CAN TP."
            },
            "66": {
                "name": "CanTp_RxIndication",
                "type": "void CanTp_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "64": {
                "name": "CanTp_TxConfirmation",
                "type": "void CanTp_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            }
        }
    },
    "85": {
        "name": "CAN XL Driver",
        "short_name": "CanXL",
        "functions": {
            "23": {
                "name": "CanXL_EnableEgressTimeStamp",
                "type": "void CanXL_EnableEgressTimeStamp (uint8 CtrlIdx,Eth_BufIdxType BufIdx)",
                "comments": "Activate egress timestamping on a dedicated message object. Some hardware does store once the egress timestamp marker and some hardware needs it always before transmission. There will be no \"disable\" functionality, due to the fact that the message type is always \"timestamped\" by network design."
            },
            "4": {
                "name": "CanXL_GetControllerMode",
                "type": "Std_ReturnType CanXL_GetControllerMode (uint8 CtrlIdx,Eth_ModeType* CtrlModePtr)",
                "comments": "Obtains the communication state of the indexed controller."
            },
            "20": {
                "name": "CanXL_GetCounterValues",
                "type": "Std_ReturnType CanXL_GetCounterValues (uint8 CtrlIdx,Eth_CounterType* CounterPtr)",
                "comments": "Reads a list with drop counter values of the corresponding controller. The meaning of these values is described at Eth_CounterType."
            },
            "22": {
                "name": "CanXL_GetCurrentTime",
                "type": "Std_ReturnType CanXL_GetCurrentTime (uint8 CtrlIdx,TimeStampQualType* timeQualPtr,TimeStampType* timeStampPtr)",
                "comments": "Returns a time value out of the HW registers according to the capability of the HW. If the HW resolution is lower than the Eth_TimeStampType resolution resp. range, then the remaining bits will be filled with 0. Important Note: Eth_GetCurrentTime may be called within an exclusive area. Tags: atp. Status = obsolete."
            },
            "17": {
                "name": "CanXL_GetCurrentTimeTuple",
                "type": "Std_ReturnType CanXL_GetCurrentTimeTuple (uint8 CtrlIdx,uint8 ClkUnitIdx,TimeTupleType currentTimeTuplePtr)",
                "comments": "Reads the time tuple of the current time of the timestamp clock and the current time of the PHC in an atomic operation. If no PHC is supported, the PHC value will be a copy of the timestamp clock value. Tags: atp. Status = draft"
            },
            "24": {
                "name": "CanXL_GetEgressTimeStamp",
                "type": "Std_ReturnType CanXL_GetEgressTimeStamp (uint8 CtrlIdx,Eth_BufIdxType BufIdx,TimeStampQualType* timeQualPtr,TimeStampType* timeStampPtr)",
                "comments": "Reads back the egress timestamp on a dedicated message object. It must be called within the TxConfirmation() function."
            },
            "25": {
                "name": "CanXL_GetIngressTimeStamp",
                "type": "Std_ReturnType CanXL_GetIngressTimeStamp (uint8 CtrlIdx,const Eth_DataType* DataPtr,TimeStampQualType* timeQualPtr,TimeStampType* timeStampPtr)",
                "comments": "Reads back the ingress timestamp on a dedicated message object. It must be called within the RxIndication() function."
            },
            "8": {
                "name": "CanXL_GetPhysAddr",
                "type": "void CanXL_GetPhysAddr (uint8 CtrlIdx,uint8* PhysAddrPtr)",
                "comments": "Obtains the physical source address used by the indexed controller."
            },
            "21": {
                "name": "CanXL_GetRxStats",
                "type": "Std_ReturnType CanXL_GetRxStats (uint8 CtrlIdx,Eth_RxStatsType* RxStats)",
                "comments": "Returns the following list according to IETF RFC 2819, where the maximal possible value shall denote an invalid value, e.g. if this counter is not available: 1. etherStatsDropEvents 2. etherStatsOctets 3. etherStatsPkts 4. etherStatsBroadcastPkts 5. etherStatsMulticastPkts 6. etherStatsCrcAlignErrors 7. etherStatsUndersizePkts 8. etherStatsOversizePkts 9. etherStatsFragments 10. etherStatsJabbers 11. etherStatsCollisions 12. etherStatsPkts64Octets 13. etherStatsPkts65to127Octets 14. etherStatsPkts128to255Octets 15. etherStatsPkts256to511Octets 16. etherStatsPkts512to1023Octets 17. etherStatsPkts1024to1518Octets"
            },
            "29": {
                "name": "CanXL_GetTxErrorCounterValues",
                "type": "Std_ReturnType CanXL_GetTxErrorCounterValues (uint8 CtrlIdx,Eth_TxErrorCounterValuesType* TxErrorCounterValues)",
                "comments": "Returns the list of Transmission Error Counters out of IETF RFC 1213 and RFC 1643 defined with Eth_TxErrorCounterValuesType, where the maximal possible value shall denote an invalid value, e.g. this counter is not available."
            },
            "28": {
                "name": "CanXL_GetTxStats",
                "type": "Std_ReturnType CanXL_GetTxStats (uint8 CtrlIdx,Eth_TxStatsType* TxStats)",
                "comments": "Returns the list of Transmission Statistics out of IETF RFC 1213 defined with Eth_TxStatsType, where the maximal possible value shall denote an invalid value, e.g. this counter is not available."
            },
            "9": {
                "name": "CanXL_ProvideTxBuffer",
                "type": "BufReq_ReturnType CanXL_ProvideTxBuffer (uint8 CtrlIdx,uint8 Priority,Eth_BufIdxType* BufIdxPtr,uint8** BufPtr,uint16* LenBytePtr)",
                "comments": "Provides access to a transmit buffer of the queue related to the specified priority."
            },
            "11": {
                "name": "CanXL_Receive",
                "type": "void CanXL_Receive (uint8 CtrlIdx,uint8 QueueIdx,Eth_RxStatusType* RxStatusPtr)",
                "comments": "Receive a frame from the related queue."
            },
            "3": {
                "name": "CanXL_SetControllerMode",
                "type": "Std_ReturnType CanXL_SetControllerMode (uint8 CtrlIdx,Eth_ModeType CtrlMode)",
                "comments": "Enables/Disables Rx/Tx communication of the indexed controller. The result is reported asynchronously via Eth If_CtrlModeIndication."
            },
            "19": {
                "name": "CanXL_SetPhysAddr",
                "type": "void CanXL_SetPhysAddr (uint8 CtrlIdx,const uint8* PhysAddrPtr)",
                "comments": "Sets the physical source address used by the indexed controller."
            },
            "10": {
                "name": "CanXL_Transmit",
                "type": "Std_ReturnType CanXL_Transmit (uint8 CtrlIdx,Eth_BufIdxType BufIdx,Eth_FrameType FrameType ,boolean TxConfirmation,uint16 LenByte,const uint8* PhysAddrPtr)",
                "comments": "Triggers transmission of a previously filled transmit buffer"
            },
            "12": {
                "name": "CanXL_TxConfirmation",
                "type": "void CanXL_TxConfirmation (uint8 CtrlIdx)",
                "comments": "Triggers frame transmission confirmation"
            },
            "18": {
                "name": "CanXL_UpdatePhysAddrFilter",
                "type": "Std_ReturnType CanXL_UpdatePhysAddrFilter (uint8 CtrlIdx,const uint8* PhysAddrPtr,Eth_FilterActionType Action)",
                "comments": "Update the physical source address to/from the indexed controller filter. If the controller is not capable to do the filtering, the software has to do this."
            },
            "16": {
                "name": "CanXL_Write",
                "type": "Std_ReturnType CanXL_Write (Can_HwHandleType Hth,const CanXL_PduType* PduInfo)",
                "comments": "This function is called by Can If to pass a CANXL message to the CANXL driver for transmission. It provides the CANXL specific parameters besides the hardware handle and actual PDU information."
            }
        }
    },
    "72": {
        "name": "CAN XL Transceiver Driver",
        "short_name": "CanXLTrcv",
        "functions": {
            "1": {
                "name": "CanXLTrcv_ReportErrorState",
                "type": "Std_ReturnType CanXLTrcv_ReportErrorState (uint8 Transceiver,Can_ErrorStateType ErrorState)",
                "comments": "Report each change of the CAN error state."
            },
            "2": {
                "name": "CanXLTrcv_TransceiverLinkStateRequest",
                "type": "Std_ReturnType CanXLTrcv_TransceiverLinkStateRequest (uint8 TrcvIdx,EthTrcv_LinkStateType LinkState)",
                "comments": "Request the given link state for the given transceiver."
            },
            "3": {
                "name": "CanXLTrcv_SetTransceiverMode",
                "type": "Std_ReturnType CanXLTrcv_SetTransceiverMode (uint8 TrcvIdx,Eth_ModeType TrcvMode)",
                "comments": "Enables/disables the indexed transceiver"
            },
            "4": {
                "name": "CanXLTrcv_GetTransceiverMode",
                "type": "Std_ReturnType CanXLTrcv_GetTransceiverMode (uint8 TrcvIdx,Eth_ModeType* TrcvModePtr)",
                "comments": "Obtains the state of the indexed transceiver."
            },
            "6": {
                "name": "CanXLTrcv_GetLinkState",
                "type": "Std_ReturnType CanXLTrcv_GetLinkState (uint8 TrcvIdx,EthTrcv_LinkStateType* LinkStatePtr)",
                "comments": "Obtains the link state of the indexed transceiver"
            },
            "15": {
                "name": "CanXLTrcv_CheckWakeup",
                "type": "Std_ReturnType CanXLTrcv_CheckWakeup (uint8 TrcvIdx)",
                "comments": "Service is called by Eth in case a wake-up interrupt is detected."
            }
        }
    },
    "189": {
        "name": "CellularV2X Driver",
        "short_name": "CV2x",
        "functions": {
            "1": {
                "name": "CV2x_Init",
                "type": "void CV2x_Init (const CV2x_ConfigType* CfgPtr)",
                "comments": "Initialize the Cellular V2X driver Tags: atp.Status = draft"
            },
            "2": {
                "name": "CV2x_GetVersionInfo",
                "type": "void CV2x_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information of this module. Tags: atp. Status = draft"
            },
            "3": {
                "name": "CV2x_SetControllerMode",
                "type": "Std_ReturnType CV2x_SetControllerMode (uint8 CtrlId,Eth_ModeType CtrlMode)",
                "comments": "Enables/disables the indexed controller. Tags: atp. Status = draft"
            },
            "4": {
                "name": "CV2x_GetControllerMode",
                "type": "Std_ReturnType CV2x_GetControllerMode (uint8 CtrlId,Eth_ModeType* CtrlModePtr)",
                "comments": "Obtains the state of the indexed controller. Tags: atp. Status = draft"
            },
            "5": {
                "name": "CV2x_ProvideTxBuffer",
                "type": "BufReq_ReturnType CV2x_ProvideTxBuffer (uint8 CtrlId,uint8 Priority,Eth_BufIdxType* BufIdPtr,uint8** BufPtr,uint16* LenBytePtr)",
                "comments": "Provides access to a transmit buffer of the specified controller Tags: atp.Status = draft"
            },
            "6": {
                "name": "CV2x_Transmit",
                "type": "Std_ReturnType CV2x_Transmit (uint8 CtrlId,Eth_BufIdxType BufId,boolean TxConfirmation,uint16 LenByte)",
                "comments": "Triggers transmission of a previously filled transmit buffer. Tags: atp.Status = draft"
            },
            "7": {
                "name": "CV2x_TxConfirmation",
                "type": "void CV2x_TxConfirmation (uint8 CtrlId)",
                "comments": "Triggerstransmissionconfirmation Tags: atp.Status = draft"
            },
            "8": {
                "name": "CV2x_Receive",
                "type": "void CV2x_Receive (uint8 CtrlId,Eth_RxStatusType* RxStatusPtr)",
                "comments": "Triggers frame reception Tags: atp.Status = draft"
            },
            "9": {
                "name": "CV2x_GetBufCV2xPC5RxParams",
                "type": "Std_ReturnType CV2x_GetBufCV2xPC5RxParams (uint8 CtrlId,const CV2x_BufCV2xPC5RxParamIdType* RxParamIds,uint32* ParamValues,uint8 NumParams)",
                "comments": "Read out values related to a received packet. For example, this could be CBR to one single packet. This API is valid only within the context of CV2x_Receive Tags: atp.Status = draft."
            },
            "10": {
                "name": "CV2x_GetBufCV2xPC5TxParams",
                "type": "Std_ReturnType CV2x_GetBufCV2xPC5TxParams (uint8 CtrlId,const CV2x_BufCV2xPC5TxParamIdType* TxParamIds,uint32* ParamValues,uint8 NumParams)",
                "comments": "Read out values related to the received direction for a transmitted packet. For example, this could be transaction ID to one single packet. This API is valid only within the context of CV2x_TxConfirmation Tags: atp.Status = draft."
            },
            "11": {
                "name": "CV2x_SetBufCV2xPC5TxParams",
                "type": "Std_ReturnType CV2x_SetBufCV2xPC5TxParams (uint8 CtrlId,Eth_BufIdxType BufId,const CV2x_BufCV2xPC5TxParamIdType* TxParamIds,uint32* ParamValues,uint8 NumParams)",
                "comments": "Set values related to the transmit direction for a specific buffer (packet to be sent). For example, this can be PPPP belonging to one single packet. Tags: atp. Status = draft"
            },
            "12": {
                "name": "CV2x_GetChanCV2xPC5TxParams",
                "type": "Std_ReturnType CV2x_GetChanCV2xPC5TxParams (uint8 CtrlId,uint8 ChannelId,const CV2x_GetChanTxParamIdType* ParamIds,uint32* ParamValues,uint8 NumParams)",
                "comments": "Read values related to the received direction of the channel. For example, this could be a Channel Busy Ratio (CBR) Tags: atp. Status = draft"
            },
            "16": {
                "name": "CV2x_MainFunction",
                "type": "void CV2x_MainFunction (void)",
                "comments": "Support for indirect transmissions (extended frame timing constraints). Used for polling state changes. Calls EthIf_CtrlModeIndication when the controller mode changed. Tags: atp. Status = draft"
            }
        }
    },
    "215": {
        "name": "Charging Manager",
        "short_name": "ChrgM",
        "functions": {
            "1": {
                "name": "ChrgM_Init",
                "type": "void ChrgM_Init (const ChrgM_ConfigType* ConfigPtr)",
                "comments": "This service initializes the ChrgM module Tags: atp. Status = draft"
            },
            "37": {
                "name": "ChrgM_StartProcess",
                "type": "void ChrgM_StartProcess (boolean Process)",
                "comments": "This API gets called by the upper layer to start the Charging Process. If the boolean parameter is set to TRUE, then the ChrgM will initiate the process of IP address assignment; else, not. Tags: atp. Status = draft"
            },
            "30": {
                "name": "ChrgM_CpLineStatus",
                "type": "void ChrgM_CpLineStatus (char CpLineStatus)",
                "comments": "Upper layer calls this API to inform ChrgM about CP line status. Tags: atp.Status = draft"
            },
            "2": {
                "name": "ChrgM_DataLinkIndication",
                "type": "void ChrgM_DataLinkIndication (uint8 CtrlIdx,EthTrcv_LinkStateType TransceiverLinkState)",
                "comments": "This API is called by the Eth SM to inform the Chrg M about the state of the data link connection. Tags: atp. Status = draft"
            },
            "29": {
                "name": "ChrgM_ErrorIndication",
                "type": "void ChrgM_ErrorIndication (ChrgM_ErrorHandlerType ErrorHandler)",
                "comments": "Chrg Min forms upper layer about errors. Tags: atp. Status = draft"
            },
            "36": {
                "name": "ChrgM_MainFunction_Rx",
                "type": "void ChrgM_MainFunction_Rx (void)",
                "comments": "@WIKI! This function performs the processing of the AUTOSAR ChrgM module\u2019s receive processing. @NOWIKI! Tags: atp. Status = draft"
            },
            "35": {
                "name": "ChrgM_MainFunction_Tx",
                "type": "void ChrgM_MainFunction_Tx (void)",
                "comments": "This function performs the processing of the AUTOSAR ChrgM module\u2019s transmit processing. Tags: atp. Status = draft"
            },
            "21": {
                "name": "ChrgM_PaymentServiceSelectionIndication",
                "type": "void ChrgM_PaymentServiceSelectionIndication (ChrgM_ResponseCodeType ResponseCode)",
                "comments": "ChrgMin informs upper layer about Payment method offered by SECC. Tags: atp. Status = draft"
            },
            "18": {
                "name": "ChrgM_SessionSetupIndication",
                "type": "void ChrgM_SessionSetupIndication (ChrgM_ResponseCodeType ResponseCode)",
                "comments": "ChrgMin informs upper layer about V2G session setup information. Tags: atp. Status = draft"
            },
            "28": {
                "name": "ChrgM_SessionStopIndication",
                "type": "void ChrgM_SessionStopIndication (ChrgM_ResponseCodeType ResponseCode)",
                "comments": "ChrgMinformstheupperlayeraboutstatusofV2Gsession.RefertotypedefinitionResponseCodeforallpossibilities.Tags:atp.Status=draft"
            },
            "68": {
                "name": "ChrgM_V2GTpCopyRxData",
                "type": "BufReq_ReturnType ChrgM_V2GTpCopyRxData (PduIdType id,const PduInfoType* info,PduLengthType* bufferSizePtr)",
                "comments": "This function is called to provide the received data of an I-PDU segment (N-PDU) to the upper layer. Each call to this function provides the next part of the I-PDU data. The size of the remaining buffer is written to the position indicated by bufferSizePtr. Tags: atp. Status = draft."
            },
            "67": {
                "name": "ChrgM_V2GTpCopyTxData",
                "type": "BufReq_ReturnType ChrgM_V2GTpCopyTxData (PduIdType id,const PduInfoType* info,const RetryInfoType* retry,PduLengthType* availableDataPtr)",
                "comments": "This function is called to acquire the transmit data of an I-PDU segment (N-PDU). Each call to this function provides the next part of the I-PDU data unless retry->TpDataState is TP_DATARETRY. In this case, the function restarts to copy the data beginning at the offset from the current position indicated by retry->TxTpDataCnt. The size of the remaining data is written to the position indicated by availableDataPtr. Tags: atp. Status = draft"
            },
            "24": {
                "name": "ChrgM_V2GTpLocalIpAddrAssignmentChg",
                "type": "void ChrgM_V2GTpLocalIpAddrAssignmentChg (TcpIp_LocalAddrIdType IpAddrId,TcpIp_IpAddrStateType State)",
                "comments": "The SoAd calls this API to inform the ChrgM about the status of the IP address. Tags: atp.Status = draft"
            },
            "69": {
                "name": "ChrgM_V2GTpRxIndication",
                "type": "void ChrgM_V2GTpRxIndication (PduIdType id,Std_ReturnType result)",
                "comments": "Called by the lower layer after an I-PDU has been received or after the final I-PDU has been received in case of segmentation. Tags: atp. Status = draft"
            },
            "33": {
                "name": "ChrgM_V2GTpSoConModeChg",
                "type": "void ChrgM_V2GTpSoConModeChg (SoAd_SoConIdType SoConId,SoAd_SoConModeType Mode)",
                "comments": "The SoAd calls this API to inform the ChrgM about the status of the socket connection. Note: The parameter SoAdSocketSoConModeChgNotifUpperLayerRef of SoAdSocketConnectionGroup in container SoAdSocketConnectionGroup (see ECUC_SoAd_00161) of the CP-SWS-SocketAdaptor shall be configured. Tags: atp.Status=draft"
            },
            "70": {
                "name": "ChrgM_V2GTpStartOfReception",
                "type": "BufReq_ReturnType ChrgM_V2GTpStartOfReception (PduIdType id,const PduInfoType* info,PduLengthType TpSduLength,PduLengthType* bufferSizePtr)",
                "comments": "This function is called at the start of receiving an N-SDU. The N-SDU might be fragmented into multiple N-PDUs (FF with one or more following CFs) or might consist of a single N-PDU (SF). The service shall provide the currently available maximum buffer size when invoked with TpSduLength equal to 0. Tags: atp. Status = draft"
            },
            "72": {
                "name": "ChrgM_V2GTpTxConfirmation",
                "type": "void ChrgM_V2GTpTxConfirmation (PduIdType id,Std_ReturnType result)",
                "comments": "The lower layer calls this API of the ChrgM to inform the ChrgM about the status of the transmitted PDU. Tags: atp.Status = draft"
            }
        }
    },
    "193": {
        "name": "Chinese Vehicle-2-X Management",
        "short_name": "CnV2xM",
        "functions": {
            "1": {
                "name": "CnV2xM_Init",
                "type": "void CnV2xM_Init (const CnV2xM_ConfigType* CfgPtr)",
                "comments": "Initialize the CnV2xM module Tags: atp.Status = draft"
            },
            "2": {
                "name": "CnV2xM_GetVersionInfo",
                "type": "void CnV2xM_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information of this module. Tags: atp. Status = draft"
            },
            "3": {
                "name": "CnV2xM_GetChanTxParams",
                "type": "Std_ReturnType CnV2xM_GetChanTxParams (uint8 CtrlId,const CnV2xM_ChanType ChannelId,const CV2x_GetChanTxParamIdType* ParamIds,uint32* ParamValues,uint8 NumParams)",
                "comments": "Read values related to the received direction of the channel. For example, this could be a Channel Busy Ratio (CBR) Tags: atp. Status = draft"
            },
            "4": {
                "name": "CnV2xM_MainFunction",
                "type": "void CnV2xM_MainFunction (void)",
                "comments": "Main function of the CnV2xM module for periodical execution of protocol operations. Tags: atp. Status = draft"
            }
        }
    },
    "190": {
        "name": "Chinese Vehicle-2-X Message",
        "short_name": "CnV2xMsg",
        "functions": {
            "1": {
                "name": "CnV2xMsg_Init",
                "type": "void CnV2xMsg_Init (void* CfgPtr)",
                "comments": "Initialize the CnV2xMsg module Tags: atp.Status = draft"
            },
            "2": {
                "name": "CnV2xMsg_GetVersionInfo",
                "type": "void CnV2xMsg_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information of this module. Tags: atp. Status = draft"
            },
            "3": {
                "name": "CnV2xMsg_GetRefTimePtr",
                "type": "Std_ReturnType CnV2xMsg_GetRefTimePtr (const uint32** RefTimePtr)",
                "comments": "Provides a pointer to the time reference of the Chinese V2X Stack. Tags: atp. Status = draft"
            },
            "4": {
                "name": "CnV2xMsg_CheckDistance",
                "type": "Std_ReturnType CnV2xMsg_CheckDistance (float32* Distance)",
                "comments": "Check the distance between the current geographical point and the point when the CnV2xSec commit the pseudonym certificate change one elevation 0. Tags: atp. Status = draft"
            },
            "5": {
                "name": "CnV2xMsg_GetVehickeEventFlagsStatus",
                "type": "Std_ReturnType CnV2xMsg_GetVehickeEventFlagsStatus (CnV2xMsg_VehicleEventFlagsType** vehicleEventFlagsPtr)",
                "comments": "Provides a pointer to the current vehicle event status. Tags: atp.Status = draft"
            },
            "6": {
                "name": "CnV2xMsg_PreparePseudonymChange",
                "type": "void CnV2xMsg_PreparePseudonymChange (uint16 msgClass,uint16 pseudonymCount16)",
                "comments": "By this API primitive the CnV2xMsg module gets an indication that the given Pseudonym certificate and hereby the Msg count and Vehicle ID is about to be changed. Tags: atp. Status = draft"
            },
            "7": {
                "name": "CnV2xMsg_CommitPseudonymChange",
                "type": "Std_ReturnType CnV2xMsg_CommitPseudonymChange (uint16 msgClass,uint16 pseudonymCount16)",
                "comments": "This function is called by the CnV2xSec module when all modules are OK with the pseudonym certificate change and the change is to be committed. Tags: atp. Status = draft"
            },
            "8": {
                "name": "CnV2xMsg_AbortPseudonymChange",
                "type": "Std_ReturnType CnV2xMsg_AbortPseudonymChange (uint16 msgClass,uint16 pseudonymCount16)",
                "comments": "This function is called by the CnV2xSec module when not all modules are OK with the pseudonym certificate change and the change is to be rolled back. Tags: atp. Status = draft"
            },
            "20": {
                "name": "CnV2xMsg_GetTime32",
                "type": "void CnV2xMsg_GetTime32 (uint32 Time32)",
                "comments": "Serviceto get the current reference time"
            },
            "19": {
                "name": "CnV2xMsg_SetPositionAndTime",
                "type": "void CnV2xMsg_SetPositionAndTime (CnV2xMsg_PositionAndTimeType PositionAndTime)",
                "comments": "Service for setting positional and time information relevant for the V2X Stack"
            },
            "9": {
                "name": "CnV2xMsg_TxConfirmation",
                "type": "void CnV2xMsg_TxConfirmation (uint16 TransactionId16)",
                "comments": "By this API primitive, the CnV2xMsg module gets a confirmation that the V2X message with a certain ID was sent successfully. Tags: atp. Status = draft"
            },
            "10": {
                "name": "CnV2xMsg_RxIndication",
                "type": "void CnV2xMsg_RxIndication (uint32 TransactionId32,CnV2xMsg_RxParamsType* ReceiveParams,uint16 Length,const uint8* DataPtr)",
                "comments": "By this API primitive the CnV2xMsg module gets a confirmation that the V2X message with a certain ID was sent successfully. This API primitive is called by the CnV2xNet module providing the data and the Network parameters of a received DSMP packet to CnV2xMsg module. Tags: atp.Status=draft"
            },
            "11": {
                "name": "CnV2xMsg_EncapConfirmation",
                "type": "void CnV2xMsg_EncapConfirmation (uint16 TransactionId16,uint16* SecuredDataLength,uint8* SecuredDataPtr)",
                "comments": "This function is called by the V2x Sec CN module when an encapsulation has been finished. Tags: atp. Status = draft"
            },
            "12": {
                "name": "CnV2xMsg_DecapConfirmation",
                "type": "void CnV2xMsg_DecapConfirmation (uint32 TransactionId32,CnV2x_SecReportType SecReport,uint64 CertificateId,uint64 Aid)",
                "comments": "This function is called by the CnV2xSec module when a decapsulation has been finished. Tags: atp. Status = draft"
            },
            "13": {
                "name": "CnV2xMsg_BsmBs_MainFunction",
                "type": "void CnV2xMsg_BsmBs_MainFunction (void)",
                "comments": "This is the main processing function of the BSM basic service. Tags: atp.Status = draft"
            },
            "14": {
                "name": "CnV2xMsg_Mgt_MainFunction",
                "type": "void CnV2xMsg_Mgt_MainFunction (void)",
                "comments": "Scheduled Management Function of CnV2x Msg Tags: atp.Status = draft"
            },
            "15": {
                "name": "CnV2xMsg_RsiS_MainFunction",
                "type": "void CnV2xMsg_RsiS_MainFunction (void)",
                "comments": "This is the main processing function of the RSI service Tags: atp. Status = draft"
            },
            "16": {
                "name": "CnV2xMsg_RsmS_MainFunction",
                "type": "void CnV2xMsg_RsmS_MainFunction (void)",
                "comments": "This is the main processing function of the RSM service Tags: atp.Status = draft"
            },
            "17": {
                "name": "CnV2xMsg_SpatS_MainFunction",
                "type": "void CnV2xMsg_SpatS_MainFunction (void)",
                "comments": "This is the main processing function of the SPAT service Tags: atp. Status = draft"
            },
            "18": {
                "name": "CnV2xMsg_MapS_MainFunction",
                "type": "void CnV2xMsg_MapS_MainFunction (void)",
                "comments": "This is the main processing function of the MAP service Tags: atp.Status = draft"
            },
            "21": {
                "name": "CnV2xMsg_RxS_MainFunction",
                "type": "void CnV2xMsg_RxS_MainFunction (void)",
                "comments": "This is the main processing function of the message reception service when the received V2X messages are sent to application layer or PDUR via V2xDm module. Tags: atp. Status = draft"
            }
        }
    },
    "191": {
        "name": "Chinese Vehicle-2-X Network",
        "short_name": "CnV2xNet",
        "functions": {
            "1": {
                "name": "CnV2xNet_Init",
                "type": "void CnV2xNet_Init (void* CfgPtr)",
                "comments": "Initialize the CnV2xNet module Tags: atp.Status = draft"
            },
            "2": {
                "name": "CnV2xNet_GetVersionInfo",
                "type": "void CnV2xNet_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information of this module. Tags: atp. Status = draft"
            },
            "3": {
                "name": "CnV2xNet_Transmit",
                "type": "CnV2x_NetTxResultType CnV2xNet_Transmit (uint16 TransactionId16,const CnV2xNet_TxParamsType* TxParams,uint16 Length,const uint8* DataPtr)",
                "comments": "This API is called by the CvxMsgCN module to request sending a Network Layer V2 XPDU to the peer Network entity. Tags: atp. Status = draft"
            },
            "4": {
                "name": "CnV2xNet_PrepareAppLayerIdChange",
                "type": "Std_ReturnType CnV2xNet_PrepareAppLayerIdChange (uint8 TransmissionClass,uint16 ApplayerIdChangedCount16)",
                "comments": "By this API primitive the CnV2xNet module gets an indication that Application Layer ID is about to change and hereby source Layer-2 ID is about to be changed. Tags: atp. Status = draft"
            },
            "5": {
                "name": "CnV2xNet_CommitAppLayerIdChange",
                "type": "Std_ReturnType CnV2xNet_CommitAppLayerIdChange (uint8 TransmissionClass,uint16 ApplayerIdChangedCount16)",
                "comments": "The CnV2 xMsg module calls this function when all modules are OK with the pseudonym certificate change and the change is to be committed. Tags: atp. Status = draft"
            },
            "6": {
                "name": "CnV2xNet_AbortAppLayerIdChange",
                "type": "Std_ReturnType CnV2xNet_AbortAppLayerIdChange (uint8 TransmissionClass,uint16 ApplayerIdChangedCount16)",
                "comments": "The CnV2x Msg module calls this function when not all modules are OK with the pseudonym certificate change and the change is to be rolled back. Tags: atp. Status = draft"
            },
            "7": {
                "name": "CnV2xNet_RxIndication",
                "type": "void CnV2xNet_RxIndication (uint8 CtrlIdx,Eth_FrameType FrameType,boolean IsBroadcast,const uint8* PhysAddrPtr,uint8* DataPtr,uint16 LenByte)",
                "comments": "Indicates the reception of an Ethernet frame. Tags: atp.Status = draft"
            },
            "8": {
                "name": "CnV2xNet_TxConfirmation",
                "type": "void CnV2xNet_TxConfirmation (uint8 CtrlIdx,uint8 BufIdx)",
                "comments": "Confirms the transmission of an Ethernet frame Tags: at p.Status = draft"
            },
            "9": {
                "name": "CnV2xNet_MainFunction",
                "type": "void CnV2xNet_MainFunction (void)",
                "comments": "Main function of the CnV2xNet module for periodical execution of protocol operations. Tags: atp. Status = draft"
            }
        }
    },
    "192": {
        "name": "Chinese Vehicle-2-X Security",
        "short_name": "CnV2xSec",
        "functions": {
            "1": {
                "name": "CnV2xSec_Init",
                "type": "void CnV2xSec_Init (const CnV2xSec_ConfigType* CfgPtr)",
                "comments": "Initialize the CnV2xSec module Tags: atp.Status = draft"
            },
            "2": {
                "name": "CnV2xSec_GetVersionInfo",
                "type": "void CnV2xSec_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information of this module. Tags: atp. Status = draft"
            },
            "3": {
                "name": "CnV2xSec_ReqEncap",
                "type": "CnV2xSec_SecReturnType CnV2xSec_ReqEncap (uint16 TransactionId16,CnV2xSec_SecProfileType SecProfile,uint16 UnsecuredDataLength,const uint8* UnsecuredDataPtr,uint16* SecuredDataLength,uint8* SecuredDataPtr)",
                "comments": "This function is called by the CnV2xMsg to generate the SPDU, which includes the V2X message, the signature and pseudonym. An asynchronous CnV2xMsg_EncapConfirmation call will be used to notify CnV2xMsg of the result. Tags: atp. Status = draft"
            },
            "4": {
                "name": "CnV2xSec_ReqDecap",
                "type": "CnV2xSec_SecReturnType CnV2xSec_ReqDecap (uint32 TransactionId32,uint16 SecuredDataLength,const uint8* SecuredDataPtr,uint16* UnsecuredDataLength,uint8* UnsecuredDataPtr,CnV2xSec_SecReportType* SecReport,uint32* Aid)",
                "comments": "This function is called by the CnV2xMsg to decapsulate the SPDU. An asynchronous CnV2xMsg_DecapConfirmation call will be used to notify CnV2xMsg of the result. Tags: atp.Status=draft"
            },
            "5": {
                "name": "CnV2xSec_MainFunction",
                "type": "void CnV2xSec_MainFunction (void)",
                "comments": "Scheduled Main Function of Cn V2x Sec Tags: atp.Status = draft"
            }
        }
    },
    "50": {
        "name": "COM",
        "short_name": "Com",
        "functions": {
            "1": {
                "name": "Com_Init",
                "type": "void Com_Init (const Com_ConfigType* config)",
                "comments": "This service initializes internal and external interfaces and variables of the AUTOSAR COM module layer for the further processing. After calling this function the inter-ECU communication is still disabled. In configurations, in which Com is assigned to more than one partition (i.e. Com_MainFunctions are mapped to partitions), Com may provide one init function per partition."
            },
            "2": {
                "name": "Com_DeInit",
                "type": "void Com_DeInit (void)",
                "comments": "This service stops the inter-ECU communication. All started I-PDU groups are stopped and have to be started again, if needed, after Com_Init is called. By a call to Com_DeInit the AUTOSAR COM module is put into a not initialized state."
            },
            "3": {
                "name": "Com_IpduGroupStart",
                "type": "void Com_IpduGroupStart (Com_IpduGroupIdType IpduGroupId,boolean initialize)",
                "comments": "Starts preconfigured I-PDU group. For example, cyclic I-PDUs will be sent out cyclically after the call of Com_IpduGroupStart(). If Initialize is true, all I-PDUs of the I-PDU group shall be (re-)initialized before the I-PDU group is started. That is, they shall have values like after a start-up of COM; for example, the old value of the filter objects and shadow buffers of signal group have to be (re-)initialized."
            },
            "4": {
                "name": "Com_IpduGroupStop",
                "type": "void Com_IpduGroupStop (Com_IpduGroupIdType IpduGroupId)",
                "comments": "Stops are preconfigured I-PDU group. For example, cyclic I-PDUs will be stopped after the call of Com_IpduGroupStop()."
            },
            "6": {
                "name": "Com_EnableReceptionDM",
                "type": "void Com_EnableReceptionDM (Com_IpduGroupIdType IpduGroupId)",
                "comments": "Enables the reception deadline monitoring for the I-PDUs within the given I-PDU group."
            },
            "5": {
                "name": "Com_DisableReceptionDM",
                "type": "void Com_DisableReceptionDM (Com_IpduGroupIdType IpduGroupId)",
                "comments": "Disables the reception deadline monitoring for the I-PDUs within the given I-PDU group."
            },
            "7": {
                "name": "Com_GetStatus",
                "type": "Com_StatusType Com_GetStatus (void)",
                "comments": "Returns the status of the AUTOSAR COM module."
            },
            "9": {
                "name": "Com_GetVersionInfo",
                "type": "void Com_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "10": {
                "name": "Com_SendSignal",
                "type": "uint8 Com_SendSignal (Com_SignalIdType SignalId,const void* SignalDataPtr)",
                "comments": "TheServiceCom_SendSignalUpdateTheSignalObjectIdentifiedBySignalIdWithTheSignalReferencedByTheSignalDataPtrParameter."
            },
            "33": {
                "name": "Com_SendDynSignal",
                "type": "uint8 Com_SendDynSignal (Com_SignalIdType SignalId,const void* SignalDataPtr,uint16 Length)",
                "comments": "TheServiceCom_SendDynSignal updates the signal object identified by SignalId with the signal referenced by the SignalDataPtr parameter."
            },
            "11": {
                "name": "Com_ReceiveSignal",
                "type": "uint8 Com_ReceiveSignal (Com_SignalIdType SignalId,void* SignalDataPtr)",
                "comments": "Com_ReceiveSignal copies the data of the signal identified by SignalId to the location specified by SignalDataPtr."
            },
            "34": {
                "name": "Com_ReceiveDynSignal",
                "type": "uint8 Com_ReceiveDynSignal (Com_SignalIdType SignalId,void* SignalDataPtr,uint16* Length)",
                "comments": "Com_ReceiveDynSignal copies the data of the signal identified by SignalId to the location specified by SignalDataPtr and stores the length of the dynamic length signal at the position given by the Length parameter."
            },
            "13": {
                "name": "Com_SendSignalGroup",
                "type": "uint8 Com_SendSignalGroup (Com_SignalGroupIdType SignalGroupId)",
                "comments": "The service Com_SendSignalGroup copies the content of the associated shadow buffer to the associated I-PDU."
            },
            "14": {
                "name": "Com_ReceiveSignalGroup",
                "type": "uint8 Com_ReceiveSignalGroup (Com_SignalGroupIdType SignalGroupId)",
                "comments": "TheServiceCom_ReceiveSignalGroup copies the received signal group from the I-PDU to the shadow buffer."
            },
            "35": {
                "name": "Com_SendSignalGroupArray",
                "type": "uint8 Com_SendSignalGroupArray (Com_SignalGroupIdType SignalGroupId,const uint8* SignalGroupArrayPtr)",
                "comments": "TheServiceCom_SendSignalGroupArray copies the content of the provided SignalGroupArrayPtr to the associated I-PDU. The provided data shall correspond to the array representation of the signal group."
            },
            "36": {
                "name": "Com_ReceiveSignalGroupArray",
                "type": "uint8 Com_ReceiveSignalGroupArray (Com_SignalGroupIdType SignalGroupId,uint8* SignalGroupArrayPtr)",
                "comments": "The service Com_ReceiveSignalGroupArray copies the received signal group array representation from the PDU to the location designated by SignalGroupArrayPtr."
            },
            "73": {
                "name": "Com_ReceiveSignalWithMetaData",
                "type": "uint8 Com_ReceiveSignalWithMetaData (Com_SignalIdType SignalId,void* SignalDataPtr,uint8* MetaDataPtr)",
                "comments": "Com_ReceiveSignalWithMetadata copies the data of the signal identified by SignalId to the location specified by SignalDataPtr. The received metadata is stored at the position given by the MetaDataPtr parameter."
            },
            "74": {
                "name": "Com_ReceiveDynSignalWithMetaData",
                "type": "uint8 Com_ReceiveDynSignalWithMetaData (Com_SignalIdType SignalId,void* SignalDataPtr,uint16* Length,uint8* MetaDataPtr)",
                "comments": "Com_ReceiveDynSignalWithMetaData copies the data of the signal identified by SignalId to the location specified by SignalDataPtr and stores the length of the dynamically length signal at the position given by the Length parameter. The received metadata is stored at the position given by the MetaDataPtr parameter."
            },
            "75": {
                "name": "Com_ReceiveSignalGroupWithMetaData",
                "type": "uint8 Com_ReceiveSignalGroupWithMetaData (Com_SignalGroupIdType SignalGroupId,uint8* MetaDataPtr)",
                "comments": "TheServiceCom_ReceiveSignalGroupWithMetaData copies the received signal group from the I-PDU to the shadow buffer. The received metadata is stored at the position given by the MetaDataPtr parameter."
            },
            "76": {
                "name": "Com_ReceiveSignalGroupArrayWithMetaData",
                "type": "void Com_ReceiveSignalGroupArrayWithMetaData (Com_SignalGroupIdType SignalGroupId,uint8* SignalGroupArrayPtr,uint8* MetaDataPtr)",
                "comments": "TheServiceCom_ReceiveSignalGroupArrayWithMetaData copies the received signal group array representation from the PDU to the location designated by SignalGroupArrayPtr. The received metadata is stored at the position given by the MetaDataPtr parameter."
            },
            "77": {
                "name": "Com_SendSignalWithMetaData",
                "type": "uint8 Com_SendSignalWithMetaData (Com_SignalIdType SignalId,const void* SignalDataPtr,const uint8* MetaDataPtr)",
                "comments": "TheServiceCom_SendSignalWithMetaData updates the signal object identified by SignalId with the signal referenced by the SignalDataPtr parameter. The metadata is provided via the MetaDataPtr parameter."
            },
            "78": {
                "name": "Com_SendDynSignalWithMetaData",
                "type": "uint8 Com_SendDynSignalWithMetaData (Com_SignalIdType SignalId,const void* SignalDataPtr,uint16 Length,const uint8* MetaDataPtr)",
                "comments": "TheServiceCom_SendDynSignalWithMetaData updates the signal object identified by SignalId with the signal referenced by the SignalDataPtr parameter. The metadata is provided via the MetaDataPtr parameter."
            },
            "79": {
                "name": "Com_SendSignalGroupWithMetaData",
                "type": "uint8 Com_SendSignalGroupWithMetaData (Com_SignalGroupIdType SignalGroupId,const uint8* MetaDataPtr)",
                "comments": "TheServiceCom_SendSignalGroupWithMetaData copies the content of the associated shadow buffer to the associated I-PDU. The metadata is provided via the MetaDataPtr parameter."
            },
            "80": {
                "name": "Com_SendSignalGroupArrayWithMetaData",
                "type": "uint8 Com_SendSignalGroupArrayWithMetaData (Com_SignalGroupIdType SignalGroupId,const uint8* SignalGroupArrayPtr,const uint8* MetaDataPtr)",
                "comments": "TheServiceCom_SendSignalGroupArrayWithMetaData copies the content of the provided SignalGroupArrayPtr to the associated I-PDU. The provided data shall correspond to the array representation of the signal group. The metadata is provided via the MetaDataPtr parameter."
            },
            "16": {
                "name": "Com_InvalidateSignal",
                "type": "uint8 Com_InvalidateSignal (Com_SignalIdType SignalId)",
                "comments": "The service Com_InvalidaeSignal invalidates the signal with the given SignalId by setting its value to its configured ComSignalDataInvalidValue."
            },
            "27": {
                "name": "Com_InvalidateSignalGroup",
                "type": "uint8 Com_InvalidateSignalGroup (Com_SignalGroupIdType SignalGroupId)",
                "comments": "TheServiceCom_InvalidateSignalGroup invalidates all group signals of the signal group with the given SignalGroupId by setting their values to their configured ComSignalDataInvalidValues."
            },
            "23": {
                "name": "Com_TriggerIPDUSend",
                "type": "Std_ReturnType Com_TriggerIPDUSend (PduIdType PduId)",
                "comments": "By a call to Com_TriggerIPDUSend, the I-PDU with the given ID is triggered for transmission."
            },
            "40": {
                "name": "Com_TriggerIPDUSendWithMetaData",
                "type": "Std_ReturnType Com_TriggerIPDUSendWithMetaData (PduIdType PduId,const uint8* MetaData)",
                "comments": "By a call to Com_TriggerIPDUSendWithMetadata, the AUTOSAR COM module updates its internal metadata for the I-PDU with the given ID by copying the metadata from the given position and with respect to length of the globally configured MetaDataType of this I-PDU. Then the I-PDU is triggered for transmission."
            },
            "39": {
                "name": "Com_SwitchIpduTxMode",
                "type": "void Com_SwitchIpduTxMode (PduIdType PduId,boolean Mode)",
                "comments": "The service Com_SwitchIpduTxMode sets the transmission mode of the I-PDU referenced by PduId to Mode. In case the transmission mode changes, the new mode shall immediately be effective (see SWS_Com_00239). In case the requested transmission mode was already active for this I-PDU, the call will have no effect."
            },
            "65": {
                "name": "Com_TriggerTransmit",
                "type": "Std_ReturnType Com_TriggerTransmit (PduIdType TxPduId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr."
            },
            "66": {
                "name": "Com_RxIndication",
                "type": "void Com_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "69": {
                "name": "Com_TpRxIndication",
                "type": "void Com_TpRxIndication (PduIdType id,Std_ReturnType result)",
                "comments": "Called after an I-PDU has been received via the TP API, the result indicates whether the transmission was successful or not."
            },
            "64": {
                "name": "Com_TxConfirmation",
                "type": "void Com_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "72": {
                "name": "Com_TpTxConfirmation",
                "type": "void Com_TpTxConfirmation (PduIdType id,Std_ReturnType result)",
                "comments": "This function is called after the I-PDU has been transmitted on its network, the result indicates whether the transmission was successful or not."
            },
            "70": {
                "name": "Com_StartOfReception",
                "type": "BufReq_ReturnType Com_StartOfReception (PduIdType id,const PduInfoType* info,PduLengthType TpSduLength,PduLengthType* bufferSizePtr)",
                "comments": "This function is called at the start of receiving an N-SDU. The N-SDU might be fragmented into multiple N-PDUs (FF with one or more following CFs) or might consist of a single N-PDU (SF). The service shall provide the currently available maximum buffer size when invoked with TpSduLength equal to 0."
            },
            "68": {
                "name": "Com_CopyRxData",
                "type": "BufReq_ReturnType Com_CopyRxData (PduIdType id,const PduInfoType* info,PduLengthType* bufferSizePtr)",
                "comments": "This function is called to provide the received data of an I-PDU segment (N-PDU) to the upper layer. Each call to this function provides the next part of the I-PDU data. The size of the remaining buffer is written to the position indicated by bufferSizePtr."
            },
            "67": {
                "name": "Com_CopyTxData",
                "type": "BufReq_ReturnType Com_CopyTxData (PduIdType id,const PduInfoType* info,const RetryInfoType* retry,PduLengthType* availableDataPtr)",
                "comments": "This function is called to acquire the transmit data of an I-PDU segment (N-PDU). Each call to this function provides the next part of the I-PDU data unless retry->TpDataState is TP_DATA_RETRY. In this case the function restarts to copy the data beginning at the offset from the current position indicated by retry->TxTpDataCnt. The size of the remaining data is written to the position indicated by availableDataPtr."
            },
            "24": {
                "name": "Com_MainFunctionRx",
                "type": "void Com_MainFunctionRx (void)",
                "comments": "This function performs the processing of the AUTOSAR COM module\u2019s receive processing that are not directly handled within the COM\u2019s functions invoked by the PDU-R, for example Com_RxIndication. Per configured ComMainFunctionRx instance, one Com_MainFunctionRx_<shortName> shall be implemented. Hereby, <shortName> is the short name of the ComMainFunctionRx configuration container in the ECU configuration."
            },
            "25": {
                "name": "Com_MainFunctionTx",
                "type": "void Com_MainFunctionTx (void)",
                "comments": "This function performs the processing of the AUTOSAR COM module\u2019s transmission activities that are not directly handled within the COM\u2019s function invoked by the users (e.g. RTE, SwCluC), for example Com_SendSignal. Per configured Com Main Function Tx instance, one Com_MainFunctionTx_<shortName> shall be implemented. Hereby, <shortName> is the short name of the Com Main Function Tx configuration container in the ECU configuration."
            },
            "26": {
                "name": "Com_MainFunctionRouteSignals",
                "type": "void Com_MainFunctionRouteSignals (void)",
                "comments": "Call the signal gateway part of the AUTOSAR COM module to forward received signals to be routed. Preconfigured Com Main Function Route Signals instance one Com_MainFunctionRouteSignals_<shortName> shall be implemented. Hereby <shortName> is the short name of the Com Main Function Route Signals configuration container in the ECU configuration."
            },
            "42": {
                "name": "Com_RxIpduCallout",
                "type": "boolean Com_RxIpduCallout (PduIdType PduId,const PduInfoType* PduInfoPtr)",
                "comments": "The I-PDU callout on receiver side can be configured to implement user-defined receive filtering mechanisms."
            },
            "41": {
                "name": "Com_TxIpduCallout",
                "type": "boolean Com_TxIpduCallout (PduIdType PduId,PduInfoType* PduInfoPtr)",
                "comments": "The I-PDU callout on sender side can be configured for example to implement user-defined transmission filtering or user-defined pre-transmission processing of the outgoing I-PDU."
            }
        }
    },
    "175": {
        "name": "COM Based Transformer",
        "short_name": "ComXf",
        "functions": {
            "3": {
                "name": "ComXf_transformerId",
                "type": "uint8 ComXf_transformerId (uint8* buffer,uint32* bufferLength,paramtype dataElement)",
                "comments": "This function transforms a Sender/Receiver communication using the serialization of COM Based Transformer. It takes the data element as input and outputs a uint8 array containing the serialized data."
            },
            "4": {
                "name": "ComXf_Inv_transformerId",
                "type": "uint8 ComXf_Inv_transformerId (const uint8* buffer,uint32 bufferLength,type* dataElement)",
                "comments": "This function deserializes a Sender/Receiver communication using the deserialization of COM Based Transformer. It takes the uint8 array containing the serialized data as input and outputs the original data element which will be passed to the Rte."
            },
            "1": {
                "name": "ComXf_Init",
                "type": "void ComXf_Init (const ComXf_ConfigType* config)",
                "comments": "This service initializes the transformer for the further processing."
            },
            "2": {
                "name": "ComXf_DeInit",
                "type": "void ComXf_DeInit (void)",
                "comments": "This service deinitializes the transformer."
            },
            "0": {
                "name": "ComXf_GetVersionInfo",
                "type": "void ComXf_GetVersionInfo (Std_VersionInfoType* VersionInfo)",
                "comments": "This service returns the version information of the called transformer module."
            }
        }
    },
    "12": {
        "name": "COM Manager",
        "short_name": "ComM",
        "functions": {
            "1": {
                "name": "ComM_Init",
                "type": "void ComM_Init (const ComM_ConfigType* ConfigPtr)",
                "comments": "Initializes the AUTOSAR Communication Manager and restarts the internal state machines."
            },
            "2": {
                "name": "ComM_DeInit",
                "type": "void ComM_DeInit (void)",
                "comments": "This API de-initializes the AUTOSAR Communication Manager."
            },
            "3": {
                "name": "ComM_GetStatus",
                "type": "Std_ReturnType_ComM ComM_GetStatus (ComM_InitStatusType* Status)",
                "comments": "Returns the initialization status of the AUTOSAR Communication Manager. After a call to ComM_DeInit(), ComM should have status COMM_UNINIT, and a new call to ComM_Init is needed to make sure ComM restarts internal state machines to default values."
            },
            "4": {
                "name": "ComM_GetInhibitionStatus",
                "type": "Std_ReturnType_ComM ComM_GetInhibitionStatus (NetworkHandleType Channel,ComM_InhibitionStatusType* Status)",
                "comments": "Returns the inhibition status of a ComM channel."
            },
            "5": {
                "name": "ComM_RequestComMode",
                "type": "Std_ReturnType_ComM ComM_RequestComMode (ComM_UserHandleType User,ComM_ModeType ComMode)",
                "comments": "Requesting of a Communication Mode by a user. Note: The following modes are not valid user requests, since they are used as internal modes: - COMM_SILENT_COMMUNICATION (this mode is used for synchronization at shutdown) - COMM_FULL_COMMUNICATION_WITH_WAKEUP_REQUEST (this mode is used internally within the ComM channel state machine to trigger the lower layers to request awake upon the network if the used hardware supports such a feature (e.g. Ethernet hardware which is compatible with OATC10). The following modes are valid user requests: - COMM_NO_COMMUNICATION - COMM_FULL_COMMUNICATION. The communication request could also be released due to a ComM communication inhibition."
            },
            "6": {
                "name": "ComM_GetMaxComMode",
                "type": "Std_ReturnType_ComM ComM_GetMaxComMode (ComM_UserHandleType User,ComM_ModeType* ComMode)",
                "comments": "Function to query the maximum allowed Communication Mode of the corresponding user."
            },
            "7": {
                "name": "ComM_GetRequestedComMode",
                "type": "Std_ReturnType_ComM ComM_GetRequestedComMode (ComM_UserHandleType User,ComM_ModeType* ComMode)",
                "comments": "Function to query the currently requested Communication Mode of the corresponding user."
            },
            "8": {
                "name": "ComM_GetCurrentComMode",
                "type": "Std_ReturnType_ComM ComM_GetCurrentComMode (ComM_UserHandleType User,ComM_ModeType* ComMode)",
                "comments": "Function to query the current Communication Mode. ComM shall use the corresponding interfaces of the Bus State Manager to get the current Communication Mode of the network. (Call to Bus State Manager API: <Bus> SM_GetCurrentComMode(...))"
            },
            "106": {
                "name": "ComM_GetCurrentPNCComMode",
                "type": "Std_ReturnType_ComM ComM_GetCurrentPNCComMode (ComM_UserHandleType User,ComM_ModeType* ComMode)",
                "comments": "The function returns the current Communication Mode of the corresponding PNC the affected user is assigned to."
            },
            "104": {
                "name": "ComM_GetPncToChannelMapping",
                "type": "Std_ReturnType_ComM ComM_GetPncToChannelMapping (uint8* MappingTable,uint8* ChannelCnt,uint8* PNCBitVectorLength)",
                "comments": "This function returns the current configuration of the ECU's PNC-to-channel mapping."
            },
            "98": {
                "name": "ComM_UpdatePncToChannelMapping",
                "type": "Std_ReturnType_ComM ComM_UpdatePncToChannelMapping (const uint8* MappingTable,uint8 channelCnt,uint8 PNCBitVectorLength)",
                "comments": "This function can be used to set entries within the ECU's PNC-to-channel mapping."
            },
            "99": {
                "name": "ComM_ResetPncToChannelMapping",
                "type": "Std_ReturnType_ComM ComM_ResetPncToChannelMapping (void)",
                "comments": "This function resets dynamic entries within the ECU's PNC-to-channel mapping to default values."
            },
            "100": {
                "name": "ComM_PnLearningRequest",
                "type": "Std_ReturnType_ComM ComM_PnLearningRequest (void)",
                "comments": "Triggers the NM to return into NM Repeat Message State and send the Partial Network Learning Bit (in order for receiving nodes to respond) together with the Repeat Message Request Bit (in order for receiving nodes to return into NM Repeat Message State). This function is used for the optional Dynamic PNC-to-channel-mapping feature."
            },
            "101": {
                "name": "ComM_UpdatePncMembership",
                "type": "Std_ReturnType_ComM ComM_UpdatePncMembership (boolean Control,const uint8* PncMembership)",
                "comments": "This function is used by SWCs to update the PNC membership which is transmitted during PNC Learning. This function is used for the optional Dynamic PNC-to-channel-mapping feature."
            },
            "9": {
                "name": "ComM_PreventWakeUp",
                "type": "Std_ReturnType_ComM ComM_PreventWakeUp (NetworkHandleType Channel,boolean Status)",
                "comments": "Change the inhibition status COMM_NO_WAKE_UP for the corresponding channel."
            },
            "11": {
                "name": "ComM_LimitChannelToNoComMode",
                "type": "Std_ReturnType_ComM ComM_LimitChannelToNoComMode (NetworkHandleType Channel,boolean Status)",
                "comments": "Change the inhibition status for the channel for changing from COMM_NO_COMMUNICATION to a higher Communication Mode. (See also ComM_LimitECUToNoComMode, same functionality but for all channels)"
            },
            "12": {
                "name": "ComM_LimitECUToNoComMode",
                "type": "Std_ReturnType_ComM ComM_LimitECUToNoComMode (boolean Status)",
                "comments": "Change the inhibition status for the ECU (=all channels) for changing from COMM_NO_COMMUNICATION to a higher Communication Mode. (See also ComM_LimitChannelToNoComMode, same functionality but for specific channels)"
            },
            "13": {
                "name": "ComM_ReadInhibitCounter",
                "type": "Std_ReturnType_ComM ComM_ReadInhibitCounter (uint16* CounterValue)",
                "comments": "This function returns the amount of rejected COMM_FULL_COMMUNICATION user requests."
            },
            "14": {
                "name": "ComM_ResetInhibitCounter",
                "type": "Std_ReturnType_ComM ComM_ResetInhibitCounter (void)",
                "comments": "This function resets the Inhibited COMM_FULL_COMMUNICATION request Counter."
            },
            "15": {
                "name": "ComM_SetECUGroupClassification",
                "type": "Std_ReturnType_ComM ComM_SetECUGroupClassification (ComM_InhibitionStatusType Status)",
                "comments": "Change the ECU Group Classification status (see chapter 10.2.2)"
            },
            "16": {
                "name": "ComM_GetVersionInfo",
                "type": "void ComM_GetVersionInfo (Std_VersionInfoType* Versioninfo)",
                "comments": "This function returns the version information of this module."
            },
            "21": {
                "name": "ComM_Nm_NetworkStartIndication",
                "type": "void ComM_Nm_NetworkStartIndication (NetworkHandleType Channel)",
                "comments": "Indication that a NM-message has been received in the Bus Sleep Mode, what indicates that some nodes in the network have already entered the Network Mode."
            },
            "24": {
                "name": "ComM_Nm_NetworkMode",
                "type": "void ComM_Nm_NetworkMode (NetworkHandleType Channel)",
                "comments": "Notification that the network management has entered Network Mode."
            },
            "25": {
                "name": "ComM_Nm_PrepareBusSleepMode",
                "type": "void ComM_Nm_PrepareBusSleepMode (NetworkHandleType Channel)",
                "comments": "Notification that the network management has entered Prepare Bus-Sleep Mode. Reentrancy: Reentrant (but not for the same NM-Channel)"
            },
            "26": {
                "name": "ComM_Nm_BusSleepMode",
                "type": "void ComM_Nm_BusSleepMode (NetworkHandleType Channel)",
                "comments": "Notification that the network management has entered Bus-Sleep Mode. This callback function should perform a transition of the hardware and transceiver to bus-sleep mode."
            },
            "27": {
                "name": "ComM_Nm_RestartIndication",
                "type": "void ComM_Nm_RestartIndication (NetworkHandleType Channel)",
                "comments": "If NM if has started to shut down the coordinated busses, AND not all coordinated busses have indicated bus sleep state, AND on at least one of the coordinated busses NM is restarted, THEN the NM Interface shall call the callback function ComM_Nm_RestartIndication with the nmNetworkHandle of the channels which have already indicated bus sleep state."
            },
            "102": {
                "name": "ComM_Nm_RepeatMessageLeftIndication",
                "type": "void ComM_Nm_RepeatMessageLeftIndication (NetworkHandleType Channel)",
                "comments": "Notification that the state of all <Bus> Nm has left Repeat Message. This interface is used to indicate by the optional Dynamic PNC-to-channel-mapping feature to indicate that learning phase ends."
            },
            "105": {
                "name": "ComM_Nm_PncLearningBitIndication",
                "type": "void ComM_Nm_PncLearningBitIndication (NetworkHandleType Channel)",
                "comments": "Service to indicate that an NM message with set PNCLearning Bit has been received."
            },
            "107": {
                "name": "ComM_Nm_ForwardSynchronizedPncShutdown",
                "type": "void ComM_Nm_ForwardSynchronizedPncShutdown (NetworkHandleType Channel,const uint8* PncBitVectorPtr)",
                "comments": "If an ECU in the role of an intermediate PNC coordinator receives a PN shutdown message via a <Bus> Nm, then ComM is immediately indicated via ComM_Nm_ForwardSynchronizedPncShutdown to forward the request for a synchronized PNC shutdown of the affected PNCs given by PncBitVectorPtr. Therefore, ComM will immediately release the affected PNC state machines and forward the PNC bit vector to the affected ComM Channels and the corresponding NM channels, respectively. Note: This supports an early synchronized PNC shutdown across the PN topology from the top-level PNC coordinator down to the subordinated PNC node."
            },
            "108": {
                "name": "ComM_Nm_UpdateEIRA",
                "type": "void ComM_Nm_UpdateEIRA (const uint8* PncBitVectorPtr)",
                "comments": "Function to indicate the current aggregated external/internal PNC request called by Nm."
            },
            "109": {
                "name": "ComM_Nm_UpdateERA",
                "type": "void ComM_Nm_UpdateERA (NetworkHandleType Channel,const uint8* PncBitVectorPtr)",
                "comments": "Function to indicate the current external PNC request per channel called by Nm."
            },
            "31": {
                "name": "ComM_DCM_ActiveDiagnostic",
                "type": "void ComM_DCM_ActiveDiagnostic (NetworkHandleType Channel)",
                "comments": "Indication of active diagnostic by the DCM."
            },
            "32": {
                "name": "ComM_DCM_InactiveDiagnostic",
                "type": "void ComM_DCM_InactiveDiagnostic (NetworkHandleType Channel)",
                "comments": "Indication of inactive diagnostic by the DCM."
            },
            "42": {
                "name": "ComM_EcuM_WakeUpIndication",
                "type": "void ComM_EcuM_WakeUpIndication (NetworkHandleType Channel)",
                "comments": "Notification of wake up on the corresponding channel."
            },
            "55": {
                "name": "ComM_EcuM_PNCWakeUpIndication",
                "type": "void ComM_EcuM_PNCWakeUpIndication (PNCHandleType PNCid)",
                "comments": "Notification of a wake up on the corresponding partial network cluster."
            },
            "53": {
                "name": "ComM_CommunicationAllowed",
                "type": "void ComM_CommunicationAllowed (NetworkHandleType Channel,boolean Allowed)",
                "comments": "EcuMorBswM shall indicate to ComM when communication is allowed. If EcuM/Flex is used: BswM"
            },
            "51": {
                "name": "ComM_BusSM_ModeIndication",
                "type": "void ComM_BusSM_ModeIndication (NetworkHandleType Channel,ComM_ModeType ComMode)",
                "comments": "Indication of the actual bus mode by the corresponding Bus State Manager. ComM shall propagate the indicated state to the users with means of the RTE and BswM."
            },
            "52": {
                "name": "ComM_BusSM_BusSleepMode",
                "type": "void ComM_BusSM_BusSleepMode (NetworkHandleType Channel)",
                "comments": "Notification of the corresponding Bus State Manager that the actual bus mode is Bus-Sleep. Only applicable for ComM channels with ComM Nm Variant set to SLAVE_ACTIVE or SLAVE_PASSIVE. E.g. LIN slaves (ComM NM Variant = SLAVE_ACTIVE) or Ethernet channels with OATC10 compliant Ethernet hardware which act as passive communication slave (ComM NM Variant = SLAVE_PASSIVE and Eth Trcv Act As Slave Passive Enabled set to TRUE)."
            },
            "96": {
                "name": "ComM_MainFunction_ComMChannel_ShortName",
                "type": "void ComM_MainFunction_ComMChannel_ShortName (void)",
                "comments": "This function shall perform the processing of the AUTOSAR ComM activities that are not directly initiated by the calls e.g. from the RTE. There shall be one dedicated Main Function for each channel of ComM. Precondition: ComM shall be initialized."
            }
        }
    },
    "103": {
        "name": "Core Test",
        "short_name": "CorTst",
        "functions": {
            "0": {
                "name": "CorTst_Init",
                "type": "void CorTst_Init (const CorTst_ConfigType* ConfigPtr)",
                "comments": "Service for the initialization and change of state of the Core Test."
            },
            "1": {
                "name": "CorTst_DeInit",
                "type": "void CorTst_DeInit (void)",
                "comments": "Service to change from CORTST_ABORT or CORTST_INIT to CORTST_UNINIT state."
            },
            "2": {
                "name": "CorTst_Abort",
                "type": "void CorTst_Abort (void)",
                "comments": "Service to change from CORTST_INIT to CORTST_ABORT state."
            },
            "3": {
                "name": "CorTst_GetState",
                "type": "CorTst_StateType CorTst_GetState (void)",
                "comments": "Service for Core Test to immediately return the status of the currently executed Core Test."
            },
            "4": {
                "name": "CorTst_GetCurrentStatus",
                "type": "void CorTst_GetCurrentStatus (CorTst_ErrOkType* ErrOk)",
                "comments": "Service for Core Test to get an indicator of the last executed Core Test result."
            },
            "5": {
                "name": "CorTst_GetSignature",
                "type": "CorTst_CsumSignatureBgndType CorTst_GetSignature (void)",
                "comments": "Service to get the signature of the last executed Core Test in background mode."
            },
            "6": {
                "name": "CorTst_GetFgndSignature",
                "type": "CorTst_CsumSignatureType CorTst_GetFgndSignature (void)",
                "comments": "Service to get the signature of the last executed Core Test in foreground mode."
            },
            "7": {
                "name": "CorTst_Start",
                "type": "Std_ReturnType CorTst_Start (CorTst_TestIdFgndType TestId)",
                "comments": "Service for executing Core Test in the foreground."
            },
            "8": {
                "name": "CorTst_GetVersionInfo",
                "type": "void CorTst_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Service returns the version information of this module."
            },
            "11": {
                "name": "CorTst_MainFunction",
                "type": "void CorTst_MainFunction (void)",
                "comments": "Cyclically called by the scheduler to perform the processing of the Core Test."
            },
            "12": {
                "name": "CorTst_TestCompletedNotification",
                "type": "void CorTst_TestCompletedNotification (CorTst_ErrOkType ResultOfLastCorTstRun)",
                "comments": "The function CorTst_TestCompletedNotification shall be called every time when a complete test cycle has been executed."
            }
        }
    },
    "114": {
        "name": "Crypto Driver",
        "short_name": "Crypto",
        "functions": {
            "0": {
                "name": "Crypto_Init",
                "type": "void Crypto_Init (const Crypto_ConfigType* configPtr)",
                "comments": "Initialize the Crypto Driver."
            },
            "1": {
                "name": "Crypto_GetVersionInfo",
                "type": "void Crypto_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "3": {
                "name": "Crypto_ProcessJob",
                "type": "Std_ReturnType_Crypto Crypto_ProcessJob (uint32 objectId,Crypto_JobType* job)",
                "comments": "Performs the crypto primitive, that is configured in the job parameter."
            },
            "14": {
                "name": "Crypto_CancelJob",
                "type": "Std_ReturnType_Crypto Crypto_CancelJob (uint32 objectId,Crypto_JobType* job)",
                "comments": "This interface removes the provided job from the queue and cancels the processing of the job if possible."
            },
            "4": {
                "name": "Crypto_KeyElementSet",
                "type": "Std_ReturnType_Crypto Crypto_KeyElementSet (uint32 cryptoKeyId,uint32 keyElementId,const uint8* keyPtr,uint32 keyLength)",
                "comments": "Sets the given key element by test to the key identified by cryptoKeyId."
            },
            "5": {
                "name": "Crypto_KeySetValid",
                "type": "Std_ReturnType_Crypto Crypto_KeySetValid (uint32 cryptoKeyId)",
                "comments": "Sets the key state of the key identified by cryptoKeyId to valid."
            },
            "21": {
                "name": "Crypto_KeySetInvalid",
                "type": "Std_ReturnType_Crypto Crypto_KeySetInvalid (uint32 cryptoKeyId)",
                "comments": "Sets invalid for the status of the key identified by crypto Key Id."
            },
            "6": {
                "name": "Crypto_KeyElementGet",
                "type": "Std_ReturnType_Crypto Crypto_KeyElementGet (uint32 cryptoKeyId,uint32 keyElementId,uint8* resultPtr,uint32* resultLengthPtr)",
                "comments": "This interface shall be used to get a key element of the key identified by the crypto KeyId and store the key element in the memory location pointed by the result pointer. Note: If the actual key element is directly mapped to flash memory, there could be a bigger delay when calling this function (synchronous operation)."
            },
            "20": {
                "name": "Crypto_KeyGetStatus",
                "type": "Std_ReturnType_Crypto Crypto_KeyGetStatus (uint32 cryptoKeyId,Crypto_KeyStatusType* keyStatusPtr)",
                "comments": "Returns the key state of the key identified by crypto Key Id."
            },
            "15": {
                "name": "Crypto_KeyElementCopy",
                "type": "Std_ReturnType_Crypto Crypto_KeyElementCopy (uint32 cryptoKeyId,uint32 keyElementId,uint32 targetCryptoKeyId,uint32 targetKeyElementId)",
                "comments": "Copies a key element to another key element in the same crypto driver. Note: If the actual key element is directly mapped to flash memory, there could be a bigger delay when calling this function (synchronous operation)."
            },
            "19": {
                "name": "Crypto_KeyElementCopyPartial",
                "type": "Std_ReturnType_Crypto Crypto_KeyElementCopyPartial (uint32 cryptoKeyId,uint32 keyElementId,uint32 keyElementSourceOffset,uint32 keyElementTargetOffset,uint32 keyElementCopyLength,uint32 targetCryptoKeyId,uint32 targetKeyElementId)",
                "comments": "Copies a key element to another key element in the same crypto driver. The keyElementSourceOffset and keyElementCopyLength allows to copy just a part of the source key element into the destination. The offset of the target key is also specified with this function. Note: If the actual key element is directly mapped to flash memory, there could be a bigger delay when calling this function (synchronous operation)."
            },
            "16": {
                "name": "Crypto_KeyCopy",
                "type": "Std_ReturnType_Crypto Crypto_KeyCopy (uint32 cryptoKeyId,uint32 targetCryptoKeyId)",
                "comments": "Copies a key with all its elements to another key in the same crypto driver. Note: If the actual key element is directly mapped to flash memory, there could be a bigger delay when calling this function (synchronous operation)."
            },
            "17": {
                "name": "Crypto_KeyElementIdsGet",
                "type": "Std_ReturnType_Crypto Crypto_KeyElementIdsGet (uint32 cryptoKeyId,uint32* keyElementIdsPtr,uint32* keyElementIdsLengthPtr)",
                "comments": "Used to retrieve information which key elements are available in a given key."
            },
            "13": {
                "name": "Crypto_RandomSeed",
                "type": "Std_ReturnType_Crypto Crypto_RandomSeed (uint32 cryptoKeyId,const uint8* seedPtr,uint32 seedLength)",
                "comments": "This function generates the internal seed state using the provided entropy source. Furthermore, this function can be used to update the seed state with new entropy."
            },
            "7": {
                "name": "Crypto_KeyGenerate",
                "type": "Std_ReturnType_Crypto Crypto_KeyGenerate (uint32 cryptoKeyId)",
                "comments": "Generates new key material to store it in the key identified by cryptoKeyId."
            },
            "8": {
                "name": "Crypto_KeyDerive",
                "type": "Std_ReturnType_Crypto Crypto_KeyDerive (uint32 cryptoKeyId,uint32 targetCryptoKeyId)",
                "comments": "Derives a new key by using the key elements in the given key identified by the cryptoKeyId. The given key contains the key elements for the password, salt. The derived key is stored in the key element with the id 1 of the key identified by targetCryptoKeyId. The number of iterations is given in the key element CRYPTO_KE_KEY_DERIVATION_ITERATIONS."
            },
            "9": {
                "name": "Crypto_KeyExchangeCalcPubVal",
                "type": "Std_ReturnType_Crypto Crypto_KeyExchangeCalcPubVal (uint32 cryptoKeyId,uint8* publicValuePtr,uint32* publicValueLengthPtr)",
                "comments": "Calculate the public value for the key exchange and store the public key in the memory location pointed by the public value pointer."
            },
            "10": {
                "name": "Crypto_KeyExchangeCalcSecret",
                "type": "Std_ReturnType_Crypto Crypto_KeyExchangeCalcSecret (uint32 cryptoKeyId,const uint8* partnerPublicValuePtr,uint32 partnerPublicValueLength)",
                "comments": "Calculate the shared secret key for the key exchange with the key material of the key identified by the crypto KeyId and the partner public key. The shared secret key is stored as a key element in the same key."
            },
            "26": {
                "name": "Crypto_CustomSync",
                "type": "Std_ReturnType_Crypto Crypto_CustomSync (uint32 dispatchId,uint32 keyId,uint32 keyElementId,uint32 targetKeyId,uint32 targetKeyElementId,const uint8* inputPtr,uint32 inputLength,uint8* outputPtr,uint32* outputLengthPtr,uint8* secondaryOutputPtr,uint32* secondaryOutputLengthPtr)",
                "comments": "Requests the execution of a function that is specified by the given dispatch id."
            },
            "22": {
                "name": "Crypto_vi_ai_NvBlock_Init_NvBlock",
                "type": "Std_ReturnType_Crypto Crypto_vi_ai_NvBlock_Init_NvBlock (NvM_InitBlockRequestType initBlockRequest)",
                "comments": "This function will be called by NVM. The crypto driver has the task to initialize the NVRAM block. The resulting function name shall be set to the container associated with the Nvm Block Descriptor: {CryptoNvBlock/CryptoNvBlockDescriptorRef}/NvmInitBlockCallback}/NvmInitBlockCallbackFnc"
            },
            "23": {
                "name": "Crypto_vi_ai_NvBlock_ReadFrom_NvBlock",
                "type": "Std_ReturnType_Crypto Crypto_vi_ai_NvBlock_ReadFrom_NvBlock (const void* NvmBuffer)",
                "comments": "This function is called by NVM to let the crypto driver copy the key data from the mirror of the NVM RAM block to an internal RAM buffer of the crypto driver. The resulting function name shall be set to the container associated with the Nvm Block Descriptor: {CryptoNvBlock/{CryptoNvBlockDescriptorRef}/NvMReadRamBlockFromNvCallback}."
            },
            "24": {
                "name": "Crypto_vi_ai_NvBlock_WriteTo_NvBlock",
                "type": "Std_ReturnType_Crypto Crypto_vi_ai_NvBlock_WriteTo_NvBlock (void* NvmBuffer)",
                "comments": "This function is called by NVM to let the crypto driver copy the internal key element data to a mirror of the NVM ram block shortly before the data are written to NVM. The resulting function name shall be set to the container associated with the Nvm Block Descriptor: {CryptoNvBlock/{CryptoNvBlockDescriptorRef}/NvMWriteRamBlockToNvCallback"
            },
            "25": {
                "name": "Crypto_vi_ai_NvBlock_Callback_NvBlock",
                "type": "Std_ReturnType_Crypto Crypto_vi_ai_NvBlock_Callback_NvBlock (NvM_BlockRequestType BlockRequest,NvM_RequestResultType JobResult)",
                "comments": "This function is called from NVM to notify the crypto driver that an asynchronous single block request has been finished. The resulting function name shall be set to the container associated with the NvmBlockDescriptor: {CryptoNvBlock/{CryptoNvBlockDescriptorRef}/NvmSingleBlockCallback}/NvmSingleBlockCallbackFnc"
            },
            "12": {
                "name": "Crypto_MainFunction",
                "type": "void Crypto_MainFunction (void)",
                "comments": "If asynchronous job processing is configured and there are job queues, the function is called cyclically to process queued jobs."
            }
        }
    },
    "112": {
        "name": "Crypto Interface",
        "short_name": "CryIf",
        "functions": {
            "0": {
                "name": "CryIf_Init",
                "type": "void CryIf_Init (const CryIf_ConfigType* configPtr)",
                "comments": "Initializes the CRYIF module."
            },
            "1": {
                "name": "CryIf_GetVersionInfo",
                "type": "void CryIf_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "3": {
                "name": "CryIf_ProcessJob",
                "type": "Std_ReturnType_CryIf CryIf_ProcessJob (uint32 channelId,Crypto_JobType* job)",
                "comments": "This interface dispatches the received jobs to the configured crypto driver object."
            },
            "14": {
                "name": "CryIf_CancelJob",
                "type": "Std_ReturnType_CryIf CryIf_CancelJob (uint32 channelId,Crypto_JobType* job)",
                "comments": "This interface dispatches the job cancellation function to the configured CryptoDriver object."
            },
            "4": {
                "name": "CryIf_KeyElementSet",
                "type": "Std_ReturnType_CryIf CryIf_KeyElementSet (uint32 cryIfKeyId,uint32 keyElementId,const uint8* keyPtr,uint32 keyLength)",
                "comments": "This function shall dispatch the set key element function to the configured cryptodriver object."
            },
            "5": {
                "name": "CryIf_KeySetValid",
                "type": "Std_ReturnType_CryIf CryIf_KeySetValid (uint32 cryIfKeyId)",
                "comments": "This function shall dispatch the set key valid function to the configured cryptodriver object."
            },
            "20": {
                "name": "CryIf_KeySetInvalid",
                "type": "Std_ReturnType_CryIf CryIf_KeySetInvalid (uint32 cryIfKeyId)",
                "comments": "Sets invalid for the status of the key identified by cryIfKeyId."
            },
            "19": {
                "name": "CryIf_KeyGetStatus",
                "type": "Std_ReturnType_CryIf CryIf_KeyGetStatus (uint32 cryIfKeyId,Crypto_KeyStatusType* keyStatusPtr)",
                "comments": "Returns the key state of the key identified by cryIfKeyId."
            },
            "6": {
                "name": "CryIf_KeyElementGet",
                "type": "Std_ReturnType_CryIf CryIf_KeyElementGet (uint32 cryIfKeyId,uint32 keyElementId,uint8* resultPtr,uint32* resultLengthPtr)",
                "comments": "This function shall dispatch the **get key element** function to the configured **cryptodriver** object."
            },
            "15": {
                "name": "CryIf_KeyElementCopy",
                "type": "Std_ReturnType_CryIf CryIf_KeyElementCopy (uint32 cryIfKeyId,uint32 keyElementId,uint32 targetCryIfKeyId,uint32 targetKeyElementId)",
                "comments": "This function shall copy key elements from one key to a target key."
            },
            "18": {
                "name": "CryIf_KeyElementCopyPartial",
                "type": "Std_ReturnType_CryIf CryIf_KeyElementCopyPartial (uint32 cryIfKeyId,uint32 keyElementId,uint32 keyElementSourceOffset,uint32 keyElementTargetOffset,uint32 keyElementCopyLength,uint32 targetCryIfKeyId,uint32 targetKeyElementId)",
                "comments": "Copies a key element to another key element. The keyElementOffsets and keyElementCopyLength allow copying just parts of the source key element into the destination key element."
            },
            "16": {
                "name": "CryIf_KeyCopy",
                "type": "Std_ReturnType_CryIf CryIf_KeyCopy (uint32 cryIfKeyId,uint32 targetCryIfKeyId)",
                "comments": "This function shall copy all key elements from the source key to the target key."
            },
            "7": {
                "name": "CryIf_RandomSeed",
                "type": "Std_ReturnType_CryIf CryIf_RandomSeed (uint32 cryIfKeyId,const uint8* seedPtr,uint32 seedLength)",
                "comments": "This function shall dispatch the random seed to the configured cryptodriver object."
            },
            "8": {
                "name": "CryIf_KeyGenerate",
                "type": "Std_ReturnType_CryIf CryIf_KeyGenerate (uint32 cryIfKeyId)",
                "comments": "This function shall dispatch the key generation function to the configured cryptodriver object."
            },
            "9": {
                "name": "CryIf_KeyDerive",
                "type": "Std_ReturnType_CryIf CryIf_KeyDerive (uint32 cryIfKeyId,uint32 targetCryIfKeyId)",
                "comments": "This function shall dispatch the key derive function to the configured crypto driver object."
            },
            "10": {
                "name": "CryIf_KeyExchangeCalcPubVal",
                "type": "Std_ReturnType_CryIf CryIf_KeyExchangeCalcPubVal (uint32 cryIfKeyId,uint8* publicValuePtr,uint32* publicValueLengthPtr)",
                "comments": "This function shall dispatch the key exchange public value calculation function to the configured crypto driver object."
            },
            "11": {
                "name": "CryIf_KeyExchangeCalcSecret",
                "type": "Std_ReturnType_CryIf CryIf_KeyExchangeCalcSecret (uint32 cryIfKeyId,const uint8* partnerPublicValuePtr,uint32 partnerPublicValueLength)",
                "comments": "This function shall dispatch the key exchange common shared secret calculation function to the configured crypto driver object."
            },
            "21": {
                "name": "CryIf_CustomSync",
                "type": "Std_ReturnType_CryIf CryIf_CustomSync (uint32 dispatchId,uint32 keyId,uint32 keyElementId,uint32 targetKeyId,uint32 targetKeyElementId,const uint8* inputPtr,uint32 inputLength,uint8* outputPtr,uint32* outputLengthPtr,uint8* secondaryOutputPtr,uint32* secondaryOutputLengthPtr)",
                "comments": "Requests the execution of a function that is specified by the given dispatch ID."
            },
            "13": {
                "name": "CryIf_CallbackNotification",
                "type": "void CryIf_CallbackNotification (Crypto_JobType* job,Std_ReturnType_Csm result)",
                "comments": "Notifies the CRYIF about the completion of the request with the result of the cryptographic operation."
            }
        }
    },
    "110": {
        "name": "Crypto Service Manager",
        "short_name": "Csm",
        "functions": {
            "0": {
                "name": "Csm_Init",
                "type": "void Csm_Init (const Csm_ConfigType* configPtr)",
                "comments": "Initializes the CSM module. In configurations in which Csm is assigned to more than one partition (i.e., Csm_MainFunctions are mapped to partitions), Csm may provide one init function per partition."
            },
            "59": {
                "name": "Csm_GetVersionInfo",
                "type": "void Csm_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "93": {
                "name": "Csm_Hash",
                "type": "Std_ReturnType_Csm Csm_Hash (uint32 jobId,Crypto_OperationModeType mode,const uint8* dataPtr,uint32 dataLength,uint8* resultPtr,uint32* resultLengthPtr)",
                "comments": "Uses the given data to perform the hash calculation and store the hash."
            },
            "96": {
                "name": "Csm_MacGenerate",
                "type": "Std_ReturnType_Csm Csm_MacGenerate (uint32 jobId,Crypto_OperationModeType mode,const uint8* dataPtr,uint32 dataLength,uint8* macPtr,uint32* macLengthPtr)",
                "comments": "Uses the given data to perform a MAC generation and stores the MAC in the memory location pointed to by the MAC pointer."
            },
            "97": {
                "name": "Csm_MacVerify",
                "type": "Std_ReturnType_Csm Csm_MacVerify (uint32 jobId,Crypto_OperationModeType mode,const uint8* dataPtr,uint32 dataLength,const uint8* macPtr,uint32 macLength,Crypto_VerifyResultType* verifyPtr)",
                "comments": "Verifies the given MAC by comparing whether the MAC is generated with the given data."
            },
            "94": {
                "name": "Csm_Encrypt",
                "type": "Std_ReturnType_Csm Csm_Encrypt (uint32 jobId,Crypto_OperationModeType mode,const uint8* dataPtr,uint32 dataLength,uint8* resultPtr,uint32* resultLengthPtr)",
                "comments": "Encrypts the given data and stores the ciphertext in the memory location pointed by the result pointer."
            },
            "95": {
                "name": "Csm_Decrypt",
                "type": "Std_ReturnType_Csm Csm_Decrypt (uint32 jobId,Crypto_OperationModeType mode,const uint8* dataPtr,uint32 dataLength,uint8* resultPtr,uint32* resultLengthPtr)",
                "comments": "Decrypts the given encrypted data and stores the decrypted plaintext in the memory location pointed to by the result pointer."
            },
            "98": {
                "name": "Csm_AEADEncrypt",
                "type": "Std_ReturnType_Csm Csm_AEADEncrypt (uint32 jobId,Crypto_OperationModeType mode,const uint8* plaintextPtr,uint32 plaintextLength,const uint8* associatedDataPtr,uint32 associatedDataLength,uint8* ciphertextPtr,uint32* ciphertextLengthPtr,uint8* tagPtr,uint32* tagLengthPtr)",
                "comments": "Uses the given input data to perform AEAD encryption and stores the ciphertext and the MAC in the memory locations pointed by the ciphertext pointer and tag pointer."
            },
            "99": {
                "name": "Csm_AEADDecrypt",
                "type": "Std_ReturnType_Csm Csm_AEADDecrypt (uint32 jobId,Crypto_OperationModeType mode,const uint8* ciphertextPtr,uint32 ciphertextLength,const uint8* associatedDataPtr,uint32 associatedDataLength,const uint8* tagPtr,uint32 tagLength,uint8* plaintextPtr,uint32* plaintextLengthPtr,Crypto_VerifyResultType* verifyPtr)",
                "comments": "Uses the given data to perform an AEAD encryption and stores the ciphertext and the MAC in the memory locations pointed to by the ciphertext pointer and the tag pointer."
            },
            "118": {
                "name": "Csm_SignatureGenerate",
                "type": "Std_ReturnType_Csm Csm_SignatureGenerate (uint32 jobId,Crypto_OperationModeType mode,const uint8* dataPtr,uint32 dataLength,uint8* signaturePtr,uint32* signatureLengthPtr)",
                "comments": "Uses the given data to perform the signature calculation and stores the signature in the memory location pointed by the result pointer."
            },
            "100": {
                "name": "Csm_SignatureVerify",
                "type": "Std_ReturnType_Csm Csm_SignatureVerify (uint32 jobId,Crypto_OperationModeType mode,const uint8* dataPtr,uint32 dataLength,const uint8* signaturePtr,uint32 signatureLength,Crypto_VerifyResultType* verifyPtr)",
                "comments": "Verifies the given MAC by comparing if the signature is generated with the given data."
            },
            "114": {
                "name": "Csm_RandomGenerate",
                "type": "Std_ReturnType_Csm Csm_RandomGenerate (uint32 jobId,uint8* resultPtr,uint32* resultLengthPtr)",
                "comments": "Generate a random number and store it in the memory location pointed to by the result pointer."
            },
            "120": {
                "name": "Csm_KeyElementSet",
                "type": "Std_ReturnType_Csm Csm_KeyElementSet (uint32 keyId,uint32 keyElementId,const uint8* keyElementPtr,uint32 keyElementLength)",
                "comments": "Sets the given key element bytes to the key identified by keyId."
            },
            "103": {
                "name": "Csm_KeySetValid",
                "type": "Std_ReturnType_Csm Csm_KeySetValid (uint32 keyId)",
                "comments": "Sets the key state of the key identified by keyId to **be** valid."
            },
            "133": {
                "name": "Csm_KeySetInvalid",
                "type": "Std_ReturnType_Csm Csm_KeySetInvalid (uint32 keyId)",
                "comments": "Sets the key status to invalid. The key cannot be used any longer for cryptographic operations until it has been set to a valid state again."
            },
            "131": {
                "name": "Csm_KeyGetStatus",
                "type": "Std_ReturnType_Csm Csm_KeyGetStatus (uint32 keyId,Crypto_KeyStatusType* keyStatusPtr)",
                "comments": "Returns the key state of the key identified by keyId."
            },
            "104": {
                "name": "Csm_KeyElementGet",
                "type": "Std_ReturnType_Csm Csm_KeyElementGet (uint32 keyId,uint32 keyElementId,uint8* keyElementPtr,uint32* keyElementLengthPtr)",
                "comments": "Retrieves the key element bytes from a specific key element of the key identified by the keyId and stores the key element in the memory location pointed to by the key pointer."
            },
            "113": {
                "name": "Csm_KeyElementCopy",
                "type": "Std_ReturnType_Csm Csm_KeyElementCopy (uint32 keyId,uint32 keyElementId,uint32 targetKeyId,uint32 targetKeyElementId)",
                "comments": "This function shall copy key elements from one key to a target key."
            },
            "115": {
                "name": "Csm_KeyCopy",
                "type": "Std_ReturnType_Csm Csm_KeyCopy (uint32 keyId,uint32 targetKeyId)",
                "comments": "This function shall copy all key elements from the source key to the target key."
            },
            "121": {
                "name": "Csm_KeyElementCopyPartial",
                "type": "Std_ReturnType_Csm Csm_KeyElementCopyPartial (uint32 keyId,uint32 keyElementId,uint32 keyElementSourceOffset,uint32 keyElementTargetOffset,uint32 keyElementCopyLength,uint32 targetKeyId,uint32 targetKeyElementId)",
                "comments": "Copies a key element to another key element in the same crypto driver. The keyElementSourceOffset and keyElementCopyLength allow copying just a part of the source key element into the destination. The offset into the target key is also specified with this function."
            },
            "105": {
                "name": "Csm_RandomSeed",
                "type": "Std_ReturnType_Csm Csm_RandomSeed (uint32 keyId,const uint8* seedPtr,uint32 seedLength)",
                "comments": "Feeds the key element CRYPTO_KE_RANDOM_SEED with a random seed."
            },
            "106": {
                "name": "Csm_KeyGenerate",
                "type": "Std_ReturnType Csm_KeyGenerate (uint32 keyId)",
                "comments": "Generates new key material and stores it in the key identified by keyId."
            },
            "107": {
                "name": "Csm_KeyDerive",
                "type": "Std_ReturnType_Csm Csm_KeyDerive (uint32 keyId,uint32 targetKeyId)",
                "comments": "Derives a new key by using the key elements in the given key identified by the keyId. The given key contains the key elements for the password and salt. The derived key is stored in the key element with the id 1 of the key identified by targetCryptoKeyId."
            },
            "108": {
                "name": "Csm_KeyExchangeCalcPubVal",
                "type": "Std_ReturnType_Csm Csm_KeyExchangeCalcPubVal (uint32 keyId,uint8* publicValuePtr,uint32* publicValueLengthPtr)",
                "comments": "Calculates the public value of the current user for the key exchange and stores the public key in the memory location pointed by the public value pointer."
            },
            "109": {
                "name": "Csm_KeyExchangeCalcSecret",
                "type": "Std_ReturnType Csm_KeyExchangeCalcSecret (uint32 keyId,const uint8* partnerPublicValuePtr,uint32 partnerPublicValueLength)",
                "comments": "Calculates the shared secret key for the key exchange with the key material of the key identified by the keyId and the partner public key. The shared secret key is stored as a key element in the same key."
            },
            "122": {
                "name": "Csm_JobKeySetValid",
                "type": "Std_ReturnType_Csm Csm_JobKeySetValid (uint32 jobId)",
                "comments": "Stores the key if necessary and sets the key state of the key identified by keyId to valid."
            },
            "132": {
                "name": "Csm_JobKeySetInvalid",
                "type": "Std_ReturnType_Csm Csm_JobKeySetInvalid (uint32 jobId)",
                "comments": "Sets the key status to invalid. The key cannot be used any longer for cryptographic operations until it has been set to a valid state again."
            },
            "123": {
                "name": "Csm_JobRandomSeed",
                "type": "Std_ReturnType Csm_JobRandomSeed (uint32 jobId,const uint8* seedPtr,uint32 seedLength)",
                "comments": "Provides a new seed for the specified key that is used for an associated random number generator."
            },
            "124": {
                "name": "Csm_JobKeyGenerate",
                "type": "Std_ReturnType Csm_JobKeyGenerate (uint32 jobId)",
                "comments": "Generates new key material and stores it in the key identified by keyId."
            },
            "125": {
                "name": "Csm_JobKeyDerive",
                "type": "Std_ReturnType_Csm Csm_JobKeyDerive (uint32 jobId,uint32 targetKeyId)",
                "comments": "Derives a new key by using the key elements in the given key identified by the keyId. The given key contains the key elements for the password and salt. The derived key is stored in the key element with the id 1 of the key identified by targetCryptoKeyId."
            },
            "126": {
                "name": "Csm_JobKeyExchangeCalcPubVal",
                "type": "Std_ReturnType_Csm Csm_JobKeyExchangeCalcPubVal (uint32 jobId,uint8* publicValuePtr,uint32* publicValueLengthPtr)",
                "comments": "Calculates the public value of the current user for the key exchange and stores the public key in the memory location pointed by the public value pointer."
            },
            "127": {
                "name": "Csm_JobKeyExchangeCalcSecret",
                "type": "Std_ReturnType_Csm Csm_JobKeyExchangeCalcSecret (uint32 jobId,const uint8* partnerPublicValuePtr,uint32 partnerPublicValueLength)",
                "comments": "Calculates the shared secret key for the key exchange with the key material of the key identified by the keyId and the partner public key. The shared secret key is stored as a key element in the same key."
            },
            "134": {
                "name": "Csm_SaveContextJob",
                "type": "Std_ReturnType Csm_SaveContextJob (uint32 jobId,uint8* contextBufferPtr,uint32* contextBufferLengthPtr)",
                "comments": "The Crypto Driver stores the internal context of the respective crypto operation to the contextBuffer."
            },
            "135": {
                "name": "Csm_RestoreContextJob",
                "type": "Std_ReturnType_Csm Csm_RestoreContextJob (uint32 jobId,const uint8* contextBufferPtr,uint32 contextBufferLength)",
                "comments": "The Crypto Driver extracts the context data from the context buffer and restores the internal state so that further crypto operations of this crypto service will continue at the exact point when the context was taken."
            },
            "111": {
                "name": "Csm_CancelJob",
                "type": "Std_ReturnType_Csm Csm_CancelJob (uint32 job,Crypto_OperationModeType mode)",
                "comments": "Cancels the job processing for asynchronous or streaming jobs."
            },
            "19": {
                "name": "Csm_CustomService",
                "type": "Std_ReturnType_Csm Csm_CustomService (uint32 jobId,Crypto_OperationModeType mode,uint32 targetKeyId,const uint8* inputPtr,uint32 inputLength,const uint8* secondaryInputPtr,uint32 secondaryInputLength,const uint8* tertiaryInputPtr,uint32 tertiaryInputLength,uint8* outputPtr,uint32* outputLengthPtr,uint8* secondaryOutputPtr,uint32* secondaryOutputLengthPtr,Crypto_VerifyResultType* verifyPtr)",
                "comments": "Dispatches security-related jobs for custom execution in a secure environment."
            },
            "136": {
                "name": "Csm_CustomSync",
                "type": "Std_ReturnType_Csm Csm_CustomSync (uint32 dispatchId,uint32 keyId,uint32 keyElementId,uint32 targetKeyId,uint32 targetKeyElementId,const uint8* inputPtr,uint32 inputLength,uint8* outputPtr,uint32* outputLengthPtr,uint8* secondaryOutputPtr,uint32* secondaryOutputLengthPtr)",
                "comments": "Requests the execution of a function that is specified by the given dispatch ID."
            },
            "112": {
                "name": "Csm_CallbackNotification",
                "type": "void Csm_CallbackNotification (Crypto_JobType* job,Std_ReturnType_Csm result)",
                "comments": "Notifies the CSM that a job has finished. This function is used by the underlying layer (CRYIF)."
            },
            "1": {
                "name": "Csm_MainFunction",
                "type": "void Csm_MainFunction (void)",
                "comments": "API to be called cyclically to process the requested jobs. The Csm_MainFunction shall check the queues for jobs to pass to the underlying CRYIF. Per configured CsmMainFunction instance, one Csm_MainFunction_<shortName> shall be implemented. Hereby, <shortName> is the short name of the CsmMainFunction configuration container in the ECU configuration."
            }
        }
    },
    "47": {
        "name": "Data DistributionService",
        "short_name": "Dds",
        "functions": {
            "0": {
                "name": "Dds_Init",
                "type": "void Dds_Init (const Dds_ConfigType* Dds_ConfigPtr)",
                "comments": "This service initializes interfaces and variables of the AUTOSAR DSD layer. Tags: atp. Status = draft"
            },
            "1": {
                "name": "Dds_GetVersionInfo",
                "type": "void Dds_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module. Tags: atp. Status = draft"
            },
            "2": {
                "name": "Dds_Transmit",
                "type": "Std_ReturnType Dds_Transmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Request for transmitting a message. Tags: atp. Status = draft"
            },
            "66": {
                "name": "Dds_RxIndication",
                "type": "void Dds_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from the PDU Router interface module. Tags: atp. Status = draft"
            },
            "64": {
                "name": "Dds_TxConfirmation",
                "type": "void Dds_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The PDU Router interface module confirms the transmission of a PDU, or the failure to transmit a PDU. Tags: atp. Status = draft"
            },
            "65": {
                "name": "Dds_TriggerTransmit",
                "type": "Std_ReturnType Dds_TriggerTransmit (PduIdType TxPduId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr. Tags: atp. Status = draft"
            },
            "16": {
                "name": "Dds_MainFunction_Rx",
                "type": "void Dds_MainFunction_Rx (void)",
                "comments": "Scheduled function of the Ds module for reception purpose Tags: atp. Status = draft"
            },
            "17": {
                "name": "Dds_MainFunction_Tx",
                "type": "void Dds_MainFunction_Tx (void)",
                "comments": "Scheduled function of the Dds module for transmission purpose Tags: atp. Status = draft"
            }
        }
    },
    "15": {
        "name": "Default Error Tracer",
        "short_name": "Det",
        "functions": {
            "0": {
                "name": "Det_Init",
                "type": "void Det_Init (const Det_ConfigType* ConfigPtr)",
                "comments": "Service to initialize the Default Error Tracer."
            },
            "1": {
                "name": "Det_ReportError",
                "type": "Std_ReturnType Det_ReportError (uint16 ModuleId,uint8 InstanceId,uint8 ApiId,uint8 ErrorId)",
                "comments": "Service to report development errors."
            },
            "2": {
                "name": "Det_Start",
                "type": "void Det_Start (void)",
                "comments": "Service to start the Default Error Tracer."
            },
            "4": {
                "name": "Det_ReportRuntimeError",
                "type": "Std_ReturnType Det_ReportRuntimeError (uint16 ModuleId,uint8 InstanceId,uint8 ApiId,uint8 ErrorId)",
                "comments": "Service to report runtime errors. If a call out has been configured then this call out shall be called."
            },
            "5": {
                "name": "Det_ReportTransientFault",
                "type": "Std_ReturnType Det_ReportTransientFault (uint16 ModuleId,uint8 InstanceId,uint8 ApiId,uint8 FaultId)",
                "comments": "Service to report transient faults. If a callout has been configured, then this callout shall be called and the returned value of the callout shall be returned. Otherwise, it returns immediately with E_OK."
            },
            "3": {
                "name": "Det_GetVersionInfo",
                "type": "void Det_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "16": {
                "name": "User_Error_Hooks",
                "type": "Std_ReturnType User_Error_Hooks (uint16 ModuleId,uint8 InstanceId,uint8 ApiId,uint8 ErrorId)",
                "comments": "It seems that your request is incomplete as there is no specific text provided to fix. Please provide the text you want to be corrected, and I'll be happy to assist you!"
            },
            "17": {
                "name": "DetReportRuntimeErrorCallout",
                "type": "Std_ReturnType DetReportRuntimeErrorCallout (uint16 ModuleId,uint8 InstanceId,uint8 ApiId,uint8 ErrorId)",
                "comments": "It seems like there isn't any text provided to fix. Please provide the text that needs editing, and I'll be happy to assist!"
            },
            "18": {
                "name": "DetReportTransientFaultCallout",
                "type": "Std_ReturnType DetReportTransientFaultCallout (uint16 ModuleId,uint8 InstanceId,uint8 ApiId,uint8 FaultId)",
                "comments": "I'm sorry, but it seems like there is no text provided for me to fix. Could you please share the text you would like me to correct?"
            }
        }
    },
    "53": {
        "name": "Diagnostic CommunicationManager",
        "short_name": "Dcm",
        "functions": {
            "1": {
                "name": "Dcm_Init",
                "type": "void Dcm_Init (const Dcm_ConfigType* ConfigPtr)",
                "comments": "Service for basic initialization of DCM module."
            },
            "36": {
                "name": "Dcm_GetVersionInfo",
                "type": "void Dcm_GetVersionInfo (Std_VersionInfoType* versionInfo)",
                "comments": "Returns the version information of this module."
            },
            "43": {
                "name": "Dcm_DemTriggerOnDTCStatus",
                "type": "Std_ReturnType Dcm_DemTriggerOnDTCStatus (uint32 DTC,Dem_UdsStatusByteType DTCStatusOld,Dem_UdsStatusByteType DTCStatusNew)",
                "comments": "Triggers on changes of the UDS status byte. Allows to trigger on ROE event for subservice on DTC status changed."
            },
            "7": {
                "name": "Dcm_GetVin",
                "type": "Std_ReturnType Dcm_GetVin (uint8* Data)",
                "comments": "Function to get the VIN (as defined in SAE J1979-DA)"
            },
            "122": {
                "name": "Dcm_BndMWriteBlockFinish",
                "type": "void Dcm_BndMWriteBlockFinish (BndM_BlockIdType BlockId,BndM_ResultType result)",
                "comments": "Called by BndM to indicate that a block write operation has finished."
            },
            "121": {
                "name": "Xxx_ShortTermAdjustment",
                "type": "Std_ReturnType Xxx_ShortTermAdjustment (const uint8* ControlStateInfo,uint16 DataLength,uint8* controlMask,uint8 controlMaskLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to adjust the IO signal. Tags: atp. Status = draft"
            },
            "13": {
                "name": "Dcm_GetSecurityLevel",
                "type": "Std_ReturnType Dcm_GetSecurityLevel (Dcm_SecLevelType* SecLevel)",
                "comments": "This function provides the active security level value."
            },
            "6": {
                "name": "Dcm_GetSesCtrlType",
                "type": "Std_ReturnType Dcm_GetSesCtrlType (Dcm_SesCtrlType* SesCtrlType)",
                "comments": "This function provides the active session control type value."
            },
            "42": {
                "name": "Dcm_ResetToDefaultSession",
                "type": "Std_ReturnType Dcm_ResetToDefaultSession (void)",
                "comments": "The call to this function allows the application to reset the current session to Default session. Example: Automatic termination of an extended diagnostic session upon exceeding of a speed limit."
            },
            "86": {
                "name": "Dcm_SetActiveDiagnostic",
                "type": "Std_ReturnType Dcm_SetActiveDiagnostic (boolean active)",
                "comments": "Allows to activate and deactivate the call of ComM_DCM_ActiveDiagnostic() function."
            },
            "70": {
                "name": "Dcm_StartOfReception",
                "type": "BufReq_ReturnType Dcm_StartOfReception (PduIdType id,const PduInfoType* info,PduLengthType TpSduLength,PduLengthType* bufferSizePtr)",
                "comments": "This function is called at the start of receiving an N-SDU. The N-SDU might be fragmented into multiple N-PDUs (FF with one or more following CFs) or might consist of a single N-PDU (SF). If the service is successful and BUFREQ_OK is returned, the service provides the currently available maximum buffer size. This function might be called in interrupt context."
            },
            "68": {
                "name": "Xxx_GetSeed",
                "type": "Std_ReturnType Xxx_GetSeed (const uint8* SecurityAccessDataRecord,Dcm_OpStatusType OpStatus,uint8* Seed,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "Request to application for asynchronous provision of seed value"
            },
            "69": {
                "name": "Xxx_GetSeed",
                "type": "Std_ReturnType Xxx_GetSeed (Dcm_OpStatusType OpStatus,uint8* Seed,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "Request to application for asynchronous provision of seed value"
            },
            "67": {
                "name": "Dcm_CopyTxData",
                "type": "BufReq_ReturnType Dcm_CopyTxData (PduIdType id,const PduInfoType* info,const RetryInfoType* retry,PduLengthType* availableDataPtr)",
                "comments": "This function is called to acquire the transmit data of an I-PDU segment (N-PDU). Each call to this function provides the next part of the I-PDU data unless retry->TpDataState is TP_DATA_RETRY. In this case, the function restarts to copy the data beginning at the offset from the current position indicated by retry->TxTpDataCnt. The size of the remaining data is written to the position indicated by availableDataPtr. This function might be called in interrupt context."
            },
            "72": {
                "name": "Dcm_TpTxConfirmation",
                "type": "void Dcm_TpTxConfirmation (PduIdType id,Std_ReturnType result)",
                "comments": "This function is called after the I-PDU has been transmitted on its network, the result indicates whether the transmission was successful or not. This function might be called in interrupt context."
            },
            "64": {
                "name": "Xxx_ReadDidData",
                "type": "Std_ReturnType Xxx_ReadDidData (uint16 DID,uint8* Data,Dcm_OpStatusType OpStatus,uint16 DataLength,Dcm_NegativeResponseCodeType ErrorCode)",
                "comments": "This function requests to the application a data value of a DID."
            },
            "33": {
                "name": "Dcm_ComM_NoComModeEntered",
                "type": "void Dcm_ComM_NoComModeEntered (uint8 NetworkId)",
                "comments": "This call informs the DCM module about a ComM mode change to COMM_NO_COMMUNICATION."
            },
            "34": {
                "name": "Dcm_ComM_SilentComModeEntered",
                "type": "void Dcm_ComM_SilentComModeEntered (uint8 NetworkId)",
                "comments": "This call informs the Dcm module about a ComM mode change to COMM_SILENT_COMMUNICATION."
            },
            "35": {
                "name": "Dcm_ComM_FullComModeEntered",
                "type": "void Dcm_ComM_FullComModeEntered (uint8 NetworkId)",
                "comments": "This call informs the Dcm module about a ComM mode change to COMM_FULL_COMMUNICATION."
            },
            "38": {
                "name": "Dcm_ProcessTransferDataRead",
                "type": "Dcm_ReturnReadMemoryType Dcm_ProcessTransferDataRead (Dcm_OpStatusType OpStatus,uint8 MemoryIdentifier,uint32 MemoryAddress,uint32 MemorySize,Dcm_RequestDataArrayType MemoryData,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "The Process Transfer Data Read callout is used to request memory data identified by the parameter memoryAddress and memorySize from the UDS request message. This service is needed for the implementation of UDS services: \u2022 Read Memory By Address \u2022 Request Upload \u2022 Read Data By Identifier (in case of Dynamical DID defined by memory address) \u2022 Transfer Data"
            },
            "39": {
                "name": "Dcm_ProcessTransferDataWrite",
                "type": "Dcm_ReturnWriteMemoryType Dcm_ProcessTransferDataWrite (Dcm_OpStatusType OpStatus,uint8 MemoryIdentifier,uint32 MemoryAddress,uint32 MemorySize,const Dcm_RequestDataArrayType MemoryData,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "The Process Transfer Data Write callout is used to write memory data identified by the parameter memoryAddress and memorySize. This service is needed for the implementation of UDS services: \u2022 Write Memory By Address \u2022 Request Download \u2022 Transfer Data"
            },
            "97": {
                "name": "Dcm_SetProgConditions",
                "type": "Std_ReturnType Dcm_SetProgConditions (Dcm_OpStatusType OpStatus,const Dcm_ProgConditionsType* ProgConditions)",
                "comments": "The Dcm_SetProgConditions callout allows the integrator to store relevant information prior to jumping to bootloader/jump due to ECU Reset request. The context parameters are defined in Dcm_ProgConditionsType."
            },
            "98": {
                "name": "Dcm_GetProgConditions",
                "type": "Dcm_EcuStartModeType Dcm_GetProgConditions (Dcm_ProgConditionsType * ProgConditions)",
                "comments": "The Dcm_GetProgConditions callout is called upon Dcm initialization and allows to determine if a response ($50 or $51) has to be sent. The context parameters are defined in Dcm_ProgConditionsType."
            },
            "114": {
                "name": "Xxx_GetScalingInformation",
                "type": "Std_ReturnType Xxx_GetScalingInformation (uint8* ScalingInfo,uint8 ScalingInfoLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application for the scaling information of a Data. Tags: atp. Status = draft"
            },
            "115": {
                "name": "Xxx_GetScalingInformation",
                "type": "Std_ReturnType Xxx_GetScalingInformation (Dcm_OpStatusType OpStatus,uint8* ScalingInfo,uint8 ScalingInfoLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application for the scaling information of a Data. Tags: atp. Status = draft"
            },
            "116": {
                "name": "Xxx_ReturnControlToECU",
                "type": "Std_ReturnType Xxx_ReturnControlToECU (uint8* controlMask,uint8 controlMaskLength,Dcm_NegativeResponseCodeType ErrorCode)",
                "comments": "This function requests to the application to return control to ECU of an IO Control. Tags: atp. Status = draft"
            },
            "117": {
                "name": "Xxx_ResetToDefault",
                "type": "Std_ReturnType Xxx_ResetToDefault (uint8* controlMask,uint8 controlMaskLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to reset an IO Control to default value. Tags: atp. Status = draft"
            },
            "118": {
                "name": "Xxx_ResetToDefault",
                "type": "Std_ReturnType Xxx_ResetToDefault (Dcm_OpStatusType OpStatus,uint8* controlMask,uint8 controlMaskLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to reset an IO Control to default value. Tags: atp. Status = draft."
            },
            "120": {
                "name": "Xxx_FreezeCurrentState",
                "type": "Std_ReturnType Xxx_FreezeCurrentState (Dcm_OpStatusType OpStatus,uint8* controlMask,uint8 controlMaskLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to freeze the current state of an IO Control. Tags: atp. Status = draft"
            },
            "48": {
                "name": "Dcm_ProcessRequestDownload",
                "type": "Std_ReturnType Dcm_ProcessRequestDownload (Dcm_OpStatusType OpStatus,uint8 DataFormatIdentifier,uint8 MemoryIdentifier,uint32 MemoryAddress,uint32 MemorySize,uint32* BlockLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "Callout function. DCM shall call this callout function to start a download process. This service is needed for the implementation of UDS service Request Download."
            },
            "50": {
                "name": "Module_DiagnosticService",
                "type": "Std_ReturnType Module_DiagnosticService (Dcm_ExtendedOpStatusType OpStatus,Dcm_MsgContextType* pMsgContext,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "Callout function. The Dcm shall call this callout function as soon as a valid message is received on relevant DcmDslProtocolRxPduId on SID level. The use case of multiple diagnostic protocols will be possible by using different arguments, and the function shall be programmed in a way that it is reentrant. Caller is responsible for the lifetime of the argument pMsgContext. The name of the callout is defined within parameter DcmDsdSidTabFnc."
            },
            "49": {
                "name": "Dcm_ProcessRequestUpload",
                "type": "Std_ReturnType Dcm_ProcessRequestUpload (Dcm_OpStatusType OpStatus,uint8 DataFormatIdentifier,uint8 MemoryIdentifier,uint32 MemoryAddress,uint32 MemorySize,uint32* BlockLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "Callout function. DCM shall call this callout function to start an upload process. This service is needed for the implementation of UDS service Request Upload."
            },
            "37": {
                "name": "Dcm_MainFunction",
                "type": "void Dcm_MainFunction (void)",
                "comments": "This service is used for processing the tasks of the main loop."
            },
            "71": {
                "name": "Xxx_CompareKey",
                "type": "Std_ReturnType Xxx_CompareKey (const uint8* Key,Dcm_OpStatusType OpStatus,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "Request to application for asynchronous comparing key (DcmDspSecurityUsePort = USE_ASYNCH_CLIENT_SERVER)"
            },
            "89": {
                "name": "Xxx_GetSecurityAttemptCounter",
                "type": "Std_ReturnType Xxx_GetSecurityAttemptCounter (Dcm_OpStatusType OpStatus,uint8* AttemptCounter)",
                "comments": "Read the attempt counter for a specific security level from the application."
            },
            "90": {
                "name": "Xxx_SetSecurityAttemptCounter",
                "type": "Std_ReturnType Xxx_SetSecurityAttemptCounter (Dcm_OpStatusType OpStatus,uint8 AttemptCounter)",
                "comments": "Set the attempt counter for a specific security level in the application."
            },
            "52": {
                "name": "Xxx_ReadData",
                "type": "Std_ReturnType Xxx_ReadData (uint8* Data)",
                "comments": "This function requests to the application a data value of a DID/PID if DcmDspDataUsePort is set to USE_DATA_SYNCH_CLIENT_SERVER."
            },
            "59": {
                "name": "Xxx_ReadData",
                "type": "Std_ReturnType Xxx_ReadData (Dcm_OpStatusType OpStatus,uint8* Data)",
                "comments": "This function requests to the application a data value of a DID/PID if DcmDspDataUsePort is set to USE_DATA_ASYNCH_CLIENT_SERVER."
            },
            "88": {
                "name": "Xxx_ReadData",
                "type": "Std_ReturnType Xxx_ReadData (Dcm_OpStatusType OpStatus,uint8* Data,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application a data value of a DID/PID if DcmDspDataUsePort is set to USE_DATA_ASYNCH_CLIENT_SERVER."
            },
            "104": {
                "name": "Xxx_ReadData",
                "type": "Std_ReturnType Xxx_ReadData (uint8* Data,uint16 DataLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application a data value of a DID/PID if DcmDspDataUsePort is set to USE_DATA_SYNCH_FNC_PROXY. Tags: atp. Status = draft"
            },
            "105": {
                "name": "Xxx_StopConfirmation",
                "type": "Std_ReturnType Xxx_StopConfirmation (Dcm_ConfirmationStatusType ConfirmationStatus)",
                "comments": "This function indicates the transmission of a response to a Stop Routine request."
            },
            "81": {
                "name": "Xxx_WriteData",
                "type": "Std_ReturnType Xxx_WriteData (const uint8* Data,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests the application to write a data value of a DID."
            },
            "82": {
                "name": "Xxx_WriteData",
                "type": "Std_ReturnType Xxx_WriteData (const uint8* Data,uint16 DataLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests the application to write a data value of a DID."
            },
            "53": {
                "name": "Xxx_WriteData",
                "type": "Std_ReturnType Xxx_WriteData (const uint8* Data,Dcm_OpStatusType OpStatus,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests the application to write a data value of a DID."
            },
            "62": {
                "name": "Xxx_WriteData",
                "type": "Std_ReturnType Xxx_WriteData (const uint8* Data,uint16 DataLength,Dcm_OpStatusType OpStatus,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests the application to write a data value of a DID."
            },
            "112": {
                "name": "Xxx_RequestResultsConfirmation",
                "type": "Std_ReturnType Xxx_RequestResultsConfirmation (Dcm_ConfirmationStatusType ConfirmationStatus)",
                "comments": "This function indicates the transmission of a response to a Request Routine Results request."
            },
            "113": {
                "name": "Xxx_RequestResults",
                "type": "Std_ReturnType Xxx_RequestResults (Dcm_OpStatusType OpStatus,DcmDspRoutineSignalType* dataIn_1, ___DcmDspRoutineSignalType* dataIn_n,const uint8* dataInVar,DcmDspRoutineSignalType* dataOut_1, ___DcmDspRoutineSignalType* dataOut_n,uint8* dataOutVar,uint16* variableDataLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application the result of a routine execution."
            },
            "54": {
                "name": "Xxx_ReadDataLength",
                "type": "Std_ReturnType Xxx_ReadDataLength (uint16* DataLength)",
                "comments": "This function requests the application to return the data length in byte of a Data. Tags: atp. Status = draft"
            },
            "76": {
                "name": "Xxx_ReadDataLength",
                "type": "Std_ReturnType Xxx_ReadDataLength (Dcm_OpStatusType OpStatus,uint16* DataLength)",
                "comments": "This function requests the application to return the data length in byte of a Data. Tags: atp. Status = draft."
            },
            "73": {
                "name": "Xxx_ConditionCheckRead",
                "type": "Std_ReturnType Xxx_ConditionCheckRead (Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application if the conditions to read the Data are correct."
            },
            "55": {
                "name": "Xxx_ConditionCheckRead",
                "type": "Std_ReturnType Xxx_ConditionCheckRead (Dcm_OpStatusType OpStatus,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application if the conditions to read the Data are correct."
            },
            "75": {
                "name": "Xxx_GetScalingInformation",
                "type": "Std_ReturnType Xxx_GetScalingInformation (uint8* ScalingInfo,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application for the scaling information of a Data."
            },
            "56": {
                "name": "Xxx_GetScalingInformation",
                "type": "Std_ReturnType Xxx_GetScalingInformation (Dcm_OpStatusType OpStatus,uint8* ScalingInfo,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application for the scaling information of a Data."
            },
            "79": {
                "name": "Xxx_ReturnControlToECU",
                "type": "Std_ReturnType Xxx_ReturnControlToECU (Dcm_ControlMask__DIDType controlMask,uint8* controlMask,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to return control to ECU of an IO Control."
            },
            "77": {
                "name": "Xxx_ResetToDefault",
                "type": "Std_ReturnType Xxx_ResetToDefault (Dcm_ControlMask__DIDType controlMask,uint8* controlMask,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to reset an IO Control to default value."
            },
            "60": {
                "name": "Xxx_ResetToDefault",
                "type": "Std_ReturnType Xxx_ResetToDefault (Dcm_OpStatusType OpStatus,Dcm_ControlMask__DIDType controlMask,uint8* controlMask,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to reset an IO Control to default value."
            },
            "74": {
                "name": "Xxx_FreezeCurrentState",
                "type": "Std_ReturnType Xxx_FreezeCurrentState (Dcm_ControlMask__DIDType controlMask,uint8* controlMask,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to freeze the current state of an IO Control."
            },
            "119": {
                "name": "Xxx_FreezeCurrentState",
                "type": "Std_ReturnType Xxx_FreezeCurrentState (uint8* controlMask,uint8 controlMaskLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests the application to freeze the current state of an IO Control. Tags: atp. Status = draft"
            },
            "132": {
                "name": "Xxx_FreezeCurrentState",
                "type": "Std_ReturnType Xxx_FreezeCurrentState (Dcm_OpStatusType OpStatus,Dcm_ControlMask__DIDType controlMask,uint8* controlMask,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to freeze the current state of an IO Control."
            },
            "80": {
                "name": "Xxx_ShortTermAdjustment",
                "type": "Std_ReturnType Xxx_ShortTermAdjustment (const uint8* ControlStateInfo,uint16 DataLength,Dcm_ControlMask__DIDType controlMask,uint8* controlMask,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to adjust the IO signal."
            },
            "85": {
                "name": "Xxx_ShortTermAdjustment",
                "type": "Std_ReturnType Xxx_ShortTermAdjustment (const uint8* ControlStateInfo,uint16 DataLength,Dcm_OpStatusType OpStatus,Dcm_ControlMask__DIDType controlMask,uint8* controlMask,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to adjust the IO signal."
            },
            "131": {
                "name": "Xxx_ShortTermAdjustment",
                "type": "Std_ReturnType Xxx_ShortTermAdjustment (const uint8* ControlStateInfo,uint16 DataLength,Dcm_OpStatusType OpStatus,uint8* controlMask,uint8 controlMaskLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to adjust the IO signal. Tags: atp. Status = draft"
            },
            "83": {
                "name": "Xxx_IsDidAvailable",
                "type": "Std_ReturnType Xxx_IsDidAvailable (uint16 DID,Dcm_OpStatusType OpStatus,Dcm_DidSupportedType* supported)",
                "comments": "This function requests if a specific DID is available within the range or not."
            },
            "65": {
                "name": "Xxx_WriteDidData",
                "type": "Std_ReturnType Xxx_WriteDidData (uint16 DID,const uint8* Data,Dcm_OpStatusType OpStatus,uint16 DataLength,Dcm_NegativeResponseCodeType ErrorCode)",
                "comments": "This function requests the application to write a data value of a DID."
            },
            "94": {
                "name": "Xxx_ReadDidRangeDataLength",
                "type": "Std_ReturnType Xxx_ReadDidRangeDataLength (uint16 DID,Dcm_OpStatusType OpStatus,uint16* DataLength)",
                "comments": "This function requests the application to return the data length of a DID Range."
            },
            "96": {
                "name": "Xxx_GetInfotypeValueData",
                "type": "Std_ReturnType Xxx_GetInfotypeValueData (Dcm_OpStatusType OpStatus,uint8* DataValueBuffer,uint8* DataValueBufferSize)",
                "comments": "The function provides the data related to the requested Info type."
            },
            "91": {
                "name": "Xxx_Start",
                "type": "Std_ReturnType Xxx_Start (DcmDspRoutineSignalType dataIn_1, ___DcmDspRoutineSignalType dataIn_n,const uint8* dataInVar,Dcm_OpStatusType OpStatus,DcmDspRoutineSignalType dataOut_1, ___DcmDspRoutineSignalType dataOut_n,uint8* dataOutVar,uint16* currentDataLength,Dcm_NegativeResponseCodeType ErrorCode)",
                "comments": "This function requests to the application to start the execution of a routine."
            },
            "128": {
                "name": "Xxx_Start",
                "type": "Std_ReturnType Xxx_Start (Dcm_OpStatusType OpStatus,uint8* dataInOut,uint16* currentDataLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to start the execution of a routine. Tags: atp. Status = draft"
            },
            "92": {
                "name": "Xxx_Stop",
                "type": "Std_ReturnType Xxx_Stop (DcmDspRoutineSignalType dataIn_1, ___DcmDspRoutineSignalType dataIn_n,const uint8* dataInVar,DcmDspRoutineSignalType dataOut_1, ___DcmDspRoutineSignalType dataOut_n,uint8* dataOutVar,uint16* currentDataLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to stop the execution of a routine."
            },
            "129": {
                "name": "Xxx_Stop",
                "type": "Std_ReturnType Xxx_Stop (Dcm_OpStatusType OpStatus,uint8* dataInOut,uint16* currentDataLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests the application to stop the execution of a routine. Tags: atp.Status = draft"
            },
            "130": {
                "name": "Xxx_RequestResults",
                "type": "Std_ReturnType Xxx_RequestResults (Dcm_OpStatusType OpStatus,uint8* dataInOut,uint16* currentDataLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application the result of a routine execution. Tags: atp.Status = draft"
            },
            "99": {
                "name": "Xxx_RequestControl",
                "type": "Std_ReturnType Xxx_RequestControl (uint8* OutBuffer,const uint8* InBuffer)",
                "comments": "Invokes a TID-specific function taking a configured number of bytes as input and returning a fixed number of bytes as output. This is typically used to implement OBD Service $08."
            },
            "103": {
                "name": "Xxx_StartProtocol",
                "type": "Std_ReturnType Xxx_StartProtocol (Dcm_ProtocolType ProtocolType,uint16 TesterSourceAddress,uint16 ConnectionId)",
                "comments": "This function allows the application to examine the environment conditions and enable/disable further processing of the protocol."
            },
            "100": {
                "name": "Xxx_StopProtocol",
                "type": "Std_ReturnType Xxx_StopProtocol (Dcm_ProtocolType ProtocolType,uint16 TesterSourceAddress,uint16 ConnectionId)",
                "comments": "This function informs the application of the protocols to stop."
            },
            "101": {
                "name": "Xxx_Indication",
                "type": "Std_ReturnType Xxx_Indication (uint8 SID,const uint8* RequestData,uint32 DataSize,uint8 ReqType,uint16 ConnectionId,Dcm_NegativeResponseCodeType* ErrorCode,Dcm_ProtocolType ProtocolType,uint16 TesterSourceAddress)",
                "comments": "This function indicates to the application that a service is about to be executed and allows the application to reject the execution of the service request."
            },
            "102": {
                "name": "Xxx_Confirmation",
                "type": "Std_ReturnType Xxx_Confirmation (uint8 SID,uint8 ReqType,uint16 ConnectionId,Dcm_ConfirmationStatusType ConfirmationStatus,Dcm_ProtocolType ProtocolType,uint16 TesterSourceAddress)",
                "comments": "This function confirms to the application the successful transmission or a transmission error of a diagnostic service."
            },
            "95": {
                "name": "Xxx_ClearDTCCheckFnc",
                "type": "Std_ReturnType Xxx_ClearDTCCheckFnc (uint32 GoDTC,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "Call out function for condition check, manufacturer/supplier specific checks on the group of DTC, which is requested to clear."
            },
            "51": {
                "name": "Module_DiagnosticService_SubService",
                "type": "Std_ReturnType Module_DiagnosticService_SubService (Dcm_ExtendedOpStatusType OpStatus,Dcm_MsgContextType* pMsgContext,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "Call out function. If a Dcm Dsd Sub Service Fnc is configured for the received subservice, the Dcm shall call this callout function as soon as this subservice is requested. The use case of multiple diagnostic protocols will be possible by using different arguments and the function shall be programmed in a way that it is reentrant. Caller is responsible for the lifetime of the argument pMsgContext. The name of the callout is defined within parameter DcmDsdSubServiceFnc."
            }
        }
    },
    "54": {
        "name": "Diagnostic Event Manager",
        "short_name": "Dem",
        "functions": {
            "0": {
                "name": "Dem_GetVersionInfo",
                "type": "void Dem_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemVersionInfoApi)} == true)"
            },
            "1": {
                "name": "Dem_PreInit",
                "type": "void Dem_PreInit (void)",
                "comments": "Initializes the internal states necessary to process events reported by BSW-modules."
            },
            "2": {
                "name": "Dem_Init",
                "type": "void Dem_Init (const Dem_ConfigType* ConfigPtr)",
                "comments": "Initializes or reinitializes this module."
            },
            "3": {
                "name": "Dem_Shutdown",
                "type": "void Dem_Shutdown (void)",
                "comments": "Shut down this module."
            },
            "35": {
                "name": "Dem_ClearDTC",
                "type": "Std_ReturnType Dem_ClearDTC (uint8 ClientId)",
                "comments": "Clear single DTCs, as well as groups of DTCs."
            },
            "7": {
                "name": "Dem_ClearPrestoredFreezeFrame",
                "type": "Std_ReturnType Dem_ClearPrestoredFreezeFrame (Dem_EventIdType EventId)",
                "comments": "Clears a pre-stored freeze frame of a specific event. This API can only be used through the RTE and therefore no declaration is exported via Dem.h. API Availability: This API will be available only if ({ecuc(Dem/DemConfigSet/DemEventParameter.DemFFPrestorageSupported)} == true)"
            },
            "42": {
                "name": "Dem_GetComponentFailed",
                "type": "Std_ReturnType Dem_GetComponentFailed (Dem_ComponentIdType ComponentId,boolean* ComponentFailed)",
                "comments": "Get the failed status of a Dem Component."
            },
            "184": {
                "name": "Dem_GetDTCSelectionResult",
                "type": "Std_ReturnType Dem_GetDTCSelectionResult (uint8 ClientId)",
                "comments": "Provides information if the last call to Dem_SelectDTChas selected a valid DTC or group of DTCs."
            },
            "187": {
                "name": "Dem_GetDTCSelectionResultForClearDTC",
                "type": "Std_ReturnType Dem_GetDTCSelectionResultForClearDTC (uint8 ClientId)",
                "comments": "Provides information if the last call to Dem_SelectDTChas selected a valid DTC or group of DTCs, respecting the settings if the Dem shall clear only all DTCs."
            },
            "182": {
                "name": "Dem_GetEventUdsStatus",
                "type": "Std_ReturnType Dem_GetEventUdsStatus (Dem_EventIdType EventId,Dem_UdsStatusByteType* UDSStatusByte)",
                "comments": "Gets the current UDS status byte assigned to the DTC for the event."
            },
            "181": {
                "name": "Dem_GetMonitorStatus",
                "type": "Std_ReturnType Dem_GetMonitorStatus (Dem_EventIdType EventID,Dem_MonitorStatusType* MonitorStatus)",
                "comments": "Gets the current monitor status for an event."
            },
            "159": {
                "name": "Dem_GetDebouncingOfEvent",
                "type": "Std_ReturnType Dem_GetDebouncingOfEvent (Dem_EventIdType EventId,Dem_DebouncingStateType* DebouncingState)",
                "comments": "Gets the debouncing status of an event. This function shall not be used for Event Id with native debouncing within their functions. It is rather for Event Ids using debouncing within the Dem."
            },
            "13": {
                "name": "Dem_GetDTCOfEvent",
                "type": "Std_ReturnType Dem_GetDTCOfEvent (Dem_EventIdType EventId,Dem_DTCFormatType DTCFormat,uint32* DTCOfEvent)",
                "comments": "Gets the DTC of an event."
            },
            "188": {
                "name": "Dem_GetDTCSuppression",
                "type": "Std_ReturnType Dem_GetDTCSuppression (uint8 ClientId,boolean* SuppressionStatus)",
                "comments": "Returns the suppression status of a specific DTC. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemSuppressionSupport)} == DEM_DTC_SUPPRESSION)"
            },
            "190": {
                "name": "Dem_GetEventAvailable",
                "type": "Std_ReturnType Dem_GetEventAvailable (Dem_EventIdType EventId,boolean* AvailableStatus)",
                "comments": "Get the Event\u2019s availability."
            },
            "62": {
                "name": "Dem_GetFaultDetectionCounter",
                "type": "Std_ReturnType Dem_GetFaultDetectionCounter (Dem_EventIdType EventId,sint8* FaultDetectionCounter)",
                "comments": "Get the fault detection counter of an event. This API can only be used through the RTE, and therefore no declaration is exported via Dem.h."
            },
            "41": {
                "name": "Dem_GetIndicatorStatus",
                "type": "Std_ReturnType Dem_GetIndicatorStatus (uint8 IndicatorId,Dem_IndicatorStatusType* IndicatorStatus)",
                "comments": "Gets the indicator status derived from the UDS status. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral/DemEventMemorySet/DemIndicator)} != NULL)"
            },
            "110": {
                "name": "Dem_GetEventFreezeFrameDataEx",
                "type": "Std_ReturnType Dem_GetEventFreezeFrameDataEx (Dem_EventIdType EventId,uint8 RecordNumber,uint16 DataId,uint8* DestBuffer,uint16* BufSize)",
                "comments": "Gets the data of a freeze frame by event."
            },
            "109": {
                "name": "Dem_GetEventExtendedDataRecordEx",
                "type": "Std_ReturnType Dem_GetEventExtendedDataRecordEx (Dem_EventIdType EventId,uint8 RecordNumber,uint8* DestBuffer,uint16* BufSize)",
                "comments": "Gets the data of an extended data record by event."
            },
            "50": {
                "name": "Dem_GetEventMemoryOverflow",
                "type": "Std_ReturnType Dem_GetEventMemoryOverflow (uint8 ClientId,Dem_DTCOriginType DTCOrigin,boolean* OverflowIndication)",
                "comments": "Get the event memory overflow indication status."
            },
            "53": {
                "name": "Dem_GetNumberOfEventMemoryEntries",
                "type": "Std_ReturnType Dem_GetNumberOfEventMemoryEntries (uint8 ClientId,Dem_DTCOriginType DTCOrigin,uint8* NumberOfEventMemoryEntries)",
                "comments": "Returns the number of entries currently stored in the requested event memory."
            },
            "9": {
                "name": "Dem_ResetEventDebounceStatus",
                "type": "Std_ReturnType Dem_ResetEventDebounceStatus (Dem_EventIdType EventId,Dem_DebounceResetStatusType DebounceResetStatus)",
                "comments": "Control the internal debounce counter/timer by BSW modules and SW-Cs. The event qualification will not be affected by these debounce state changes. This API is available for BSW modules as soon as Dem_PreInit has been completed (refer to SWS_Dem_00438 and SWS_Dem_00167)."
            },
            "5": {
                "name": "Dem_ResetEventStatus",
                "type": "Std_ReturnType Dem_ResetEventStatus (Dem_EventIdType EventId)",
                "comments": "Resets the event failed status. This API can only be used through the RTE and therefore no declaration is exported via Dem.h."
            },
            "197": {
                "name": "Dem_ResetMonitorStatus",
                "type": "Std_ReturnType Dem_ResetMonitorStatus (Dem_EventIdType EventId)",
                "comments": "Resets the monitor failed status. Tags: atp. Status = DRAFT"
            },
            "8": {
                "name": "Dem_RestartOperationCycle",
                "type": "Std_ReturnType Dem_RestartOperationCycle (uint8 OperationCycleId)",
                "comments": "Sets an operation cycle state. This API can only be used through the RTE and therefore node declaration is exported via Dem.h. The interface has an asynchronous behavior to avoid exceeding of typical timing requirements on APIs if a large number of events has to be processed and during the re-initializations of the related monitors. The asynchronous acknowledgements are the related Init Monitor For Event callbacks."
            },
            "6": {
                "name": "Dem_PrestoreFreezeFrame",
                "type": "Std_ReturnType Dem_PrestoreFreezeFrame (Dem_EventIdType EventId)",
                "comments": "Captures the freeze frame data for a specific event. This API can only be used through the RTE and therefore no declaration is exported via Dem.h. API Availability: This API will be available only if ({ecuc(Dem/DemConfigSet/DemEventParameter.DemFFPrestorageSupported)} == true)"
            },
            "183": {
                "name": "Dem_SelectDTC",
                "type": "Std_ReturnType Dem_SelectDTC (uint8 ClientId,uint32 DTC,Dem_DTCFormatType DTCFormat,Dem_DTCOriginType DTCOrigin)",
                "comments": "Selects a DTC or DTC group as target for further operations."
            },
            "43": {
                "name": "Dem_SetComponentAvailable",
                "type": "Std_ReturnType Dem_SetComponentAvailable (Dem_ComponentIdType ComponentId,boolean AvailableStatus)",
                "comments": "Set the availability of a specific Dem Component."
            },
            "51": {
                "name": "Dem_SetDTCSuppression",
                "type": "Std_ReturnType Dem_SetDTCSuppression (uint8 ClientId,boolean SuppressionStatus)",
                "comments": "Set the suppression status of a specific DTC. API Availability: This API will be available only if ({ecu(cu(Dem/DemGeneral.DemSuppressionSupport)} == DEM_DTC_SUPPRESSION)"
            },
            "57": {
                "name": "Dem_SetEnableCondition",
                "type": "Std_ReturnType Dem_SetEnableCondition (uint8 EnableConditionID,boolean ConditionFulfilled)",
                "comments": "Sets an enable condition. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral/DemEnableCondition)} != NULL)"
            },
            "55": {
                "name": "Dem_SetEventAvailable",
                "type": "Std_ReturnType Dem_SetEventAvailable (Dem_EventIdType EventId,boolean AvailableStatus)",
                "comments": "Set the available status of a specific Event."
            },
            "87": {
                "name": "Dem_SetEventConfirmationThresholdCounter",
                "type": "Std_ReturnType Dem_SetEventConfirmationThresholdCounter (Dem_EventIdType EventId,uint8 FailureCycleCounterThreshold)",
                "comments": "Set the failure confirmation threshold of an event."
            },
            "4": {
                "name": "Dem_SetEventStatus",
                "type": "Std_ReturnType Dem_SetEventStatus (Dem_EventIdType EventId,Dem_EventStatusType EventStatus)",
                "comments": "Called by SW-Cs or BSW module to report monitor status information to the Dem. BSW modules calling Dem_SetEventStatus can safely ignore the return value. This API will be available only if ({Dem/DemConfigSet/DemEventParameter/DemEventReportingType} == STANDARD_REPORTING)"
            },
            "189": {
                "name": "Dem_SetEventStatusWithMonitorData",
                "type": "Std_ReturnType Dem_SetEventStatusWithMonitorData (Dem_EventIdType EventId,Dem_EventStatusType EventStatus,Dem_MonitorDataType monitorData0,Dem_MonitorDataType monitorData1)",
                "comments": "This API will be available only if ({Dem/DemConfigSet/DemEventParameter/DemEventReportingType} == STANDARD_REPORTING_WITH_MONITOR_DATA)"
            },
            "56": {
                "name": "Dem_SetStorageCondition",
                "type": "Std_ReturnType Dem_SetStorageCondition (uint8 StorageConditionID,boolean ConditionFulfilled)",
                "comments": "Sets a storage condition. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral/DemStorageCondition)} != NULL)"
            },
            "122": {
                "name": "Dem_SetWIRStatus",
                "type": "Std_ReturnType Dem_SetWIRStatus (Dem_EventIdType EventId,boolean WIRStatus)",
                "comments": "Sets the WIR status bit via failsafe SW-Cs. This API can only be used through the RTE and therefore no declaration is exported via Dem.h."
            },
            "60": {
                "name": "Dem_GetTranslationType",
                "type": "Dem_DTCTranslationFormatType Dem_GetTranslationType (uint8 ClientId)",
                "comments": "Get the supported DTC formats of the ECU. The supported formats are configured via Dem Type Of DTC Supported."
            },
            "22": {
                "name": "Dem_GetDTCStatusAvailabilityMask",
                "type": "Std_ReturnType Dem_GetDTCStatusAvailabilityMask (uint8 ClientId,Dem_UdsStatusByteType* DTCStatusMask,Dem_DTCOriginType DTCOrigin)",
                "comments": "Gets the DTC Status availability mask of the selected fault memory."
            },
            "21": {
                "name": "Dem_GetStatusOfDTC",
                "type": "Std_ReturnType Dem_GetStatusOfDTC (uint8 ClientId,uint8* DTCStatus)",
                "comments": "Get the status of a DTC. For large configurations and DTC calibration, the interface behavior can be asynchronous (splitting the DTC search into segments). The DTCs of OBD Events Suppression shall be reported as Dem_WRONG_DTC."
            },
            "14": {
                "name": "Dem_GetSeverityOfDTC",
                "type": "Std_ReturnType Dem_GetSeverityOfDTC (Dem_DTCSeverityType* DTCSeverity,uint8 ClientId)",
                "comments": "Get the severity of the requested DTC. For large configurations and DTC calibration, the interface behavior can be asynchronous (splitting the DTC search into segments)."
            },
            "52": {
                "name": "Dem_GetFunctionalUnitOfDTC",
                "type": "Std_ReturnType Dem_GetFunctionalUnitOfDTC (uint8 ClientId,uint8* DTCFunctionalUnit)",
                "comments": "Gets the functional unit of the requested DTC."
            },
            "19": {
                "name": "Dem_SetDTCFilter",
                "type": "Std_ReturnType Dem_SetDTCFilter (uint8 ClientId,uint8 DTCStatusMask,Dem_DTCFormatType DTCFormat,Dem_DTCOriginType DTCOrigin,boolean FilterWithSeverity,Dem_DTCSeverityType DTCSeverityMask,boolean FilterForFaultDetectionCounter)",
                "comments": "Sets the DTC Filter. The server shall perform a bit-wise logical AND-ing operation between the parameter DTC Status Mask and the current UDS status in the server. In addition to the DTC Status Availability Mask, the server shall return all DTCs for which the result of the AND-ing operation is non-zero i.e. (status Of DTC & DTC Status Mask) != 0. The server shall process only the DTC Status bits that it is supporting. OBD Events Suppression shall be ignored for this computation. If no DTCs within the server match the masking criteria specified in the client\u2019s request, no DTC or status information shall be provided following the DTC Status Availability Mask byte in the positive response message (((status Of DTC & DTC Status Mask) != 0) && ((severity & DTC Severity Mask) != 0)) == TRUE."
            },
            "23": {
                "name": "Dem_GetNumberOfFilteredDTC",
                "type": "Std_ReturnType Dem_GetNumberOfFilteredDTC (uint8 ClientId,uint16* NumberOfFilteredDTC)",
                "comments": "Get the number of a filtered DTC."
            },
            "24": {
                "name": "Dem_GetNextFilteredDTC",
                "type": "Std_ReturnType Dem_GetNextFilteredDTC (uint8 ClientId,uint32* DTC,uint8* DTCStatus)",
                "comments": "Get the next filtered DTC matching the filter criteria. For UDS services, the interface has an asynchronous behavior, because a large number of DTCs has to be processed."
            },
            "59": {
                "name": "Dem_GetNextFilteredDTCAndFDC",
                "type": "Std_ReturnType Dem_GetNextFilteredDTCAndFDC (uint8 ClientId,uint32* DTC,sint8* DTCFaultDetectionCounter)",
                "comments": "Get the next filtered DTC and its associated Fault Detection Counter (FDC) matching the filter criteria. The interface has an asynchronous behavior, because a large number of DTCs have to be processed and the FDC might be received asynchronously from a SW-C, too."
            },
            "61": {
                "name": "Dem_GetNextFilteredDTCAndSeverity",
                "type": "Std_ReturnType Dem_GetNextFilteredDTCAndSeverity (uint8 ClientId,uint32* DTC,uint8* DTCStatus,Dem_DTCSeverityType* DTCSeverity,uint8* DTCFunctionalUnit)",
                "comments": "Get the next filtered DTC and its associated Severity matching the filter criteria. The interface has an asynchronous behavior, because a large number of DTCs has to be processed."
            },
            "63": {
                "name": "Dem_SetFreezeFrameRecordFilter",
                "type": "Std_ReturnType Dem_SetFreezeFrameRecordFilter (uint8 ClientId,Dem_DTCFormatType DTCFormat)",
                "comments": "Sets a freeze frame record filter."
            },
            "58": {
                "name": "Dem_GetNextFilteredRecord",
                "type": "Std_ReturnType Dem_GetNextFilteredRecord (uint8 ClientId,uint32* DTC,uint8* RecordNumber)",
                "comments": "Get the next freeze frame record number and its associated DTC stored in the event memory. The interface has an asynchronous behavior, because NvRAM access might be required."
            },
            "25": {
                "name": "Dem_GetDTCByOccurrenceTime",
                "type": "Std_ReturnType Dem_GetDTCByOccurrenceTime (uint8 ClientId,Dem_DTCRequestType DTCRequest,uint32* DTC)",
                "comments": "Get the DTC by occurrence time. There is no explicit parameter for the DTC origin as the original way is DEM_DTC_ORIGIN_PRIMARY_MEMORY."
            },
            "193": {
                "name": "Dem_SetDTCFilterByExtendedDataRecordNumber",
                "type": "Std_ReturnType Dem_SetDTCFilterByExtendedDataRecordNumber (uint8 ClientId,Dem_DTCFormatType DTCFormat,uint8 ExtendedDataRecordNumber)",
                "comments": "Sets the DTC Filter based on a given extended data record on the primary fault memory. The server selects all DTCs that have a matching extended data record."
            },
            "194": {
                "name": "Dem_SetDTCFilterByReadinessGroup",
                "type": "Std_ReturnType Dem_SetDTCFilterByReadinessGroup (uint8 ClientID,Dem_DTCFormatType DTCFormat,Dem_EventOBDReadinessGroupType ReadinessGroupNumber)",
                "comments": "Sets the DTC Filter based on a given DTC readiness group on the primary fault memory. The server selects all DTCs that have this DTC readiness group configured."
            },
            "26": {
                "name": "Dem_DisableDTCRecordUpdate",
                "type": "Std_ReturnType Dem_DisableDTCRecordUpdate (uint8 ClientId)",
                "comments": "Disables the event memory update of a specific DTC (only one at one time)."
            },
            "27": {
                "name": "Dem_EnableDTCRecordUpdate",
                "type": "Std_ReturnType Dem_EnableDTCRecordUpdate (uint8 ClientId)",
                "comments": "Enables the event memory update of the DTC disabled by Dem_DisableDTCRecordUpdate() before. Note: As the call to Dem_EnableDTCRecordUpdate is the last action in the sequence of disabling/enabling a DTC, the caller is not interested in the return value. Therefore, E_OK should be returned even if the DTC is enabled asynchronously."
            },
            "33": {
                "name": "Dem_GetSizeOfExtendedDataRecordSelection",
                "type": "Std_ReturnType Dem_GetSizeOfExtendedDataRecordSelection (uint8 ClientId,uint32* SizeOfExtendedDataRecord)",
                "comments": "Get the size of Extended Data Record by DTC selected by the call of Dem_SelectExtendedDataRecord."
            },
            "31": {
                "name": "Dem_GetSizeOfFreezeFrameSelection",
                "type": "Std_ReturnType Dem_GetSizeOfFreezeFrameSelection (uint8 ClientId,uint32* SizeOfFreezeFrame)",
                "comments": "Get the size of freeze frame data by DTC selected by the call of Dem_SelectFreezeFrameData."
            },
            "32": {
                "name": "Dem_GetNextExtendedDataRecord",
                "type": "Std_ReturnType Dem_GetNextExtendedDataRecord (uint8 ClientId,uint8* DestBuffer,uint16* BufSize)",
                "comments": "Get extended data record for the DTC selected by Dem_SelectExtendedDataRecord. The function stores the data in the provided Dest Buffer."
            },
            "29": {
                "name": "Dem_GetNextFreezeFrameData",
                "type": "Std_ReturnType Dem_GetNextFreezeFrameData (uint8 ClientId,uint8* DestBuffer,uint16* BufSize)",
                "comments": "Gets freeze frame data by the DTC selected by Dem_SelectFreezeFrameData. The function stores the data in the provided DestBuffer."
            },
            "186": {
                "name": "Dem_SelectExtendedDataRecord",
                "type": "Std_ReturnType Dem_SelectExtendedDataRecord (uint8 ClientId,uint8 ExtendedDataNumber)",
                "comments": "Sets the filter to be used by Dem_GetNextExtendedDataRecord and Dem_GetSizeOfExtendedDataRecordSelection."
            },
            "185": {
                "name": "Dem_SelectFreezeFrameData",
                "type": "Std_ReturnType Dem_SelectFreezeFrameData (uint8 ClientId,uint8 RecordNumber)",
                "comments": "Sets the filter to be used by Dem_GetNextFreezeFrameData and Dem_GetSizeOfFreezeFrameSelection."
            },
            "90": {
                "name": "Dem_GetNumberOfFreezeFrameRecords",
                "type": "Std_ReturnType Dem_GetNumberOfFreezeFrameRecords (uint8 ClientId,uint16* NumberOfFilteredRecords)",
                "comments": "This function returns the number of all freeze frame records currently stored in the primary event memory."
            },
            "36": {
                "name": "Dem_DisableDTCSetting",
                "type": "Std_ReturnType Dem_DisableDTCSetting (uint8 ClientId)",
                "comments": "Disables the DTC setting for all DTCs assigned to the Dem Event Memory Set of the addressed client."
            },
            "37": {
                "name": "Dem_EnableDTCSetting",
                "type": "Std_ReturnType Dem_EnableDTCSetting (uint8 ClientId)",
                "comments": "(Re)-Enables the DTC setting for all DTCs assigned to the Dem Event Memory Set of the addressed client."
            },
            "107": {
                "name": "Dem_DcmGetInfoTypeValue08",
                "type": "Std_ReturnType Dem_DcmGetInfoTypeValue08 (Dcm_OpStatusType OpStatus,uint8* Iumprdata08,uint8* Iumprdata08BufferSize)",
                "comments": "Service is used for requesting IUMPR data according to Info Type $08. This interface is derived from the prototype <Module>_GetInfotypeValueData() defined by the Dcm. Therefore, Dcm_OpStatusType and Std_ReturnType are contained. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "108": {
                "name": "Dem_DcmGetInfoTypeValue0B",
                "type": "Std_ReturnType Dem_DcmGetInfoTypeValue0B (Dcm_OpStatusType OpStatus,uint8* Iumprdata0B,uint8* Iumprdata0BBufferSize)",
                "comments": "Service is used for requesting IUMPR data according to Info Type $0B. This interface is derived from the prototype <Module>_GetInfotypeValueData() defined by the Dcm. Therefore, Dcm_OpStatusType and Std_ReturnType are contained. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "97": {
                "name": "Dem_DcmReadDataOfPID01",
                "type": "Std_ReturnType Dem_DcmReadDataOfPID01 (uint8* PID01value)",
                "comments": "Service to report the value of PID $01 computed by the Dem. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "99": {
                "name": "Dem_DcmReadDataOfPID1C",
                "type": "Std_ReturnType Dem_DcmReadDataOfPID1C (uint8* PID1Cvalue)",
                "comments": "Service to report the value of PID $1C computed by the Dem. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "100": {
                "name": "Dem_DcmReadDataOfPID21",
                "type": "Std_ReturnType Dem_DcmReadDataOfPID21 (uint8* PID21value)",
                "comments": "Service to report the value of PID $21 computed by the Dem. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "101": {
                "name": "Dem_DcmReadDataOfPID30",
                "type": "Std_ReturnType Dem_DcmReadDataOfPID30 (uint8* PID30value)",
                "comments": "Service to report the value of PID $30 computed by the Dem. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "102": {
                "name": "Dem_DcmReadDataOfPID31",
                "type": "Std_ReturnType Dem_DcmReadDataOfPID31 (uint8* PID31value)",
                "comments": "Service to report the value of PID $31 computed by the Dem. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} == DEM_OBD_MASTER_ECU)"
            },
            "103": {
                "name": "Dem_DcmReadDataOfPID41",
                "type": "Std_ReturnType Dem_DcmReadDataOfPID41 (uint8* PID41value)",
                "comments": "Service to report the value of PID $41 computed by the Dem. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "104": {
                "name": "Dem_DcmReadDataOfPID4D",
                "type": "Std_ReturnType Dem_DcmReadDataOfPID4D (uint8* PID4Dvalue)",
                "comments": "Service to report the value of PID $4D computed by the Dem. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} == DEM_OBD_MASTER_ECU)"
            },
            "105": {
                "name": "Dem_DcmReadDataOfPID4E",
                "type": "Std_ReturnType Dem_DcmReadDataOfPID4E (uint8* PID4Evalue)",
                "comments": "Service to report the value of PID $4E computed by the Dem. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} == DEM_OBD_MASTER_ECU)"
            },
            "106": {
                "name": "Dem_DcmReadDataOfPID91",
                "type": "Std_ReturnType Dem_DcmReadDataOfPID91 (uint8* PID91value)",
                "comments": "Service to report the value of PID $91 computed by the Dem. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "82": {
                "name": "Dem_DcmReadDataOfOBDFreezeFrame",
                "type": "Std_ReturnType Dem_DcmReadDataOfOBDFreezeFrame (uint8 PID,uint8 DataElementIndexOfPID,uint8* DestBuffer,uint16* BufSize)",
                "comments": "Gets data element per PID and index of the most important freeze frame being selected for the output of service $02. The function stores the data in the provided DestBuffer. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "83": {
                "name": "Dem_DcmGetDTCOfOBDFreezeFrame",
                "type": "Std_ReturnType Dem_DcmGetDTCOfOBDFreezeFrame (uint8 FrameNumber,uint32* DTC,Dem_DTCFormatType DTCFormat)",
                "comments": "Gets DTC by freeze frame record number. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "163": {
                "name": "Dem_DcmGetAvailableOBDMIDs",
                "type": "Std_ReturnType Dem_DcmGetAvailableOBDMIDs (uint8 Obdmid,uint32* Obdmidvalue)",
                "comments": "Reports the value of a requested \"availability-OBDMID\" to the DCM upon a Service $06 request. Derived from that, the tester displays the supported test same mechanic can select from. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "164": {
                "name": "Dem_DcmGetNumTIDsOfOBDMID",
                "type": "Std_ReturnType Dem_DcmGetNumTIDsOfOBDMID (uint8 Obdmid,uint8* numberOfTIDs)",
                "comments": "Get the number of TIDs per (functional) OBD MID. This can be used by the DCM to iteratively request for OBD/TID result data within a loop from 0 to numberOfTIDs - 1. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecu c(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "165": {
                "name": "Dem_DcmGetDTRData",
                "type": "Std_ReturnType Dem_DcmGetDTRData (uint8 Obdmid,uint8 TIDindex,uint8* TIDvalue,uint8* UaSID,uint16* Testvalue,uint16* Lowlimvalue,uint16* Upplimvalue)",
                "comments": "Reports a DTR data along with TID-value, UaSID, test result with lower and upper limit. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "195": {
                "name": "Dem_DcmGetInfoTypeValue79",
                "type": "Std_ReturnType Dem_DcmGetInfoTypeValue79 (Dcm_OpStatusType OpStatus,uint8* DataValueBuffer,uint8* DataValueBufferSize)",
                "comments": "Service to report the value of monitor activity denominator PID computed by the Dem. API is needed in OBD-relevant ECU's only. API Availability: This API will be available only if: ({ecucDem/DemGeneral.DemOBDSupport} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "196": {
                "name": "Dem_DcmReadDataOfPIDF501",
                "type": "Std_ReturnType Dem_DcmReadDataOfPIDF501 (uint8* PIDF501value)",
                "comments": "Function to report the value of PID 0xF501 computed by the Dem. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if: ({ecucDem/DemGeneral.DemOBDSupport} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "144": {
                "name": "Dem_J1939DcmSetDTCFilter",
                "type": "Std_ReturnType Dem_J1939DcmSetDTCFilter (Dem_J1939DcmDTCStatusFilterType DTCStatusFilter,Dem_DTCKindType DTCKind,Dem_DTCOriginType DTCOrigin,uint8 ClientId,Dem_J1939DcmLampStatusType* LampStatus)",
                "comments": "The function sets the DTC filter for a specific node and returns the composite lamp status of the filtered DTCs."
            },
            "145": {
                "name": "Dem_J1939DcmGetNumberOfFilteredDTC",
                "type": "Std_ReturnType Dem_J1939DcmGetNumberOfFilteredDTC (uint16* NumberOfFilteredDTC,uint8 ClientId)",
                "comments": "Get the number of currently filtered DTCs set by the function Dem_J1939DcmSetDTCFilter."
            },
            "146": {
                "name": "Dem_J1939DcmGetNextFilteredDTC",
                "type": "Std_ReturnType Dem_J1939DcmGetNextFilteredDTC (uint32* J1939DTC,uint8* OccurenceCounter,uint8 ClientId)",
                "comments": "Get the next filtered J1939 DTC."
            },
            "147": {
                "name": "Dem_J1939DcmFirstDTCwithLampStatus",
                "type": "void Dem_J1939DcmFirstDTCwithLampStatus (uint8 ClientId)",
                "comments": "The function sets the filter to the first applicable DTC for the DM31 response for a specific node."
            },
            "148": {
                "name": "Dem_J1939DcmGetNextDTCwithLampStatus",
                "type": "Std_ReturnType Dem_J1939DcmGetNextDTCwithLampStatus (Dem_J1939DcmLampStatusType* LampStatus,uint32* J1939DTC,uint8* OccurenceCounter,uint8 ClientId)",
                "comments": "Get the next filtered J1939 DTC for DM31 including current Lamp Status."
            },
            "149": {
                "name": "Dem_J1939DcmClearDTC",
                "type": "Std_ReturnType Dem_J1939DcmClearDTC (Dem_J1939DcmSetClearFilterType DTCTypeFilter,Dem_DTCOriginType DTCOrigin,uint8 ClientId)",
                "comments": "Clears the status of all event(s) related to the specified DTC(s), as well as all associated event memory entries for these event(s)."
            },
            "150": {
                "name": "Dem_J1939DcmSetFreezeFrameFilter",
                "type": "Std_ReturnType Dem_J1939DcmSetFreezeFrameFilter (Dem_J1939DcmSetFreezeFrameFilterType FreezeFrameKind,uint8 ClientId)",
                "comments": "The function sets the Freeze Frame filter for a specific node."
            },
            "151": {
                "name": "Dem_J1939DcmGetNextFreezeFrame",
                "type": "Std_ReturnType Dem_J1939DcmGetNextFreezeFrame (uint32* J1939DTC,uint8* OccurenceCounter,uint8* DestBuffer,uint16* BufSize,uint8 ClientId)",
                "comments": "Gets next free frame data. The function stores the data in the provided Dest Buffer."
            },
            "152": {
                "name": "Dem_J1939DcmGetNextSPNInFreezeFrame",
                "type": "Std_ReturnType Dem_J1939DcmGetNextSPNInFreezeFrame (uint32* SPNSupported,uint8 ClientId)",
                "comments": "Gets next SPN."
            },
            "153": {
                "name": "Dem_J1939DcmSetRatioFilter",
                "type": "Std_ReturnType Dem_J1939DcmSetRatioFilter (uint16* IgnitionCycleCounter,uint16* OBDMonitoringConditionsEncountered,uint8 ClientId)",
                "comments": "The function sets the Ratio filter for a specific node and returns the corresponding Ignition Cycle Counter and General Denominator."
            },
            "154": {
                "name": "Dem_J1939DcmGetNextFilteredRatio",
                "type": "Std_ReturnType Dem_J1939DcmGetNextFilteredRatio (uint32* SPN,uint16* Numerator,uint16* Denominator,uint8 ClientId)",
                "comments": "Get the next filtered ratio."
            },
            "155": {
                "name": "Dem_J1939DcmReadDiagnosticReadiness1",
                "type": "Std_ReturnType Dem_J1939DcmReadDiagnosticReadiness1 (Dem_J1939DcmDiagnosticReadiness1Type* DataValue,uint8 ClientId)",
                "comments": "Service to report the value of Diagnostic Readiness 1 (DM05) computed by the Dem."
            },
            "156": {
                "name": "Dem_J1939DcmReadDiagnosticReadiness2",
                "type": "Std_ReturnType Dem_J1939DcmReadDiagnosticReadiness2 (Dem_J1939DcmDiagnosticReadiness2Type* DataValue,uint8 ClientId)",
                "comments": "Service to report the value of Diagnostic Readiness 2 (DM21) computed by the Dem."
            },
            "157": {
                "name": "Dem_J1939DcmReadDiagnosticReadiness3",
                "type": "Std_ReturnType Dem_J1939DcmReadDiagnosticReadiness3 (Dem_J1939DcmDiagnosticReadiness3Type* DataValue,uint8 ClientId)",
                "comments": "Service to report the value of Diagnostic Readiness 3 (DM26) computed by the Dem."
            },
            "81": {
                "name": "Dem_SetEventDisabled",
                "type": "Std_ReturnType Dem_SetEventDisabled (Dem_EventIdType EventId)",
                "comments": "Service for reporting the event as disabled to the Dem for the PID $41 computation. API is needed in OBD-relevant ECU's only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "115": {
                "name": "Dem_RepIUMPRFaultDetect",
                "type": "Std_ReturnType Dem_RepIUMPRFaultDetect (Dem_RatioIdType RatioID)",
                "comments": "Service for reporting that faults are possibly found because all conditions are fulfilled. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "174": {
                "name": "Dem_SetIUMPRDenCondition",
                "type": "Std_ReturnType Dem_SetIUMPRDenCondition (Dem_IumprDenomCondIdType ConditionId,Dem_IumprDenomCondStatusType ConditionStatus)",
                "comments": "In order to communicate the status of the (additional) denominator conditions among the OBD relevant ECUs, the API is used to forward the condition status to a Demo of a particular ECU. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "175": {
                "name": "Dem_GetIUMPRDenCondition",
                "type": "Std_ReturnType Dem_GetIUMPRDenCondition (Dem_IumprDenomCondIdType ConditionId,Dem_IumprDenomCondStatusType* ConditionStatus)",
                "comments": "In order to communicate the status of the (additional) denominator conditions among the OBD relevant ECUs, the API is used to retrieve the condition status from the Dem of the ECU where the conditions are computed. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "114": {
                "name": "Dem_RepIUMPRDenRelease",
                "type": "Std_ReturnType Dem_RepIUMPRDenRelease (Dem_RatioIdType RatioID)",
                "comments": "Service is used to release a denominator of a specific monitor. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "121": {
                "name": "Dem_SetPtoStatus",
                "type": "Std_ReturnType Dem_SetPtoStatus (boolean PtoStatus)",
                "comments": "API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "179": {
                "name": "Dem_ReadDataOfPID01",
                "type": "Std_ReturnType Dem_ReadDataOfPID01 (uint8* PID01value)",
                "comments": "Service to report the value of PID $01 computed by the Dem. API is needed in OBD relevant ECUs only."
            },
            "177": {
                "name": "Dem_GetDataOfPID21",
                "type": "Std_ReturnType Dem_GetDataOfPID21 (uint8* PID21value)",
                "comments": "Service to get the value of PID $21 from the Dem by software component. API is needed in OBD-relevant ECU's only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral/DemGeneralOBD.DemOBDCentralizedPID21Handling)} == true) && ({ecuc(Dem/DemGeneral.DemOBDSupport)} == DEM_OBD_MASTER_ECU)"
            },
            "166": {
                "name": "Dem_SetDataOfPID21",
                "type": "Std_ReturnType Dem_SetDataOfPID21 (const uint8* PID21value)",
                "comments": "Service to set the value of PID $21 in the Dem by a software component. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "167": {
                "name": "Dem_SetDataOfPID31",
                "type": "Std_ReturnType Dem_SetDataOfPID31 (const uint8* PID31value)",
                "comments": "Service to set the value of PID $31 in the Dem by a software component. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "168": {
                "name": "Dem_SetDataOfPID4D",
                "type": "Std_ReturnType Dem_SetDataOfPID4D (const uint8* PID4Dvalue)",
                "comments": "Service to set the value of PID $4D in the Dem by a software component. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "169": {
                "name": "Dem_SetDataOfPID4E",
                "type": "Std_ReturnType Dem_SetDataOfPID4E (const uint8* PID4Evalue)",
                "comments": "Serviceto set the value of PID $4E in the Dem by a software component. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "171": {
                "name": "Dem_GetCycleQualified",
                "type": "Std_ReturnType Dem_GetCycleQualified (uint8 OperationCycleId,boolean* isQualified)",
                "comments": "Returns the qualification state of the dependent operation cycle. API Availability: This API will be available only if any of the ({ ecuc(Dem/DemGeneral/DemOperationCycle.DemLeadingCycleRef) } != NULL)"
            },
            "86": {
                "name": "Dem_SetCycleQualified",
                "type": "Std_ReturnType Dem_SetCycleQualified (uint8 OperationCycleId)",
                "comments": "Set a dependent operation cycle as qualified, so it may be processed along with its leading cycle."
            },
            "178": {
                "name": "Dem_GetDTCSeverityAvailabilityMask",
                "type": "Std_ReturnType Dem_GetDTCSeverityAvailabilityMask (uint8 ClientId,Dem_DTCSeverityType* DTCSeverityMask)",
                "comments": "Gets the DTC Severity availability mask."
            },
            "180": {
                "name": "Dem_GetB1Counter",
                "type": "Std_ReturnType Dem_GetB1Counter (uint16* B1Counter)",
                "comments": "Service to report the value of the B1 counter computed by the Dem. API is needed in WWH-OBD relevant ECUs only."
            },
            "162": {
                "name": "Dem_SetDTR",
                "type": "Std_ReturnType Dem_SetDTR (uint16 DTRId,sint32 TestResult,sint32 LowerLimit,sint32 UpperLimit,Dem_DTRControlType Ctrlval)",
                "comments": "Reports a DTR result with lower and upper limit. The internal event status serves as a master whether the DTR values are forwarded or ignored, also taking the DTR Update Kind into account. The Event ID that is related to the DTR is assigned per configuration (and derived from Service Needs). Processing takes enable/storage conditions into account. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "85": {
                "name": "Dem_MainFunction",
                "type": "void Dem_MainFunction (void)",
                "comments": "Processes all note event-based Dem internal functions."
            }
        }
    },
    "55": {
        "name": "Diagnostic Log and Trace",
        "short_name": "Dlt",
        "functions": {
            "1": {
                "name": "Dlt_Init",
                "type": "void Dlt_Init (const Dlt_ConfigType* config)",
                "comments": "Dlt is using the NVRam Manager and is to be initialized very late in the ECU startup phase. The Dlt_Init() function should be called after the NVRam Manager is initialized."
            },
            "2": {
                "name": "Dlt_GetVersionInfo",
                "type": "void Dlt_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "4": {
                "name": "Dlt_SendTraceMessage",
                "type": "Std_ReturnType Dlt_SendTraceMessage (Dlt_SessionIDType sessionId,const Dlt_MessageTraceInfoType* traceInfo,const uint8* traceData,uint16 traceDataLength)",
                "comments": "The service represents the interface to be used by basic software modules or by software components to trace parameters."
            },
            "3": {
                "name": "Dlt_SendLogMessage",
                "type": "Std_ReturnType Dlt_SendLogMessage (Dlt_SessionIDType sessionId,const Dlt_MessageLogInfoType* logInfo,const uint8* logData,uint16 logDataLength)",
                "comments": "The service represents the interface to be used by basic software modules or by software components to send Log Messages."
            },
            "5": {
                "name": "Dlt_RegisterContext",
                "type": "Std_ReturnType Dlt_RegisterContext (Dlt_SessionIDType sessionId,Dlt_ApplicationIDType appId,Dlt_ContextIDType contextId,const uint8* appDescription,uint8 appDescLen,const uint8* contextDescription,uint8 contextDescLen)",
                "comments": "The service has to be called when a software module wants to use services offered by DLT software component for a specific context. If a ContextId is being registered for an already registered ApplicationId, then appDescription can be NULL and len_appDescription zero."
            },
            "22": {
                "name": "Dlt_UnregisterContext",
                "type": "Std_ReturnType Dlt_UnregisterContext (Dlt_SessionIDType sessionId,Dlt_ApplicationIDType appId,Dlt_ContextIDType contextId)",
                "comments": "The service has to be called when a software module is going to be stopped."
            },
            "7": {
                "name": "Dlt_DetForwardErrorTrace",
                "type": "void Dlt_DetForwardErrorTrace (uint16 moduleId,uint8 instanceId,uint8 apiId,uint8 errorId)",
                "comments": "Service to forward error reports from Det to Dlt."
            },
            "8": {
                "name": "Dlt_SetLogLevel",
                "type": "Std_ReturnType Dlt_SetLogLevel (Dlt_ApplicationIDType appId,Dlt_ContextIDType contextId,Dlt_MessageLogLevelType newLogLevel)",
                "comments": "This service is used to change the Log Level for the given tuple of Application ID/Context ID."
            },
            "9": {
                "name": "Dlt_SetTraceStatus",
                "type": "Std_ReturnType Dlt_SetTraceStatus (Dlt_ApplicationIDType appId,Dlt_ContextIDType contextId,boolean newTraceStatus)",
                "comments": "The service Dlt_SetTraceStatus sets the trace status for a specific tuple of Application ID and Context ID."
            },
            "10": {
                "name": "Dlt_GetLogInfo",
                "type": "Std_ReturnType Dlt_GetLogInfo (uint8 options,Dlt_ApplicationIDType appId,Dlt_ContextIDType contextId,uint8* status,Dlt_LogInfoType* logInfo)",
                "comments": "Called to request information about registered Application Ids, their Context Ids and the corresponding log level."
            },
            "24": {
                "name": "Dlt_GetDefaultLogLevel",
                "type": "Std_ReturnType Dlt_GetDefaultLogLevel (Dlt_MessageLogLevelType* defaultLogLevel)",
                "comments": "Returns the Default Log Level currently used by the Dlt module. The returned Log Level might differ from the one which is stored non-volatile."
            },
            "26": {
                "name": "Dlt_StoreConfiguration",
                "type": "Std_ReturnType Dlt_StoreConfiguration (void)",
                "comments": "Copies the current Dlt configuration to NvRAM by calling NvM_WriteBlock(). No return value expected from NvM_WriteBlock()."
            },
            "6": {
                "name": "Dlt_ResetToFactoryDefault",
                "type": "Std_ReturnType Dlt_ResetToFactoryDefault (void)",
                "comments": "The service Dlt_ResetToFactoryDefault sets the Log Level and Trace Status back to the persistently stored default values. If the feature NvM RAM support is enabled, all stored Dlt values in the NvM are deleted. No return value expected from NvM."
            },
            "27": {
                "name": "Dlt_SetMessageFiltering",
                "type": "Std_ReturnType Dlt_SetMessageFiltering (boolean status)",
                "comments": "Switches on/off the message filtering functionality of the Dlt module. If disabled, all the messages will pass the filter."
            },
            "17": {
                "name": "Dlt_SetDefaultLogLevel",
                "type": "Std_ReturnType Dlt_SetDefaultLogLevel (Dlt_MessageLogLevelType newLogLevel)",
                "comments": "Called to modify the passthrough range for Log Messages for all not explicitly set Context Ids."
            },
            "18": {
                "name": "Dlt_SetDefaultTraceStatus",
                "type": "Std_ReturnType Dlt_SetDefaultTraceStatus (boolean newTraceStatus)",
                "comments": "Called to enable or disable trace messages for all not explicitly set Context Ids."
            },
            "25": {
                "name": "Dlt_GetDefaultTraceStatus",
                "type": "Std_ReturnType Dlt_GetDefaultTraceStatus (boolean* traceStatus)",
                "comments": "Returns the current Trace Status of the addressed Log Channel."
            },
            "23": {
                "name": "Dlt_GetLogChannelNames",
                "type": "Std_ReturnType Dlt_GetLogChannelNames (uint8* numberOfLogChannels,Dlt_LogChannelNameInfoType logChannelNames)",
                "comments": "The caller provides the number of log Channel Names to be returned. The function returns the requested amount of Log Channel Names and updates number Of Log Channels as the outgoing information on how many Log Channels are actually configured."
            },
            "31": {
                "name": "Dlt_GetTraceStatus",
                "type": "Std_ReturnType Dlt_GetTraceStatus (Dlt_ApplicationIDType appId,Dlt_ContextIDType contextId,boolean* traceStatus)",
                "comments": "Returns the current Trace Status for a given tuple Application Id/Context Id."
            },
            "32": {
                "name": "Dlt_SetLogChannelAssignment",
                "type": "Std_ReturnType Dlt_SetLogChannelAssignment (Dlt_ApplicationIDType appId,Dlt_ContextIDType contextId,Dlt_LogChannelNameType logChannelName,Dlt_AssignmentOperation addRemoveOp)",
                "comments": "Adds/removes the addressed tuple ApplicationId/ContextId to/from the addressed Log Channel."
            },
            "33": {
                "name": "Dlt_SetLogChannelThreshold",
                "type": "Std_ReturnType Dlt_SetLogChannelThreshold (Dlt_LogChannelNameType logChannelName,Dlt_MessageLogLevelType newThreshold,boolean newTraceStatus)",
                "comments": "Sets the filter threshold for the given Log Channel."
            },
            "34": {
                "name": "Dlt_GetLogChannelThreshold",
                "type": "Std_ReturnType Dlt_GetLogChannelThreshold (Dlt_LogChannelNameType logChannelName,Dlt_MessageLogLevelType* logChannelThreshold,boolean* traceStatus)",
                "comments": "Returns the filter threshold for the given Log Channel."
            },
            "129": {
                "name": "Dlt_SendLogMessageWithAttributes",
                "type": "Std_ReturnType Dlt_SendLogMessageWithAttributes (Dlt_SessionIDType sessionId,const Dlt_MessageLogInfoType* logInfo,const uint8* logData,uint16 logDataLength,const Dlt_MessageAttributesType* attributes)",
                "comments": "The service represents the interface to be used by basic software modules or by software components to send Log Messages with attributes."
            },
            "130": {
                "name": "Dlt_SendTraceMessageWithAttributes",
                "type": "Std_ReturnType Dlt_SendTraceMessageWithAttributes (Dlt_SessionIDType sessionId,const Dlt_MessageTraceInfoType* traceInfo,const uint8* traceData,uint16 traceDataLength,const Dlt_MessageAttributesType* attributes)",
                "comments": "The service represents the interface to be used by basic software modules or by software components to trace parameters, with attributes."
            },
            "66": {
                "name": "Dlt_RxIndication",
                "type": "void Dlt_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "65": {
                "name": "Dlt_TriggerTransmit",
                "type": "Std_ReturnType Dlt_TriggerTransmit (PduIdType TxPduId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr."
            },
            "64": {
                "name": "Dlt_TxConfirmation",
                "type": "void Dlt_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "72": {
                "name": "Dlt_TpTxConfirmation",
                "type": "void Dlt_TpTxConfirmation (PduIdType id,Std_ReturnType result)",
                "comments": "This function is called after the I-PDU has been transmitted on its network, the result indicates whether the transmission was successful or not."
            },
            "67": {
                "name": "Dlt_CopyTxData",
                "type": "BufReq_ReturnType Dlt_CopyTxData (PduIdType id,const PduInfoType* info,const RetryInfoType* retry,PduLengthType* availableDataPtr)",
                "comments": "This function is called to acquire the transmit data of an I-PDU segment (N-PDU). Each call to this function provides the next part of the I-PDU data unless retry->TpDataState is TP_DATA_RETRY. In this case, the function restarts to copy the data beginning at the offset from the current position indicated by retry->TxTpDataCnt. The size of the remaining data is written to the position indicated by availableDataPtr."
            },
            "70": {
                "name": "Dlt_StartOfReception",
                "type": "BufReq_ReturnType Dlt_StartOfReception (PduIdType id,const PduInfoType* info,PduLengthType TpSduLength,PduLengthType* bufferSizePtr)",
                "comments": "This function is called at the start of receiving an N-SDU. The N-SDU might be fragmented into multiple N-PDUs (FF with one or more following CFs) or might consist of a single N-PDU (SF). The service shall provide the currently available maximum buffer size when invoked with TpSduLength equal to 0."
            },
            "69": {
                "name": "Dlt_TpRxIndication",
                "type": "void Dlt_TpRxIndication (PduIdType id,Std_ReturnType result)",
                "comments": "Called after an I-PDU has been received via the TP API, the result indicates whether the transmission was successful or not."
            },
            "68": {
                "name": "Dlt_CopyRxData",
                "type": "BufReq_ReturnType Dlt_CopyRxData (PduIdType id,const PduInfoType* info,PduLengthType* bufferSizePtr)",
                "comments": "This function is called to provide the received data of an I-PDU segment (N-PDU) to the upper layer. Each call to this function provides the next part of the I-PDU data. The size of the remaining buffer is written to the position indicated by bufferSizePtr."
            },
            "128": {
                "name": "Dlt_TxFunction",
                "type": "void Dlt_TxFunction (void)",
                "comments": "I apologize, but it appears that your message did not include any text to fix. Could you please provide the text that you would like me to help with?"
            }
        }
    },
    "173": {
        "name": "Diagnostic over IP",
        "short_name": "DoIP",
        "functions": {
            "83": {
                "name": "DoIP_TpTransmit",
                "type": "Std_ReturnType DoIP_TpTransmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU."
            },
            "84": {
                "name": "DoIP_TpCancelTransmit",
                "type": "Std_ReturnType DoIP_TpCancelTransmit (PduIdType TxPduId)",
                "comments": "Requests cancellation of an ongoing transmission of a PDU in a lower layer communication module. The call of this API to cancel an ongoing transmission will close the used TCP connection."
            },
            "76": {
                "name": "DoIP_TpCancelReceive",
                "type": "Std_ReturnType DoIP_TpCancelReceive (PduIdType RxPduId)",
                "comments": "Requests cancellation of an ongoing reception of a PDU in a lower layer transport protocol module. The call of this API to cancel an ongoing reception will close the used TCP connection."
            },
            "73": {
                "name": "DoIP_IfTransmit",
                "type": "Std_ReturnType DoIP_IfTransmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU."
            },
            "74": {
                "name": "DoIP_IfCancelTransmit",
                "type": "Std_ReturnType DoIP_IfCancelTransmit (PduIdType TxPduId)",
                "comments": "Requests cancellation of an ongoing transmission of a PDU in a lower layer communication module."
            },
            "1": {
                "name": "DoIP_Init",
                "type": "void DoIP_Init (const DoIP_ConfigType* DoIPConfigPtr)",
                "comments": "This service initializes all global variables of the DoIP module. After return of this service the DoIP module is operational."
            },
            "0": {
                "name": "DoIP_GetVersionInfo",
                "type": "void DoIP_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "14": {
                "name": "DoIP_ActivationLineSwitch",
                "type": "void DoIP_ActivationLineSwitch (uint8 InterfaceId ,boolean* Active)",
                "comments": "This function is to be used by integrators to inform the DoIP implementation about the status of the activation line of a DoIP interface with given Interface Id."
            },
            "13": {
                "name": "DoIP_TriggerVehicleAnnouncement",
                "type": "void DoIP_TriggerVehicleAnnouncement (uint8 InterfaceId)",
                "comments": "This function is used to notify the DoIP module to start vehicle announcement for DoIP interfaces with given Interface Id. This function is just a trigger to start the DoIP Initial Vehicle Announcement Time timeout."
            },
            "67": {
                "name": "DoIP_SoAdTpCopyTxData",
                "type": "BufReq_ReturnType DoIP_SoAdTpCopyTxData (PduIdType id,const PduInfoType* info,const RetryInfoType* retry,PduLengthType* availableDataPtr)",
                "comments": "This function is called to acquire the transmit data of an I-PDU segment (N-PDU). Each call to this function provides the next part of the I-PDU data unless retry->TpDataState is TP_DATA_RETRY. In this case the function restarts to copy the data beginning at the offset from the current position indicated by retry->TxTpDataCnt. The size of the remaining data is written to the position indicated by availableDataPtr."
            },
            "72": {
                "name": "DoIP_SoAdTpTxConfirmation",
                "type": "void DoIP_SoAdTpTxConfirmation (PduIdType id,Std_ReturnType result)",
                "comments": "This function is called after the I-PDU has been transmitted on its network, the result indicates whether the transmission was successful or not."
            },
            "68": {
                "name": "DoIP_SoAdTpCopyRxData",
                "type": "BufReq_ReturnType DoIP_SoAdTpCopyRxData (PduIdType id,const PduInfoType* info,PduLengthType* bufferSizePtr)",
                "comments": "This function is called to provide the received data of an I-PDU segment (N-PDU) to the upper layer. Each call to this function provides the next part of the I-PDU data. The size of the remaining buffer is written to the position indicated by bufferSizePtr."
            },
            "70": {
                "name": "DoIP_SoAdTpStartOfReception",
                "type": "BufReq_ReturnType DoIP_SoAdTpStartOfReception (PduIdType id,const PduInfoType* info,PduLengthType TpSduLength,PduLengthType* bufferSizePtr)",
                "comments": "This function is called at the start of receiving an N-SDU. The N-SDU might be fragmented into multiple N-PDUs (FF with one or more following CFs) or might consist of a single N-PDU (SF). The service shall provide the currently available maximum buffer size when invoked with TpSduLength equal to 0."
            },
            "69": {
                "name": "DoIP_SoAdTpRxIndication",
                "type": "void DoIP_SoAdTpRxIndication (PduIdType id,Std_ReturnType result)",
                "comments": "Called after an I-PDU has been received via the TP-API, the result indicates whether the transmission was successful or not."
            },
            "66": {
                "name": "DoIP_SoAdIfRxIndication",
                "type": "void DoIP_SoAdIfRxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "64": {
                "name": "DoIP_SoAdIfTxConfirmation",
                "type": "void DoIP_SoAdIfTxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "11": {
                "name": "DoIP_SoConModeChg",
                "type": "void DoIP_SoConModeChg (SoAd_SoConIdType SoConId,SoAd_SoConModeType Mode)",
                "comments": "Notification about a Socket connection state change, e.g. socket connection gets online."
            },
            "12": {
                "name": "DoIP_LocalIpAddrAssignmentChg",
                "type": "void DoIP_LocalIpAddrAssignmentChg (SoAd_SoConIdType SoConId,TcpIp_IpAddrStateType State)",
                "comments": "This function gets called by the SoA if an IP address assignment related to a socket connection changes (i.e. new address assigned or assigned address becomes invalid)."
            },
            "2": {
                "name": "DoIP_MainFunction",
                "type": "void DoIP_MainFunction (void)",
                "comments": "Schedules the Diagnostic over IP module. (Entry point for scheduling)"
            }
        }
    },
    "120": {
        "name": "DIO Driver",
        "short_name": "Dio",
        "functions": {
            "0": {
                "name": "Dio_ReadChannel",
                "type": "Dio_LevelType Dio_ReadChannel (Dio_ChannelType ChannelId)",
                "comments": "Returns the value of the specified DIO channel."
            },
            "1": {
                "name": "Dio_WriteChannel",
                "type": "void Dio_WriteChannel (Dio_ChannelType ChannelId,Dio_LevelType Level)",
                "comments": "Service to set a level of a channel."
            },
            "2": {
                "name": "Dio_ReadPort",
                "type": "Dio_PortLevelType Dio_ReadPort (Dio_PortType PortId)",
                "comments": "Returns the level of all channels of that port."
            },
            "3": {
                "name": "Dio_WritePort",
                "type": "void Dio_WritePort (Dio_PortType PortId,Dio_PortLevelType Level)",
                "comments": "Service to set a value of the port."
            },
            "4": {
                "name": "Dio_ReadChannelGroup",
                "type": "Dio_PortLevelType Dio_ReadChannelGroup (const Dio_ChannelGroupType* ChannelGroupIdPtr)",
                "comments": "This service reads a subset of the adjoining bits of a port."
            },
            "5": {
                "name": "Dio_WriteChannelGroup",
                "type": "void Dio_WriteChannelGroup (const Dio_ChannelGroupType* ChannelGroupIdPtr,Dio_PortLevelType Level)",
                "comments": "Service to set a subset of the adjoining bits of a port to a specified level."
            },
            "18": {
                "name": "Dio_GetVersionInfo",
                "type": "void Dio_GetVersionInfo (Std_VersionInfoType* VersionInfo)",
                "comments": "Service to get the version information of this module."
            },
            "17": {
                "name": "Dio_FlipChannel",
                "type": "Dio_LevelType Dio_FlipChannel (Dio_ChannelType ChannelId)",
                "comments": "Service to flip (change from 1 to 0 or from 0 to 1) the level of a channel and return the level of the channel after flip."
            },
            "19": {
                "name": "Dio_MaskedWritePort",
                "type": "void Dio_MaskedWritePort (Dio_PortType PortId,Dio_PortLevelType Level,Dio_PortLevelType Mask)",
                "comments": "Service to set the value of a given port with required mask."
            }
        }
    },
    "176": {
        "name": "E2E Transformer",
        "short_name": "E2EXf",
        "functions": {
            "3": {
                "name": "E2EXf_transformerId",
                "type": "uint8 E2EXf_transformerId (Std_TransformerForwardCode forwardedCode,Std_ExtractProtocolHeaderFieldsType extractProtocolHeaderFields,const E2EXf_CSTransactionHandleType* csTransactionHandle,uint8* buffer,uint32* bufferLength,const uint8* inputBuffer,uint32 inputBufferLength)",
                "comments": "Protects the array/buffer to be transmitted, using the in-place transformation."
            },
            "4": {
                "name": "E2EXf_Inv_transformerId",
                "type": "uint8 E2EXf_Inv_transformerId (Std_ExtractProtocolHeaderFieldsType extractProtocolHeaderFields,E2EXf_CSTransactionHandleType* csTransactionHandle,uint8* buffer,uint32* bufferLength,const uint8* inputBuffer,uint32 inputBufferLength)",
                "comments": "Check the received data. If the data can be used by the caller, then the function returns E_OK."
            },
            "1": {
                "name": "E2EXf_Init",
                "type": "void E2EXf_Init (const E2EXf_ConfigType* config)",
                "comments": "Initializes the state of the E2E Transformer. The main part of it is the initialization of the E2E library state structures, which is done by calling all init-functions from E2E library."
            },
            "2": {
                "name": "E2EXf_DeInit",
                "type": "void E2EXf_DeInit (void)",
                "comments": "Deinitializes the E2E transformer."
            },
            "0": {
                "name": "E2EXf_GetVersionInfo",
                "type": "void E2EXf_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            }
        }
    },
    "10": {
        "name": "ECU State Manager",
        "short_name": "EcuM",
        "functions": {
            "0": {
                "name": "EcuM_StartCheckWakeup",
                "type": "void EcuM_StartCheckWakeup (EcuM_WakeupSourceType WakeupSource)",
                "comments": "This API is called by the ECU Firmware to start the Check Wakeup Timer for the corresponding Wakeup Source. If EcuMCheckWakeupTimeout > 0 the Check Wakeup Timer for the Wakeup Source is started. If EcuMCheckWakeupTimeout <= 0 the API call is ignored by the EcuM."
            },
            "44": {
                "name": "EcuM_GoDownHaltPoll",
                "type": "Std_ReturnType EcuM_GoDownHaltPoll (EcuM_UserType UserID)",
                "comments": "Instructs the ECU State Manager module to go into a sleep mode, Reset or OFF depending on the previously selected shutdown target."
            },
            "1": {
                "name": "EcuM_Init",
                "type": "void EcuM_Init (void)",
                "comments": " Initializes the ECU state manager and carries out the startup procedure. The function will never return (it calls StartOS)."
            },
            "26": {
                "name": "EcuM_StartupTwo",
                "type": "void EcuM_StartupTwo (void)",
                "comments": "This function implements the STARTUP II state."
            },
            "2": {
                "name": "EcuM_Shutdown",
                "type": "void EcuM_Shutdown (void)",
                "comments": "Typically called from the shutdown hook, this function takes over execution control and will carry out GO OFF II activities."
            },
            "43": {
                "name": "EcuM_SetState",
                "type": "void EcuM_SetState (EcuM_StateType state)",
                "comments": "Function called by BswM to notify about State Switch."
            },
            "3": {
                "name": "EcuM_RequestRUN",
                "type": "Std_ReturnType EcuM_RequestRUN (EcuM_UserType user)",
                "comments": "Places are a quest for the RUN state. Requests can be placed by every user made known to the state manager at configuration time."
            },
            "4": {
                "name": "EcuM_ReleaseRUN",
                "type": "Std_ReturnType EcuM_ReleaseRUN (EcuM_UserType user)",
                "comments": "Releases a RUN request previously done with a call to EcuM_RequestRUN. The service is intended for implementing AUTOSAR ports."
            },
            "10": {
                "name": "EcuM_RequestPOST_RUN",
                "type": "Std_ReturnType EcuM_RequestPOST_RUN (EcuM_UserType user)",
                "comments": "Places are a quest for the POST RUN state. Requests can be placed by every user made known to the state manager at configuration time. Requests for RUN and POST RUN must be tracked independently (in other words: two independent variables). The service is intended for implementing AUTOSAR ports."
            },
            "11": {
                "name": "EcuM_ReleasePOST_RUN",
                "type": "Std_ReturnType EcuM_ReleasePOST_RUN (EcuM_UserType user)",
                "comments": "Releases a POST RUN request previously done with a call to EcuM_RequestPOST_RUN. The service is intended for implementing AUTOSAR ports."
            },
            "6": {
                "name": "EcuM_SelectShutdownTarget",
                "type": "Std_ReturnType EcuM_SelectShutdownTarget (EcuM_ShutdownTargetType shutdownTarget,EcuM_ShutdownModeType shutdownMode)",
                "comments": "EcuM_SelectShutdownTarget selects the shutdown target. EcuM_SelectShutdownTarget is part of the ECU Manager Module port interface."
            },
            "9": {
                "name": "EcuM_GetShutdownTarget",
                "type": "Std_ReturnType EcuM_GetShutdownTarget (EcuM_ShutdownTargetType* shutdownTarget,EcuM_ShutdownModeType* shutdownMode)",
                "comments": "EcuM_GetShutdownTarget returns the currently selected shutdown target asset by EcuM_SelectShutdownTarget. EcuM_GetShutdownTarget is part of the ECU Manager Module port interface."
            },
            "8": {
                "name": "EcuM_GetLastShutdownTarget",
                "type": "Std_ReturnType EcuM_GetLastShutdownTarget (EcuM_ShutdownTargetType* shutdownTarget,EcuM_ShutdownModeType* shutdownMode)",
                "comments": "EcuM_GetLastShutdownTarget returns the shutdown target of the previous shutdown process. EcuM_GetLastShutdownTarget is part of the ECU Manager Module port interface."
            },
            "27": {
                "name": "EcuM_SelectShutdownCause",
                "type": "Std_ReturnType EcuM_SelectShutdownCause (EcuM_ShutdownCauseType target)",
                "comments": "EcuM_SelectShutdownCause selects the cause for a shutdown. EcuM_SelectShutdownCause is part of the ECU Manager Module port interface."
            },
            "28": {
                "name": "EcuM_GetShutdownCause",
                "type": "Std_ReturnType EcuM_GetShutdownCause (EcuM_ShutdownCauseType* shutdownCause)",
                "comments": "EcuM_GetShutdownCause returns the selected shutdown cause set by EcuM_SelectShutdownCause. EcuM_GetShutdownCause is part of the ECU Manager Module port interface."
            },
            "73": {
                "name": "EcuM_CheckWakeup",
                "type": "void EcuM_CheckWakeup (EcuM_WakeupSourceType wakeupSource)",
                "comments": "This function can be called to check the given wakeup sources. It will pass the argument to the integrator function EcuM_CheckWakeupHook. It can also be called by the ISR of a wakeup source to setup the PLL and check other wakeup sources that may be connected to the same interrupt."
            },
            "13": {
                "name": "EcuM_GetPendingWakeupEvents",
                "type": "EcuM_WakeupSourceType EcuM_GetPendingWakeupEvents (void)",
                "comments": "Get spending wake up events."
            },
            "22": {
                "name": "EcuM_ClearWakeupEvent",
                "type": "void EcuM_ClearWakeupEvent (EcuM_WakeupSourceType sources)",
                "comments": "Clear wake up events."
            },
            "21": {
                "name": "EcuM_GetValidatedWakeupEvents",
                "type": "EcuM_WakeupSourceType EcuM_GetValidatedWakeupEvents (void)",
                "comments": "GetsValidatedWakeUpEvents."
            },
            "25": {
                "name": "EcuM_GetExpiredWakeupEvents",
                "type": "EcuM_WakeupSourceType EcuM_GetExpiredWakeupEvents (void)",
                "comments": "Get expired wake up events."
            },
            "34": {
                "name": "EcuM_SetRelWakeupAlarm",
                "type": "Std_ReturnType EcuM_SetRelWakeupAlarm (EcuM_UserType user,EcuM_TimeType time)",
                "comments": "EcuM_SetRelWakeupAlarm sets a user\u2019s wakeup alarm relative to the current point in time. EcuM_SetRelWakeupAlarm is part of the ECU Manager Module port interface."
            },
            "35": {
                "name": "EcuM_SetAbsWakeupAlarm",
                "type": "Std_ReturnType EcuM_SetAbsWakeupAlarm (EcuM_UserType user,EcuM_TimeType time)",
                "comments": "EcuM_SetAbsWakeupAlarm sets the user\u2019s wakeup alarm to an absolute point in time. EcuM_SetAbsWakeupAlarm is part of the ECU Manager Module port interface."
            },
            "36": {
                "name": "EcuM_AbortWakeupAlarm",
                "type": "Std_ReturnType EcuM_AbortWakeupAlarm (EcuM_UserType user)",
                "comments": "EcuM_AbortWakeupAlarm aborts the wakeup alarm previously set by this user. EcuM_AbortWakeupAlarm is part of the ECU Manager Module port interface."
            },
            "37": {
                "name": "EcuM_GetCurrentTime",
                "type": "Std_ReturnType EcuM_GetCurrentTime (EcuM_TimeType* time)",
                "comments": "EcuM_GetCurrentTime returns the current value of the EcuM clock (i.e. the time since battery connect). EcuM_GetCurrentTime is part of the ECU Manager Module port interface."
            },
            "38": {
                "name": "EcuM_GetWakeupTime",
                "type": "Std_ReturnType EcuM_GetWakeupTime (EcuM_TimeType* time)",
                "comments": "EcuM_GetWakeupTime returns the current value of the master alarm clock (the minimum absolute time of all user alarm clocks). EcuM_GetWakeupTime is part of the ECU Manager Module port interface."
            },
            "39": {
                "name": "EcuM_SetClock",
                "type": "Std_ReturnType EcuM_SetClock (EcuM_UserType user,EcuM_TimeType time)",
                "comments": "EcuM_SetClock sets the EcuM clock time to the provided value. This API is useful for testing the alarm services; Alarms that take days to expire can be tested. EcuM_SetClock is part of the ECU Manager Module port interface."
            },
            "18": {
                "name": "EcuM_SelectBootTarget",
                "type": "Std_ReturnType EcuM_SelectBootTarget (EcuM_BootTargetType target)",
                "comments": "EcuM_SelectBootTarget selects a boot target. EcuM_SelectBootTarget is part of the ECU Manager Module port interface."
            },
            "19": {
                "name": "EcuM_GetBootTarget",
                "type": "Std_ReturnType EcuM_GetBootTarget (EcuM_BootTargetType * target)",
                "comments": "EcuM_GetBootTarget returns the current boot target - see EcuM_SelectBootTarget. EcuM_GetBootTarget is part of the ECU Manager Module port interface."
            },
            "12": {
                "name": "EcuM_SetWakeupEvent",
                "type": "void EcuM_SetWakeupEvent (EcuM_WakeupSourceType sources)",
                "comments": "Sets the wake up event."
            },
            "20": {
                "name": "EcuM_ValidateWakeupEvent",
                "type": "void EcuM_ValidateWakeupEvent (EcuM_WakeupSourceType sources)",
                "comments": "After wakeup, the ECU State Manager will stop the process during the WAKEUP VALIDATION state/sequence to wait for validation of the wakeup event. This API service is used to indicate to the ECU Manager module that the wakeup events indicated in the sources parameter have been validated."
            },
            "48": {
                "name": "EcuM_ErrorHook",
                "type": "void EcuM_ErrorHook (uint16 reason)",
                "comments": "The ECU State Manager will call the error hook if fatal errors occur. In this situation it is not possible to continue processing and the ECU must be stopped. The integrator may choose the modality how the ECU is stopped, i.e. reset, halt, restart, safe state etc."
            },
            "74": {
                "name": "EcuM_AL_SetProgrammableInterrupts",
                "type": "void EcuM_AL_SetProgrammableInterrupts (void)",
                "comments": "If the configuration parameter EcuM_SetProgrammableInterrupts is set to true, this callout EcuM_AL_SetProgrammableInterrupts is executed and shall set the interrupts on ECUs with programmable interrupts."
            },
            "49": {
                "name": "EcuM_AL_DriverInitZero",
                "type": "void EcuM_AL_DriverInitZero (void)",
                "comments": "This callout shall provide driver initialization and other hardware-related startup activities for loading the post-build configuration data. Beware: Here only pre-compile and link-time configurable modules may be used."
            },
            "50": {
                "name": "EcuM_DeterminePbConfiguration",
                "type": "const EcuM_ConfigType* EcuM_DeterminePbConfiguration (void)",
                "comments": "This callout should evaluate some condition, like port pin or NVRAM value, to determine which post-build configuration shall be used in the remainder of the startup process. It shall load this configuration data into a piece of memory that is accessible by all BSW modules and shall return a pointer to the EcuM post-build configuration as a base for all BSW module post-build configurations."
            },
            "51": {
                "name": "EcuM_AL_DriverInitOne",
                "type": "void EcuM_AL_DriverInitOne (void)",
                "comments": "This callout shall provide driver initialization and other hardware-related startup activities in case of a power on reset."
            },
            "75": {
                "name": "EcuM_LoopDetection",
                "type": "void EcuM_LoopDetection (void)",
                "comments": "If the configuration parameter EcuMResetLoopDetection is set to true, this callout EcuM_LoopDetection is called on every startup."
            },
            "60": {
                "name": "EcuM_OnGoOffOne",
                "type": "void EcuM_OnGoOffOne (void)",
                "comments": "This call allows the system designer to notify that the GO OFF I state is about to be entered."
            },
            "61": {
                "name": "EcuM_OnGoOffTwo",
                "type": "void EcuM_OnGoOffTwo (void)",
                "comments": "This call allows the system designer to notify that the GO OFF II state is about to be entered."
            },
            "62": {
                "name": "EcuM_AL_SwitchOff",
                "type": "void EcuM_AL_SwitchOff (void)",
                "comments": "This callout shall take the code for shutting off the power supply of the ECU. If the ECU cannot unpower itself, a reset may be an adequate reaction."
            },
            "76": {
                "name": "EcuM_AL_Reset",
                "type": "void EcuM_AL_Reset (EcuM_ResetType reset)",
                "comments": "This callout shall take the code for resetting the ECU."
            },
            "63": {
                "name": "EcuM_EnableWakeupSources",
                "type": "void EcuM_EnableWakeupSources (EcuM_WakeupSourceType wakeupSource)",
                "comments": "The ECU Manager Module calls EcuM_EnableWakeupSource to allow the system designer to notify wakeup sources defined in the wakeup Source bitfield that SLEEP will be entered and to adjust their source accordingly."
            },
            "64": {
                "name": "EcuM_GenerateRamHash",
                "type": "void EcuM_GenerateRamHash (void)",
                "comments": "seeEcuM_CheckRamHash"
            },
            "65": {
                "name": "EcuM_SleepActivity",
                "type": "void EcuM_SleepActivity (void)",
                "comments": "This call out is invoked periodically in all reduced clock sleep modes. It is explicitly allowed to poll wakeup sources from this call out and to call wakeup notification functions to indicate the end of the sleep state to the ECU State Manager."
            },
            "66": {
                "name": "EcuM_CheckWakeupHook",
                "type": "void EcuM_CheckWakeupHook (EcuM_WakeupSourceType wakeupSource)",
                "comments": "This call out is called by the Ecu M to poll a wake up source."
            },
            "67": {
                "name": "EcuM_CheckRamHash",
                "type": "uint8 EcuM_CheckRamHash (void)",
                "comments": "This call out is intended to provide a RAM integrity test. The goal of this test is to ensure that after a long SLEEP duration, RAM contents is still consistent. The check does not need to be exhaustive since this would consume quite some processing time during wakeups. A well-designed check will execute quickly and detect RAM integrity defects with a sufficient probability. This specification does not make any assumption about the algorithm chosen for a particular ECU. The areas of RAM which will be checked have to be chosen carefully. It depends on the check algorithm itself and the task structure. Stack contents of the task executing the RAM check e.g. very likely cannot be checked. It is good practice to have the hash generation and checking in the same task and that this task is not preemptible and that there is only little activity between hash generation and hash check. The RAM check itself is provided by the system designer. In case of applied multicore and existence of Satellite-EcuM(s): this API will be called by the Master-EcuM only."
            },
            "68": {
                "name": "EcuM_DisableWakeupSources",
                "type": "void EcuM_DisableWakeupSources (EcuM_WakeupSourceType wakeupSource)",
                "comments": "The ECU Manager Module calls EcuM_DisableWakeupSources to set the wakeup source(s) defined in the wakeup Source bitfield so that they are not able to wake the ECU up."
            },
            "69": {
                "name": "EcuM_AL_DriverRestart",
                "type": "void EcuM_AL_DriverRestart (void)",
                "comments": "This callout shall provide driver initialization and other hardware-related startup activities in the wake-up case."
            },
            "70": {
                "name": "EcuM_StartWakeupSources",
                "type": "void EcuM_StartWakeupSources (EcuM_WakeupSourceType wakeupSource)",
                "comments": "The callout shall start the given wakeup source(s) so that they are ready to perform wakeup validation."
            },
            "71": {
                "name": "EcuM_CheckValidation",
                "type": "void EcuM_CheckValidation (EcuM_WakeupSourceType wakeupSource)",
                "comments": "This call out is called by the EcuM to validate a wakeup source. If a valid wakeup has been detected, it shall be reported to EcuM via EcuM_ValidateWakeupEvent()."
            },
            "72": {
                "name": "EcuM_StopWakeupSources",
                "type": "void EcuM_StopWakeupSources (EcuM_WakeupSourceType wakeupSource)",
                "comments": "The callout shall stop the given wakeup source(s) after unsuccessful wakeup validation."
            },
            "24": {
                "name": "EcuM_MainFunction",
                "type": "void EcuM_MainFunction (void)",
                "comments": "The purpose of this service is to implement all activities of the ECU State Manager while the OS is up and running."
            },
            "40": {
                "name": "EcuM_AL_DriverInitBswM_x",
                "type": "void EcuM_AL_DriverInitBswM_x (void)",
                "comments": "This callback shall provide BSW module initializations to be called by the BSW Mode Manager."
            }
        }
    },
    "40": {
        "name": "EEPROM Abstraction",
        "short_name": "Ea",
        "functions": {
            "0": {
                "name": "Ea_Init",
                "type": "void Ea_Init (const Ea_ConfigType* ConfigPtr)",
                "comments": "Initializes the EEPROM abstraction module."
            },
            "2": {
                "name": "Ea_Read",
                "type": "Std_ReturnType Ea_Read (uint16 BlockNumber,uint16 BlockOffset,uint8* DataBufferPtr,uint16 Length)",
                "comments": "Reads Length bytes of block Block number at offset Block Offset into the buffer Data Buffer Ptr."
            },
            "3": {
                "name": "Ea_Write",
                "type": "Std_ReturnType Ea_Write (uint16 BlockNumber,const uint8* DataBufferPtr)",
                "comments": "Writes the contents of the DataBufferPtr to the block BlockNumber."
            },
            "4": {
                "name": "Ea_Cancel",
                "type": "void Ea_Cancel (void)",
                "comments": "Cancels the ongoing asynchronous operation."
            },
            "5": {
                "name": "Ea_GetStatus",
                "type": "MemIf_StatusType Ea_GetStatus (void)",
                "comments": "Service to return the Status."
            },
            "6": {
                "name": "Ea_GetJobResult",
                "type": "MemIf_JobResultType Ea_GetJobResult (void)",
                "comments": "Service to return the Job Result."
            },
            "7": {
                "name": "Ea_InvalidateBlock",
                "type": "Std_ReturnType Ea_InvalidateBlock (uint16 BlockNumber)",
                "comments": "Invalidates the block Block Number."
            },
            "8": {
                "name": "Ea_GetVersionInfo",
                "type": "void Ea_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Service to get the version information of this module."
            },
            "9": {
                "name": "Ea_EraseImmediateBlock",
                "type": "Std_ReturnType Ea_EraseImmediateBlock (uint16 BlockNumber)",
                "comments": "Erase the block Block Number."
            },
            "16": {
                "name": "Ea_JobEndNotification",
                "type": "void Ea_JobEndNotification (void)",
                "comments": "Service to report to this module the successful end of an asynchronous operation."
            },
            "18": {
                "name": "Ea_MainFunction",
                "type": "void Ea_MainFunction (void)",
                "comments": "Service to handle the requested jobs and the internal management operations."
            }
        }
    },
    "90": {
        "name": "EEPROM Driver",
        "short_name": "Eep",
        "functions": {
            "0": {
                "name": "Eep_Init",
                "type": "void Eep_Init (const Eep_ConfigType* ConfigPtr)",
                "comments": "Service for EEPROM initialization."
            },
            "1": {
                "name": "Eep_SetMode",
                "type": "void Eep_SetMode (MemIf_ModeType Mode)",
                "comments": "Sets the mode."
            },
            "2": {
                "name": "Eep_Read",
                "type": "Std_ReturnType Eep_Read (Eep_AddressType EepromAddress,uint8* DataBufferPtr,Eep_LengthType Length)",
                "comments": "Reads from EEPROM."
            },
            "3": {
                "name": "Eep_Write",
                "type": "Std_ReturnType Eep_Write (Eep_AddressType EepromAddress,const uint8* DataBufferPtr,Eep_LengthType Length)",
                "comments": "Writes to EEPROM."
            },
            "4": {
                "name": "Eep_Erase",
                "type": "Std_ReturnType Eep_Erase (Eep_AddressType EepromAddress,Eep_LengthType Length)",
                "comments": "Service for erasing EEPROM sections."
            },
            "5": {
                "name": "Eep_Compare",
                "type": "Std_ReturnType Eep_Compare (Eep_AddressType EepromAddress,const uint8* DataBufferPtr,Eep_LengthType Length)",
                "comments": "Compares a data block in EEPROM with an EEPROM block in the memory."
            },
            "6": {
                "name": "Eep_Cancel",
                "type": "void Eep_Cancel (void)",
                "comments": "Cancel a running job."
            },
            "7": {
                "name": "Eep_GetStatus",
                "type": "MemIf_StatusType Eep_GetStatus (void)",
                "comments": "Returns the EEPROM status."
            },
            "8": {
                "name": "Eep_GetJobResult",
                "type": "MemIf_JobResultType Eep_GetJobResult (void)",
                "comments": "This service returns the result of the last job."
            },
            "10": {
                "name": "Eep_GetVersionInfo",
                "type": "void Eep_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Service to get the version information of this module."
            },
            "9": {
                "name": "Eep_MainFunction",
                "type": "void Eep_MainFunction (void)",
                "comments": "Service to perform the processing of the EEPROM jobs (read/write/erase/compare)."
            }
        }
    },
    "88": {
        "name": "Ethernet Driver",
        "short_name": "Eth",
        "functions": {
            "1": {
                "name": "Eth_Init",
                "type": "void Eth_Init (const Eth_ConfigType* CfgPtr)",
                "comments": "Initialize the Ethernet Driver"
            },
            "3": {
                "name": "Eth_SetControllerMode",
                "type": "Std_ReturnType Eth_SetControllerMode (uint8 CtrlIdx,Eth_ModeType CtrlMode)",
                "comments": "Enables/Disables Rx/Tx communication of the indexed controller"
            },
            "4": {
                "name": "Eth_GetControllerMode",
                "type": "Std_ReturnType Eth_GetControllerMode (uint8 CtrlIdx,Eth_ModeType* CtrlModePtr)",
                "comments": "Obtains the communication state of the indexed controller."
            },
            "8": {
                "name": "Eth_GetPhysAddr",
                "type": "void Eth_GetPhysAddr (uint8 CtrlIdx,uint8* PhysAddrPtr)",
                "comments": "Obtains the physical source address used by the indexed controller."
            },
            "19": {
                "name": "Eth_SetPhysAddr",
                "type": "void Eth_SetPhysAddr (uint8 CtrlIdx,const uint8* PhysAddrPtr)",
                "comments": "Sets the physical source address used by the indexed controller."
            },
            "18": {
                "name": "Eth_UpdatePhysAddrFilter",
                "type": "Std_ReturnType Eth_UpdatePhysAddrFilter (uint8 CtrlIdx,const uint8* PhysAddrPtr,Eth_FilterActionType Action)",
                "comments": "Update the physical source address to/from the indexed controller filter. If the controller is not capable to do the filtering, the software has to do this."
            },
            "5": {
                "name": "Eth_WriteMii",
                "type": "Std_ReturnType Eth_WriteMii (uint8 CtrlIdx,uint8 TrcvIdx,uint8 RegIdx,uint16 RegVal)",
                "comments": "Configures a transceiver register or trigger a function offered by the receiver."
            },
            "6": {
                "name": "Eth_ReadMii",
                "type": "Std_ReturnType Eth_ReadMii (uint8 CtrlIdx,uint8 TrcvIdx,uint8 RegIdx,uint16* RegValPtr)",
                "comments": "Reads a transceiver register"
            },
            "20": {
                "name": "Eth_GetCounterValues",
                "type": "Std_ReturnType Eth_GetCounterValues (uint8 CtrlIdx,Eth_CounterType* CounterPtr)",
                "comments": "Read a list with drop counter values of the corresponding controller. The meaning of these values is described at Eth_CounterType."
            },
            "21": {
                "name": "Eth_GetRxStats",
                "type": "Std_ReturnType Eth_GetRxStats (uint8 CtrlIdx,Eth_RxStatsType* RxStats)",
                "comments": "Returns the following list according to IETF RFC 2819, where the maximal possible value shall denote an invalid value, e.g. if this counter is not available:  \n1. etherStatsDropEvents  \n2. etherStatsOctets  \n3. etherStatsPkts  \n4. etherStatsBroadcastPkts  \n5. etherStatsMulticastPkts  \n6. etherStatsCrcAlignErrors  \n7. etherStatsUndersizePkts  \n8. etherStatsOversizePkts  \n9. etherStatsFragments  \n10. etherStatsJabbers  \n11. etherStatsCollisions  \n12. etherStatsPkts64Octets  \n13. etherStatsPkts65to127Octets  \n14. etherStatsPkts128to255Octets  \n15. etherStatsPkts256to511Octets  \n16. etherStatsPkts512to1023Octets  \n17. etherStatsPkts1024to1518Octets  "
            },
            "28": {
                "name": "Eth_GetTxStats",
                "type": "Std_ReturnType Eth_GetTxStats (uint8 CtrlIdx,Eth_TxStatsType* TxStats)",
                "comments": "Returns the list of Transmission Statistics out of IETF RFC 1213 defined with Eth_TxStatsType, where the maximal possible value shall denote an invalid value, e.g. this counter is not available."
            },
            "29": {
                "name": "Eth_GetTxErrorCounterValues",
                "type": "Std_ReturnType Eth_GetTxErrorCounterValues (uint8 CtrlIdx,Eth_TxErrorCounterValuesType* TxErrorCounterValues)",
                "comments": "Returns the list of Transmission Error Counters out of IETF RFC 1213 and RFC 1643 defined with Eth_TxErrorCounterValuesType, where the maximal possible value shall denote an invalid value, e.g. this counter is not available."
            },
            "30": {
                "name": "Eth_GetSpiStatus",
                "type": "Std_ReturnType Eth_GetSpiStatus (uint8 CtrlIdx,Eth_SpiStatusType* SpiStatusType)",
                "comments": "Returns the status defined by OATC6 26 to identify if an error can occur at the SPI interface. Tags: atp.Status = draft"
            },
            "22": {
                "name": "Eth_GetCurrentTime",
                "type": "Std_ReturnType Eth_GetCurrentTime (uint8 CtrlIdx,TimeStampQualType* timeQualPtr,TimeStampType* timeStampPtr)",
                "comments": "Returns a time value out of the HW registers according to the capability of the HW. If the HW resolution is lower than the Eth_TimeStampType resolution resp. range, then the remaining bits will be filled with 0. Important Note: Eth_GetCurrentTime may be called within an exclusive area. Tags: atp. Status = obsolete."
            },
            "33": {
                "name": "Eth_GetCurrentTimeTuple",
                "type": "Std_ReturnType Eth_GetCurrentTimeTuple (uint8 CtrlIdx,uint8 ClkUnitIdx,TimeTupleType* currentTimeTuplePtr)",
                "comments": "Read the time tuple of the current time of the timestamp clock and the current time of the PHC in an atomic operation. If no PHC is supported, the PHC value will be a copy of the timestamp clock value. Tags: atp. Status = draft"
            },
            "34": {
                "name": "Eth_SetPhcTime",
                "type": "Std_ReturnType Eth_SetPhcTime (uint8 CtrlIdx,uint8 ClkUnitIdx,const TimeStampType* timeStampPtr)",
                "comments": "Sets the absolute time of the PHC. Tags: atp. Status = draft"
            },
            "35": {
                "name": "Eth_SetPhcCorrection",
                "type": "Std_ReturnType Eth_SetPhcCorrection (uint8 CtrlIdx,uint8 ClkUnitIdx,sint32 rateDeviation,sint32 offset)",
                "comments": "Sets PHC parameters to adapt rate and offset of the PHC. Tags: atp. Status = draft"
            },
            "36": {
                "name": "Eth_GetPhcTime",
                "type": "Std_ReturnType Eth_GetPhcTime (uint8 CtrlIdx,uint8 ClkUnitIdx,TimeStampQualType* timeQualPtr,TimeStampType* timeStampPtr)",
                "comments": "Returns the current time value out of the HW registers of the PHC. Tags: atp. Status = draft"
            },
            "37": {
                "name": "Eth_SetPpsSignalMode",
                "type": "Std_ReturnType Eth_SetPpsSignalMode (uint8 CtrlIdx,uint8 ClkUnitIdx,boolean signalMode)",
                "comments": "Enables/disables the generation of a PPS signal. Tags: atp.Status = draft"
            },
            "23": {
                "name": "Eth_EnableEgressTimeStamp",
                "type": "void Eth_EnableEgressTimeStamp (uint8 CtrlIdx,Eth_BufIdxType BufIdx)",
                "comments": "Activate segress timestamping on a dedicated message object. Some HW does store once the egress timestamp marker and some HW needs it always before transmission. There will be no \"disable\" functionality, due to the fact that the message type is always \"timestamped\" by network design."
            },
            "24": {
                "name": "Eth_GetEgressTimeStamp",
                "type": "Std_ReturnType Eth_GetEgressTimeStamp (uint8 CtrlIdx,Eth_BufIdxType BufIdx,TimeStampQualType* timeQualPtr,TimeStampType* timeStampPtr)",
                "comments": "Reads back the egress timestamp on a dedicated message object. It must be called within the TxConfirmation() function."
            },
            "25": {
                "name": "Eth_GetIngressTimeStamp",
                "type": "Std_ReturnType Eth_GetIngressTimeStamp (uint8 CtrlIdx,const Eth_DataType* DataPtr,TimeStampQualType* timeQualPtr,TimeStampType* timeStampPtr)",
                "comments": "Reads back the ingress timestamp on a dedicated message object. It must be called within the RxIndication() function."
            },
            "9": {
                "name": "Eth_ProvideTxBuffer",
                "type": "BufReq_ReturnType Eth_ProvideTxBuffer (uint8 CtrlIdx,uint8 Priority,Eth_BufIdxType* BufIdxPtr,uint8** BufPtr,uint16* LenBytePtr)",
                "comments": "Provides access to a transmit buffer of the queue related to the specified priority."
            },
            "10": {
                "name": "Eth_Transmit",
                "type": "Std_ReturnType Eth_Transmit (uint8 CtrlIdx,Eth_BufIdxType BufIdx,Eth_FrameType FrameType ,boolean TxConfirmation,uint16 LenByte,const uint8* PhysAddrPtr)",
                "comments": "Triggers transmission of a previously filled transmit buffer"
            },
            "11": {
                "name": "Eth_Receive",
                "type": "void Eth_Receive (uint8 CtrlIdx,uint8 QueueIdx,Eth_RxStatusType* RxStatusPtr)",
                "comments": "Receive a frame from the related queue."
            },
            "38": {
                "name": "Eth_ImmediateTransmit",
                "type": "Std_ReturnType Eth_ImmediateTransmit (uint8 CtrlIdx,Eth_BufIdxType TxHandleId,uint8 Priority,ListElemStructType* HeaderListPtr,uint8* PayloadPtr,uint16 PayloadLength)",
                "comments": "Request transmission of an Ethernet frame, where each upper layer header part is an element of a single linked list. All headers together with the payload form an entire Ethernet frame. Tags: atp. Status = draft."
            },
            "39": {
                "name": "Eth_ReleaseRxBuffer",
                "type": "void Eth_ReleaseRxBuffer (uint8 CtrlIdx,Eth_BufIdxType RxHandleId)",
                "comments": "Indication from the upper layer to release the reception buffer (ingress queue element) of the given physical Ethernet controller. Tags: atp. Status = draft"
            },
            "12": {
                "name": "Eth_TxConfirmation",
                "type": "void Eth_TxConfirmation (uint8 CtrlIdx)",
                "comments": "Triggers frame transmission confirmation"
            },
            "13": {
                "name": "Eth_GetVersionInfo",
                "type": "void Eth_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information of this module."
            },
            "32": {
                "name": "Eth_MainFunction",
                "type": "void Eth_MainFunction (void)",
                "comments": "The function checks for controller errors and lost frames. Used for polling state changes. Calls EthIf_CtrlModeIndication when the controller mode changed."
            }
        }
    },
    "65": {
        "name": "Ethernet Interface",
        "short_name": "EthIf",
        "functions": {
            "1": {
                "name": "EthIf_Init",
                "type": "void EthIf_Init (const EthIf_ConfigType* CfgPtr)",
                "comments": "Initialize the Ethernet Interface"
            },
            "3": {
                "name": "EthIf_SetControllerMode",
                "type": "Std_ReturnType EthIf_SetControllerMode (uint8 CtrlIdx,Eth_ModeType CtrlMode)",
                "comments": "Enables/disables the indexed controller"
            },
            "4": {
                "name": "EthIf_GetControllerMode",
                "type": "Std_ReturnType EthIf_GetControllerMode (uint8 CtrlIdx,Eth_ModeType* CtrlModePtr)",
                "comments": "Obtains the state of the indexed controller"
            },
            "48": {
                "name": "EthIf_CheckWakeup",
                "type": "Std_ReturnType EthIf_CheckWakeup (EcuM_WakeupSourceType WakeupSource)",
                "comments": "This API requests the affected Ethernet hardware to check for a signal to wake up. The used Ethernet hardware could be an Ethernet switch or Ethernet transceiver (PHY). This is used e.g. for Ethernet hardware which is compliant to the specification of Open Alliance TC10. This API is called by the integration code. The function could be called in context of the interrupt or on task level."
            },
            "105": {
                "name": "EthIf_GetPhyWakeupReason",
                "type": "Std_ReturnType EthIf_GetPhyWakeupReason (uint8 TrcvIdx,EthTrcv_WakeupReasonType* WakeupReasonPtr)",
                "comments": "This function obtains the wakeup reasons of the indexed Ethernet Transceiver (PHY) by calling EthTrcv_GetBusWuReason(...)"
            },
            "103": {
                "name": "EthIf_GetSwitchPortWakeupReason",
                "type": "Std_ReturnType EthIf_GetSwitchPortWakeupReason (uint8 SwitchIdx,uint8 SwitchPortIdx,EthTrcv_WakeupReasonType* WakeupReasonPtr)",
                "comments": "This function obtains the wakeup reasons of the indexed Ethernet switch port by calling EthSwt_GetSwitchPortWakeupReason()."
            },
            "8": {
                "name": "EthIf_GetPhysAddr",
                "type": "void EthIf_GetPhysAddr (uint8 CtrlIdx,uint8* PhysAddrPtr)",
                "comments": "Obtains the physical source address used by the indexed controller."
            },
            "13": {
                "name": "EthIf_SetPhysAddr",
                "type": "void EthIf_SetPhysAddr (uint8 CtrlIdx,const uint8* PhysAddrPtr)",
                "comments": "Sets the physical source address used by the indexed controller."
            },
            "12": {
                "name": "EthIf_UpdatePhysAddrFilter",
                "type": "Std_ReturnType EthIf_UpdatePhysAddrFilter (uint8 CtrlIdx,const uint8* PhysAddrPtr,Eth_FilterActionType Action)",
                "comments": "Update the physical source address to/from the indexed controller filter. If the Ethernet Controller is not capable to do the filtering, the software has to do this."
            },
            "40": {
                "name": "EthIf_GetPortMacAddr",
                "type": "Std_ReturnType EthIf_GetPortMacAddr (const uint8* MacAddrPtr,uint8* SwitchIdxPtr,uint8* PortIdxPtr)",
                "comments": "Obtain the port over which this MAC address can be reached."
            },
            "41": {
                "name": "EthIf_GetArlTable",
                "type": "Std_ReturnType EthIf_GetArlTable (uint8 switchIdx,uint16* numberOfElements,Eth_MacVlanType* arlTableListPointer)",
                "comments": "Obtains the address resolution table of a switch and copies the list into a user-provided buffer. The function will copy all or number of elements into the output list. If input value of number of elements is 0, the function will not copy any data but only return the number of valid entries in the cache. arlTableListPointer may be NULL_PTR in this case."
            },
            "68": {
                "name": "EthIf_GetCtrlIdxList",
                "type": "Std_ReturnType EthIf_GetCtrlIdxList (uint8* NumberOfCtrlIdx,uint8* CtrlIdxListPtr)",
                "comments": "Returns the number and index of all active Ethernet controllers."
            },
            "67": {
                "name": "EthIf_GetVlanId",
                "type": "Std_ReturnType EthIf_GetVlanId (uint8 CtrlIdx,uint16* VlanIdPtr)",
                "comments": "Returns the VLAN identifier of the requested Ethernet controller."
            },
            "69": {
                "name": "EthIf_GetAndResetMeasurementData",
                "type": "Std_ReturnType EthIf_GetAndResetMeasurementData (EthIf_MeasurementIdxType MeasurementIdx,boolean MeasurementResetNeeded,uint32* MeasurementDataPtr)",
                "comments": "Allow store and read and reset detailed measurement data for diagnostic purposes. Get all Measurement Idx\u2019s at once is not supported. ETHIF_MEAS_ALL shall only be used to reset all Measurement Idx\u2019s at once. A NULL_PTR shall be provided for Measurement Data Ptr in this case."
            },
            "44": {
                "name": "EthIf_StoreConfiguration",
                "type": "Std_ReturnType EthIf_StoreConfiguration (uint8 SwitchIdx)",
                "comments": "Trigger the storage/reset of the configuration of the learned MAC/Port tables of a switch in a persistent manner and will be used by e.g. CDD."
            },
            "45": {
                "name": "EthIf_ResetConfiguration",
                "type": "Std_ReturnType EthIf_ResetConfiguration (uint8 SwitchIdx)",
                "comments": "The function shall request to reset the configuration of the learned MAC/Port tables of an Ethernet switch in a persistent manner. This could be used by e.g. a CDD. The statically configured entries shall still remain."
            },
            "34": {
                "name": "EthIf_GetCurrentTime",
                "type": "Std_ReturnType EthIf_GetCurrentTime (uint8 CtrlIdx,Eth_TimeStampQualType* timeQualPtr,Eth_TimeStampType* timeStampPtr)",
                "comments": "Returns a time value out of the HW registers according to the capability of the HW. If the HW resolution is lower than the Eth_TimeStampType resolution resp. range, the remaining bits will be filled with 0. Important Note: Eth If_GetCurrentTime may be called within an exclusive area. Tags: atp. Status = obsolete."
            },
            "149": {
                "name": "EthIf_GetCurrentTimeTuple",
                "type": "Std_ReturnType EthIf_GetCurrentTimeTuple (uint8 CtrlIdx,uint8 ClkUnitIdx,TimeTupleType* currentTimeTuplePtr)",
                "comments": "Reads the current time of the timestamp clock and the current time of the PHC in an atomic operation. Tags: atp. Status = draft"
            },
            "150": {
                "name": "EthIf_SetPhcTime",
                "type": "Std_ReturnType EthIf_SetPhcTime (uint8 CtrlIdx,uint8 ClkUnitIdx,const TimeStampType* timeStampPtr)",
                "comments": "Sets the absolute time of the PHC. Tags: atp. Status = draft."
            },
            "151": {
                "name": "EthIf_SetPhcCorrection",
                "type": "Std_ReturnType EthIf_SetPhcCorrection (uint8 CtrlIdx,uint8 ClkUnitIdx,sint32 rateDeviation,sint32 offset)",
                "comments": "Sets PHC parameters to adapt rate and offset of the PHC. Tags: atp. Status = draft"
            },
            "152": {
                "name": "EthIf_GetPhcTime",
                "type": "Std_ReturnType EthIf_GetPhcTime (uint8 CtrlIdx,uint8 ClkUnitIdx,TimeStampQualType timeQualPtr,TimeStampType timeStampPtr)",
                "comments": "Returns the current time value out of the HW registers of the PHC. Tags: atp.Status = draft"
            },
            "153": {
                "name": "EthIf_SetPpsSignalMode",
                "type": "Std_ReturnType EthIf_SetPpsSignalMode (uint8 CtrlIdx,uint8 ClkUnitIdx,boolean signalMode)",
                "comments": "Enables/disables the generation of a PPS signal. Tags: atp.Status = draft"
            },
            "35": {
                "name": "EthIf_EnableEgressTimeStamp",
                "type": "void EthIf_EnableEgressTimeStamp (uint8 CtrlIdx,Eth_BufIdxType BufIdx)",
                "comments": "Activate egress timestamping on a dedicated message object. Some HW does store once the egress timestamp marker and some HW needs it always before transmission. There will be no \"disable\" functionality, due to the fact that the message type is always \"timestamped\" by network design."
            },
            "36": {
                "name": "EthIf_GetEgressTimeStamp",
                "type": "Std_ReturnType EthIf_GetEgressTimeStamp (uint8 CtrlIdx,Eth_BufIdxType BufIdx,Eth_TimeStampQualType* timeQualPtr,Eth_TimeStampType* timeStampPtr)",
                "comments": "Reads back the egress timestamp on a dedicated message object. It must be called within the TxConfirmation() function."
            },
            "37": {
                "name": "EthIf_GetIngressTimeStamp",
                "type": "Std_ReturnType EthIf_GetIngressTimeStamp (uint8 CtrlIdx,const Eth_DataType* DataPtr,Eth_TimeStampQualType* timeQualPtr,Eth_TimeStampType* timeStampPtr)",
                "comments": "Reads back the ingress timestamp on a dedicated message object. It must be called within the RxIndication() function."
            },
            "6": {
                "name": "EthIf_SwitchPortGroupRequestMode",
                "type": "Std_ReturnType EthIf_SwitchPortGroupRequestMode (EthIf_SwitchPortGroupIdxType PortGroupIdx,Eth_ModeType PortMode)",
                "comments": "Request a mode for the Eth If SWT Port Group. The call shall be forwarded to Eth SWT by calling Eth SWT_SetSwitchPortMode for all Eth SWT Ports referenced by the port group."
            },
            "7": {
                "name": "EthIf_StartAllPorts",
                "type": "Std_ReturnType EthIf_StartAllPorts (void)",
                "comments": "Request to set all configured and affected Eth Swt Ports to ETH_MODE_ACTIVE"
            },
            "56": {
                "name": "EthIf_SetSwitchMgmtInfo",
                "type": "Std_ReturnType EthIf_SetSwitchMgmtInfo (uint8 CtrlIdx,Eth_BufIdxType BufIdx,EthSwt_MgmtInfoType* MgmtInfoPtr)",
                "comments": "Provides additional management information along to an Ethernet frame that requires special treatment within the Switch. It has to be called between EthIf_ProvideTxBuffer() and EthIf_Transmit() of the related frame."
            },
            "71": {
                "name": "EthIf_GetRxMgmtObject",
                "type": "Std_ReturnType EthIf_GetRxMgmtObject (uint8 CtrlIdx,Eth_DataType* DataPtr,EthSwt_MgmtObjectType **MgmtObjectPtr)",
                "comments": "Request the Mgmt Object of the (in this context) unique Data Ptr."
            },
            "72": {
                "name": "EthIf_GetTxMgmtObject",
                "type": "Std_ReturnType EthIf_GetTxMgmtObject (uint8 CtrlIdx,Eth_BufIdxType BufIdx,EthSwt_MgmtObjectType **MgmtObjectPtr)",
                "comments": "Request the Mgmt Object of the (in this context) unique Buf Idx."
            },
            "57": {
                "name": "EthIf_SwitchEnableTimeStamping",
                "type": "Std_ReturnType EthIf_SwitchEnableTimeStamping (uint8 CtrlIdx,Eth_BufIdxType BufIdx,EthSwt_MgmtInfoType* MgmtInfo)",
                "comments": "Activate segment timestamping on a dedicated message object, addressed by CtrlIdx and BufIdx."
            },
            "64": {
                "name": "EthIf_VerifyConfig",
                "type": "Std_ReturnType EthIf_VerifyConfig (uint8 SwitchIdx,boolean* Result)",
                "comments": "Forwarded to EthSwt_VerifyConfig. EthSwt_VerifyConfig verifies the Switch Configuration depending on the HW-Architecture, HW-capability and the intended accuracy of this verification."
            },
            "65": {
                "name": "EthIf_SetForwardingMode",
                "type": "Std_ReturnType EthIf_SetForwardingMode (uint8 SwitchIdx,boolean mode)",
                "comments": "Verifies the Switch Configuration. If Configuration is not valid, Switch is reconfigured."
            },
            "24": {
                "name": "EthIf_GetTrcvSignalQuality",
                "type": "Std_ReturnType EthIf_GetTrcvSignalQuality (uint8 TrcvIdx,EthIf_SignalQualityResultType* ResultPtr)",
                "comments": "Retrieve the signal quality of the link of the given Ethernet transceiver."
            },
            "26": {
                "name": "EthIf_GetSwitchPortSignalQuality",
                "type": "Std_ReturnType EthIf_GetSwitchPortSignalQuality (uint8 SwitchIdx,uint8 SwitchPortIdx,EthIf_SignalQualityResultType* ResultPtr)",
                "comments": "Retrieve the signal quality of the link of the given Ethernet switch port."
            },
            "25": {
                "name": "EthIf_ClearTrcvSignalQuality",
                "type": "Std_ReturnType EthIf_ClearTrcvSignalQuality (uint8 TrcvIdx)",
                "comments": "Clear the stored signal quality of the link of the given Ethernet transceiver."
            },
            "27": {
                "name": "EthIf_ClearSwitchPortSignalQuality",
                "type": "Std_ReturnType EthIf_ClearSwitchPortSignalQuality (uint8 SwitchIdx,uint8 SwitchPortIdx)",
                "comments": "Clear the stored signal quality of the link of the given Ethernet switch port."
            },
            "23": {
                "name": "EthIf_SetPhyTestMode",
                "type": "Std_ReturnType EthIf_SetPhyTestMode (uint8 TrcvIdx,EthTrcv_PhyTestModeType Mode)",
                "comments": "Activates a given test mode."
            },
            "18": {
                "name": "EthIf_SetPhyLoopbackMode",
                "type": "Std_ReturnType EthIf_SetPhyLoopbackMode (uint8 TrcvIdx,EthTrcv_PhyLoopbackModeType Mode)",
                "comments": "Activates a given loopback mode."
            },
            "19": {
                "name": "EthIf_SetPhyTxMode",
                "type": "Std_ReturnType EthIf_SetPhyTxMode (uint8 TrcvIdx,EthTrcv_PhyTxModeType Mode)",
                "comments": "Activates the given transmission mode."
            },
            "20": {
                "name": "EthIf_GetCableDiagnosticsResult",
                "type": "Std_ReturnType EthIf_GetCableDiagnosticsResult (uint8 TrcvIdx,EthTrcv_CableDiagResultType* ResultPtr)",
                "comments": "Retrieve the cable diagnostics result of a given transceiver."
            },
            "21": {
                "name": "EthIf_GetPhyIdentifier",
                "type": "Std_ReturnType EthIf_GetPhyIdentifier (uint8 TrcvIdx,uint32* OrgUniqueIdPtr,uint8* ModelNrPtr,uint8* RevisionNrPtr)",
                "comments": "Obtain the PHY identifier of the Ethernet Interface according to IEEE 802.3-2015 chapter 22.2.4.3.1 PHY Identifier."
            },
            "50": {
                "name": "EthIf_GetBufWRxParams",
                "type": "Std_ReturnType EthIf_GetBufWRxParams (uint8 CtrlIdx,const WEth_BufWRxParamIdType* RxParamIds,uint32* ParamValues,uint8 NumParams)",
                "comments": "Readout values related to the received direction of the transceiver for a received packet. For example, this could be RSSI or Channel belonging to one single packet."
            },
            "49": {
                "name": "EthIf_GetBufWTxParams",
                "type": "Std_ReturnType EthIf_GetBufWTxParams (uint8 CtrlIdx,const WEth_BufWTxParamIdType* TxParamIds,uint32* ParamValues,uint8 NumParams)",
                "comments": "Read out values related to the transmit direction of the transceiver for a transmitted packet."
            },
            "51": {
                "name": "EthIf_SetBufWTxParams",
                "type": "Std_ReturnType EthIf_SetBufWTxParams (uint8 CtrlIdx,Eth_BufIdxType BufIdx,const WEth_BufWTxParamIdType* TxParamIds,const uint32* ParamValues,uint8 NumParams)",
                "comments": "Set values related to the transmit direction of the transceiver for a specific buffer (packet to be sent). For example, this can be the desired transmit power or the channel belonging to one single packet."
            },
            "52": {
                "name": "EthIf_SetRadioParams",
                "type": "Std_ReturnType EthIf_SetRadioParams (uint8 TrcvId,const WEthTrcv_SetRadioParamIdType* ParamIds,const uint32* ParamValue,uint8 NumParams)",
                "comments": "Set values related to a transceiver\u2019s wireless radio. For example, this could be the selection of the radio settings (channel, ...)."
            },
            "53": {
                "name": "EthIf_SetChanRxParams",
                "type": "Std_ReturnType EthIf_SetChanRxParams (uint8 TrcvId,uint8 RadioId,const WEthTrcv_SetChanRxParamIdType* ParamIds,const uint32* ParamValues,uint8 NumParams)",
                "comments": "Set values related to the received direction of a transceiver\u2019s wireless channel. For example, this could be a channel parameter like the frequency."
            },
            "54": {
                "name": "EthIf_SetChanTxParams",
                "type": "Std_ReturnType EthIf_SetChanTxParams (uint8 TrcvId,uint8 RadioId,const WEthTrcv_SetChanTxParamIdType* TxParamIds,const uint32* ParamValues,uint8 NumParams)",
                "comments": "Set values related to the transmit direction of a transceiver\u2019s wireless channel. For example, this could be the bitrate of a channel."
            },
            "55": {
                "name": "EthIf_GetChanRxParams",
                "type": "Std_ReturnType EthIf_GetChanRxParams (uint8 TrcvId,uint8 RadioId,const WEthTrcv_GetChanRxParamIdType* ParamIds,uint32* ParamValues,uint8 NumParams)",
                "comments": "Read values related to the received direction of the transceiver. For example, this could be a Channel Busy Ratio (CBR) or the average Channel Idle Time (CIT)."
            },
            "9": {
                "name": "EthIf_ProvideTxBuffer",
                "type": "BufReq_ReturnType EthIf_ProvideTxBuffer (uint8 CtrlIdx,Eth_FrameType FrameType,uint8 Priority,Eth_BufIdxType* BufIdxPtr,uint8** BufPtr,uint16* LenBytePtr)",
                "comments": "Provides access to a transmit buffer of the specified Ethernet controller."
            },
            "10": {
                "name": "EthIf_Transmit",
                "type": "Std_ReturnType EthIf_Transmit (uint8 CtrlIdx,Eth_BufIdxType BufIdx,Eth_FrameType FrameType,boolean TxConfirmation,uint16 LenByte,const uint8* PhysAddrPtr)",
                "comments": "Triggers transmission of a previously filled transmit buffer."
            },
            "154": {
                "name": "EthIf_ImmediateTransmit",
                "type": "Std_ReturnType EthIf_ImmediateTransmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Request transmission of a PDU. Tags: atp. Status = draft"
            },
            "155": {
                "name": "EthIf_ReleaseRxBuffer",
                "type": "void EthIf_ReleaseRxBuffer (PduIdType RxPduId)",
                "comments": "Indication from the upper layer to release the lower layer reception buffer. Tags: atp. Status = draft"
            },
            "11": {
                "name": "EthIf_GetVersionInfo",
                "type": "void EthIf_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information of this module."
            },
            "73": {
                "name": "EthIf_GetSwitchPortMode",
                "type": "Std_ReturnType EthIf_GetSwitchPortMode (uint8 SwitchIdx,uint8 SwitchPortIdx,Eth_ModeType* PortModePtr)",
                "comments": "Obtains the mode of the indexed switch port."
            },
            "74": {
                "name": "EthIf_GetTransceiverMode",
                "type": "Std_ReturnType EthIf_GetTransceiverMode (uint8 TrcvIdx,Eth_ModeType* TrcvModePtr)",
                "comments": "Obtains the state of the indexed transceiver."
            },
            "75": {
                "name": "EthIf_SwitchPortGetLinkState",
                "type": "Std_ReturnType EthIf_SwitchPortGetLinkState (uint8 SwitchIdx,uint8 SwitchPortIdx,EthTrcv_LinkStateType* LinkStatePtr)",
                "comments": "Obtains the link state of the indexed switch port."
            },
            "76": {
                "name": "EthIf_TransceiverGetLinkState",
                "type": "Std_ReturnType EthIf_TransceiverGetLinkState (uint8 TrcvIdx,EthTrcv_LinkStateType* LinkStatePtr)",
                "comments": "Obtains the link state of the indexed transceiver."
            },
            "77": {
                "name": "EthIf_SwitchPortGetBaudRate",
                "type": "Std_ReturnType EthIf_SwitchPortGetBaudRate (uint8 SwitchIdx,uint8 SwitchPortIdx,EthTrcv_BaudRateType* BaudRatePtr)",
                "comments": "Obtains the baud rate of the indexed switch port"
            },
            "78": {
                "name": "EthIf_TransceiverGetBaudRate",
                "type": "Std_ReturnType EthIf_TransceiverGetBaudRate (uint8 TrcvIdx,EthTrcv_BaudRateType* BaudRatePtr)",
                "comments": "Obtainsthe baud rate of the indexed transceiver."
            },
            "79": {
                "name": "EthIf_SwitchPortGetDuplexMode",
                "type": "Std_ReturnType EthIf_SwitchPortGetDuplexMode (uint8 SwitchIdx,uint8 SwitchPortIdx,EthTrcv_DuplexModeType* DuplexModePtr)",
                "comments": "Obtains the duplex mode of the indexed switch port."
            },
            "80": {
                "name": "EthIf_TransceiverGetDuplexMode",
                "type": "Std_ReturnType EthIf_TransceiverGetDuplexMode (uint8 TrcvIdx,EthTrcv_DuplexModeType* DuplexModePtr)",
                "comments": "Obtains the duplex mode of the indexed transceiver."
            },
            "81": {
                "name": "EthIf_SwitchPortGetCounterValues",
                "type": "Std_ReturnType EthIf_SwitchPortGetCounterValues (uint8 SwitchIdx,uint8 SwitchPortIdx,Eth_CounterType* CounterPtr)",
                "comments": "Reads a list with drop counter values of the corresponding port of the switch. The meaning of these values is described at Eth_CounterType."
            },
            "82": {
                "name": "EthIf_SwitchPortGetRxStats",
                "type": "Std_ReturnType EthIf_SwitchPortGetRxStats (uint8 SwitchIdx,uint8 SwitchPortIdx,Eth_RxStatsType* RxStatsPtr)",
                "comments": "Returns a list of statistic counters defined with Eth_Rx Tats Type. The majority of these counters are derived from the IETF RFC 2819."
            },
            "83": {
                "name": "EthIf_SwitchPortGetTxStats",
                "type": "Std_ReturnType EthIf_SwitchPortGetTxStats (uint8 SwitchIdx,uint8 SwitchPortIdx,Eth_TxStatsType* TxStatsPtr)",
                "comments": "List of values to read statistic values for transmission."
            },
            "84": {
                "name": "EthIf_SwitchPortGetTxErrorCounterValues",
                "type": "Std_ReturnType EthIf_SwitchPortGetTxErrorCounterValues (uint8 SwitchIdx,uint8 SwitchPortIdx,Eth_TxErrorCounterValuesType* TxStatsPtr)",
                "comments": "List of values to read statistic error counter values for transmission from."
            },
            "85": {
                "name": "EthIf_SwitchPortGetMacLearningMode",
                "type": "Std_ReturnType EthIf_SwitchPortGetMacLearningMode (uint8 SwitchIdx,uint8 SwitchPortIdx,EthSwt_MacLearningType* MacLearningModePtr)",
                "comments": "Returns the MAC learning mode, i.e. 1.) HW learning enabled, 2.) Hardware learning disabled, 3.) Software learning enabled. Note: This feature is hardware dependent, i.e. the switch hardware needs to support the different learning modes."
            },
            "86": {
                "name": "EthIf_GetSwitchPortIdentifier",
                "type": "Std_ReturnType EthIf_GetSwitchPortIdentifier (uint8 SwitchIdx,uint8 SwitchPortIdx,uint32* OrgUniqueIdPtr,uint8* ModelNrPtr,uint8* RevisionNrPtr)",
                "comments": "This function retrieves the OUI (24 bit) of the indexed Ethernet switch port."
            },
            "87": {
                "name": "EthIf_GetSwitchIdentifier",
                "type": "Std_ReturnType EthIf_GetSwitchIdentifier (uint8 SwitchIdx,uint32* OrgUniqueIdPtr)",
                "comments": "Obtain the Organizationally Unique Identifier that is given by the IEEE of the indexed Ethernet switch. This function shall provide the OUI of Ethernet switch. The OUI has a size of 24 bit. If an Ethernet switch can provide the OUI, the 8 most significant bits of the OUI shall be set to 0x00xxxxxx. If an Ethernet switch cannot provide the OUI, the 8 most significant bits of the OUI shall be set to 0xFFxxxxxx."
            },
            "88": {
                "name": "EthIf_WritePortMirrorConfiguration",
                "type": "Std_ReturnType EthIf_WritePortMirrorConfiguration (uint8 MirroredSwitchIdx,const EthSwt_PortMirrorCfgType* PortMirrorConfigurationPtr)",
                "comments": "Store the given port mirror configuration in a shadow buffer in the Ethernet switch driver for the given Mirrored Switch Idx."
            },
            "89": {
                "name": "EthIf_ReadPortMirrorConfiguration",
                "type": "Std_ReturnType EthIf_ReadPortMirrorConfiguration (uint8 MirroredSwitchIdx,EthSwt_PortMirrorCfgType* PortMirrorConfigurationPtr)",
                "comments": "Obtain the port mirror configuration of the given Ethernet switch."
            },
            "90": {
                "name": "EthIf_DeletePortMirrorConfiguration",
                "type": "Std_ReturnType EthIf_DeletePortMirrorConfiguration (uint8 MirroredSwitchIdx)",
                "comments": "Delete the stored port mirror configuration of the given Mirrored Switch Idx. If no port mirror configuration was found for the given Mirrored Switch Idx, the return value shall be E_OK."
            },
            "91": {
                "name": "EthIf_GetPortMirrorState",
                "type": "Std_ReturnType EthIf_GetPortMirrorState (uint8 SwitchIdx,uint8 PortIdx,EthSwt_PortMirrorStateType* PortMirrorStatePtr)",
                "comments": "Obtain the current status of the port mirroring for the indexed Ethernet switch port."
            },
            "92": {
                "name": "EthIf_SetPortMirrorState",
                "type": "Std_ReturnType EthIf_SetPortMirrorState (uint8 MirroredSwitchIdx,uint8 PortIdx,EthSwt_PortMirrorStateType PortMirrorState)",
                "comments": "Request to set the given port mirroring state of the port mirror configuration for the given Ethernet switch."
            },
            "93": {
                "name": "EthIf_SetPortTestMode",
                "type": "Std_ReturnType EthIf_SetPortTestMode (uint8 SwitchIdx,uint8 PortIdx,EthTrcv_PhyTestModeType Mode)",
                "comments": "Activates a given test mode of the indexed Ethernet switch port."
            },
            "94": {
                "name": "EthIf_SetPortLoopbackMode",
                "type": "Std_ReturnType EthIf_SetPortLoopbackMode (uint8 SwitchIdx,uint8 PortIdx,EthTrcv_PhyLoopbackModeType Mode)",
                "comments": "Activates a given test loop-back mode of the indexed Ethernet switch port."
            },
            "95": {
                "name": "EthIf_SetPortTxMode",
                "type": "Std_ReturnType EthIf_SetPortTxMode (uint8 SwitchIdx,uint8 PortIdx,EthTrcv_PhyTxModeType Mode)",
                "comments": "Activates and given transmission mode of the indexed Ethernet switch port."
            },
            "96": {
                "name": "EthIf_GetBufCV2xPC5RxParams",
                "type": "Std_ReturnType EthIf_GetBufCV2xPC5RxParams (uint8 CtrlId,const CV2x_BufCV2xPC5RxParamIdType* RxParamIds,uint16* ParamValues,uint8 NumParams)",
                "comments": "Read out values related to the received direction of the Cellular V2X for a received packet. For example, this could be CBR belonging to one single packet."
            },
            "97": {
                "name": "EthIf_GetBufCV2xPC5TxParams",
                "type": "Std_ReturnType EthIf_GetBufCV2xPC5TxParams (uint8 CtrlId,const CV2x_BufCV2xPC5TxParamIdType* TxParamIds,uint16* ParamValues,uint8 NumParams)",
                "comments": "Read out values related to the transmit direction of the Cellular V2X for a transmitted packet. For example, this could be transaction ID belonging to one single packet."
            },
            "98": {
                "name": "EthIf_SetBufCV2xPC5TxParams",
                "type": "Std_ReturnType EthIf_SetBufCV2xPC5TxParams (uint8 CtrlId,uint8 BufIdx,const CV2x_BufCV2xPC5TxParamIdType* TxParamIds,const uint16* ParamValues,uint8 NumParams)",
                "comments": "Set values related to the transmit direction of the Cellular V2X for a specific buffer (packet to be sent). For example, this can be the desired ProSe per-packet priority belonging to one single packet."
            },
            "99": {
                "name": "EthIf_GetChanCV2xPC5TxParams",
                "type": "Std_ReturnType EthIf_GetChanCV2xPC5TxParams (uint8 CtrlId,uint8 ChannelId,const CV2x_GetChanTxParamIdType* ParamIds,uint32* ParamValues,uint8 NumParams)",
                "comments": "Read values related to the received direction of the channel. For example, this could be a Channel Busy Ratio (CBR)."
            },
            "100": {
                "name": "EthIf_SwitchGetCfgDataInfo",
                "type": "Std_ReturnType EthIf_SwitchGetCfgDataInfo (uint8 SwitchIdx,uint32* DataSizePtr,uint32* DataAdressPtr)",
                "comments": "Retrieve the total size of data and the memory start address of the indexed Ethernet Switch."
            },
            "101": {
                "name": "EthIf_SwitchPortGetMaxFIFOBufferFillLevel",
                "type": "Std_ReturnType EthIf_SwitchPortGetMaxFIFOBufferFillLevel (uint8 SwitchPortIdx,uint8 PortIdx,uint8 SwitchPortEgressFifoIdx,uint32* SwitchPortEgressFifoBufferLevelPtr)",
                "comments": "The function retrieves the maximum amount of allocated FIFO buffer of the indexed Ethernet switch egress port. If the Ethernet switch hardware does not support Ethernet switch port based maximal FIFO buffer level, the content of Switch Port Egress Fifo Buffer Level Ptr shall be set to 0xFFFFFFFF. This API may be called by e.g. a CDD."
            },
            "102": {
                "name": "EthIf_TransceiverGetMacMethod",
                "type": "Std_ReturnType EthIf_TransceiverGetMacMethod (uint8* TrcvIdx,EthTrcv_MacMethodType* MacModePtr)",
                "comments": "Obtains the media access mode of the transceiver."
            },
            "106": {
                "name": "EthIf_EthGetSpiStatus",
                "type": "Std_ReturnType EthIf_EthGetSpiStatus (uint8* CtrlIdx,Eth_SpiStatusType* SpiStatusPtr)",
                "comments": "When MAC PHY controller are used, obtains the SPI interface status. Tags: atp. Status = draft"
            },
            "109": {
                "name": "EthIf_SwitchMacSecUpdateSecY",
                "type": "Std_ReturnType EthIf_SwitchMacSecUpdateSecY (const EthSwt_MgmtInfoType* MgmtInfoPtr,const Mka_MacSecConfigType* MACsecCfgPtr,uint64 TxSci)",
                "comments": "Requests the Ethernet Switch to update the SecY/PAC of the provided port with the provided parameters. A Transmission Secure Channel with the provided SCI shall be configured during the first call. A pointer to a MACsec Basic Parameters Configuration file shall be provided to create the Secure Channel. Tags: atp. Status = DRAFT"
            },
            "136": {
                "name": "EthIf_MacSecUpdateSecY",
                "type": "Std_ReturnType EthIf_MacSecUpdateSecY (uint8 CtrlIdx,const Mka_MacSecConfigType* MACsecCfgPtr,uint64 TxSci)",
                "comments": "Request the Ethernet Interface (MACsec per SW) or the Ethernet Transceiver to update the SecY/PAC of the PHY with the provided parameters. A Transmission Secure Channel with the provided SCI shall be configured during the first call. A pointer to a MACsec Basic Parameters Configuration file shall be provided to create the Secure Channel. Tags: atp. Status = DRAFT"
            },
            "107": {
                "name": "EthIf_SwitchMacSecUpdateSecYNotification",
                "type": "void EthIf_SwitchMacSecUpdateSecYNotification (const EthSwt_MgmtInfoType* MgmtInfoPtr)",
                "comments": "Callback to notify that Eht If_Switch Mac Sec Update Sec Y finished. Tags: atp. Status = DRAFT"
            },
            "108": {
                "name": "EthIf_MacSecUpdateSecYNotification",
                "type": "void EthIf_MacSecUpdateSecYNotification (uint8 CtrlIdx)",
                "comments": "Callback to notify that Eht If_Switch Mac Sec Update Sec Y finished. Tags: atp. Status = DRAFT"
            },
            "110": {
                "name": "EthIf_SwitchMacSecInitRxSc",
                "type": "Std_ReturnType EthIf_SwitchMacSecInitRxSc (const EthSwt_MgmtInfoType* MgmtInfoPtr,uint64 Sci)",
                "comments": "Request the Ethernet Switch Driver to configure a Reception Secure Channel for the given Secure Channel Identifier. Tags: atp. Status = DRAFT"
            },
            "135": {
                "name": "EthIf_MacSecInitRxSc",
                "type": "Std_ReturnType EthIf_MacSecInitRxSc (uint8 CtrlIdx,uint64 Sci)",
                "comments": "Request the Ethernet Interface (MACsec per SW) or the Ethernet Transceiver Driver to configure a Reception Secure Channel for the given Secure Channel Identifier. Tags: atp. Status = DRAFT"
            },
            "111": {
                "name": "EthIf_SwitchMacSecResetRxSc",
                "type": "Std_ReturnType EthIf_SwitchMacSecResetRxSc (const EthSwt_MgmtInfoType* MgmtInfoPtr,uint64 Sci)",
                "comments": "Request the Ethernet Switch Driver to reset to default the MACsec values of the Reception Secure Channel for the given Secure Channel Identifier. Tags: atp. Status = DRAFT"
            },
            "134": {
                "name": "EthIf_MacSecResetRxSc",
                "type": "Std_ReturnType EthIf_MacSecResetRxSc (uint8 CtrlIdx,uint64 Sci)",
                "comments": "Request the Ethernet Interface (MACsec per SW) or the Ethernet Transceiver Driver to reset to default the MACsec values of the Reception Secure Channel for the given Secure Channel Identifier. Tags: atp. Status = DRAFT"
            },
            "112": {
                "name": "EthIf_SwitchMacSecAddTxSa",
                "type": "Std_ReturnType EthIf_SwitchMacSecAddTxSa (const EthSwt_MgmtInfoType* MgmtInfoPtr,uint8 An,uint64 NextPn,uint32 Ssci,const Mka_SakKeyPtrType* KeysPtr,boolean Active)",
                "comments": "Request the Ethernet Switch Driver to create a Transmission Secure Association in the provided port. The Short Secure Channel Identifier is included to support XPN configurations. Tags: atp. Status = DRAFT"
            },
            "133": {
                "name": "EthIf_MacSecAddTxSa",
                "type": "Std_ReturnType EthIf_MacSecAddTxSa (uint8 CtrlIdx,uint8 An,uint64 NextPn,uint32 Ssci,const Mka_SakKeyPtrType* KeysPtr,boolean Active)",
                "comments": "Request the Ethernet Interface (MACsec per SW) or the Ethernet Transceiver Driver to create a Transmission Secure Association in the Transceiver. The Short Secure Channel Identifier is included to support XPN configurations. Tags: atp. Status = DRAFT"
            },
            "113": {
                "name": "EthIf_SwitchMacSecAddTxSaNotification",
                "type": "void EthIf_SwitchMacSecAddTxSaNotification (const EthSwt_MgmtInfoType* MgmtInfoPtr)",
                "comments": "Callback to notify that Eth If_Switch MacSec Add Tx Saf finished. Tags: atp. Status = DRAFT"
            },
            "114": {
                "name": "EthIf_MacSecAddTxSaNotification",
                "type": "void EthIf_MacSecAddTxSaNotification (uint8 CtrlIdx)",
                "comments": "Callback to notify that Eth If_MacSec Add Tx Sa finished. Tags: atp. Status = DRAFT"
            },
            "115": {
                "name": "EthIf_SwitchMacSecUpdateTxSa",
                "type": "Std_ReturnType EthIf_SwitchMacSecUpdateTxSa (const EthSwt_MgmtInfoType* MgmtInfoPtr,uint8 An,uint64 NextPn,boolean Active)",
                "comments": "Request the Ethernet Switch Driver to update the Transmission Secure Association with the given Packet Number. The Active parameter is included to change the specified AN status. Tags: atp.Status = DRAFT"
            },
            "132": {
                "name": "EthIf_MacSecUpdateTxSa",
                "type": "Std_ReturnType EthIf_MacSecUpdateTxSa (uint8 CtrlIdx,uint8 An,uint64 NextPn,boolean Active)",
                "comments": "Request the Ethernet Interface (MACsec per SW) or the Ethernet Transceiver Driver to update the Transmission Secure Association with the given Packet Number. The Active parameter is included to change the specified AN status. Tags: atp.Status=DRAFT"
            },
            "116": {
                "name": "EthIf_SwitchMacSecDeleteTxSa",
                "type": "Std_ReturnType EthIf_SwitchMacSecDeleteTxSa (const EthSwt_MgmtInfoType* MgmtInfoPtr,uint8 An)",
                "comments": "Request the Ethernet Switch Driver to remove the Transmission Secure Association identified by the provided Association Number. Tags: atp. Status = DRAFT"
            },
            "22": {
                "name": "EthIf_MacSecDeleteTxSa",
                "type": "Std_ReturnType EthIf_MacSecDeleteTxSa (uint8 CtrlIdx,uint8 An)",
                "comments": "Request the Ethernet Interface (MACsec per SW) or the Ethernet Transceiver Driver to remove the Transmission Secure Association identified by the provided Association Number. Tags: atp. Status = DRAFT"
            },
            "117": {
                "name": "EthIf_SwitchMacSecAddRxSa",
                "type": "Std_ReturnType EthIf_SwitchMacSecAddRxSa (const EthSwt_MgmtInfoType* MgmtInfoPtr,uint8 An,uint64 LowestPn,uint32 Ssci,const Mka_SakKeyPtrType* KeysPtr,boolean Active)",
                "comments": "Request the Ethernet Switch Driver to create a Reception Secure Association in the provided Port. The Short Secure Channel Identifier is included to support XPN configurations. Tags: atp. Status = DRAFT"
            },
            "131": {
                "name": "EthIf_MacSecAddRxSa",
                "type": "Std_ReturnType EthIf_MacSecAddRxSa (uint8 CtrlIdx,uint8 An,uint64 LowestPn,uint32 Ssci,const Mka_SakKeyPtrType* KeysPtr,boolean Active)",
                "comments": "Request the Ethernet Interface (MACsec per SW) or the Ethernet Transceiver Driver to create a Reception Secure Association in the Transceiver. The Short Secure Channel Identifier is included to support XPN configurations. Tags: atp. Status = DRAFT"
            },
            "118": {
                "name": "EthIf_SwitchMacSecAddRxSaNotification",
                "type": "void EthIf_SwitchMacSecAddRxSaNotification (const EthSwt_MgmtInfoType* MgmtInfoPtr)",
                "comments": "Callback to notify that Eth If_Switch Mac Sec Add Rx Sa finished. Tags: atp. Status = DRAFT"
            },
            "119": {
                "name": "EthIf_MacSecAddRxSaNotification",
                "type": "void EthIf_MacSecAddRxSaNotification (uint8 CtrlIdx)",
                "comments": "Callback to notify that EthIf_MacSecAddRxSa finished. Tags: atp. Status = DRAFT"
            },
            "120": {
                "name": "EthIf_SwitchMacSecUpdateRxSa",
                "type": "Std_ReturnType EthIf_SwitchMacSecUpdateRxSa (const EthSwt_MgmtInfoType* MgmtInfoPtr,uint8 An,uint64 LowestPn,boolean Active)",
                "comments": "Request the Ethernet Switch Driver to update the Reception Secure Association with the given Packet Number. The Active parameter is included to change the specified AN status. Tags: atp.Status = DRAFT"
            },
            "130": {
                "name": "EthIf_MacSecUpdateRxSa",
                "type": "Std_ReturnType EthIf_MacSecUpdateRxSa (uint8 CtrlIdx,uint8 An,uint64 LowestPn,boolean Active)",
                "comments": "Request the Ethernet Interface (MACsec per SW) or the Ethernet Transceiver Driver to update the Reception Secure Association with the given Packet Number. The Active parameter is included to change the specified AN status. Tags: atp.Status=DRAFT"
            },
            "121": {
                "name": "EthIf_SwitchMacSecDeleteRxSa",
                "type": "Std_ReturnType EthIf_SwitchMacSecDeleteRxSa (const EthSwt_MgmtInfoType* MgmtInfoPtr,uint8 An)",
                "comments": "Request the Ethernet Switch Driver to remove the Reception Secure Association identified by the provided Association Number. Tags: atp. Status = DRAFT"
            },
            "129": {
                "name": "EthIf_MacSecDeleteRxSa",
                "type": "Std_ReturnType EthIf_MacSecDeleteRxSa (uint8 CtrlIdx,uint8 An)",
                "comments": "Request the Ethernet Interface (MACsec per SW) or the Ethernet Transceiver Driver to remove the Reception Secure Association identified by the provided Association Number. Tags: atp. Status = DRAFT"
            },
            "122": {
                "name": "EthIf_SwitchMacSecGetTxSaNextPn",
                "type": "Std_ReturnType EthIf_SwitchMacSecGetTxSaNextPn (const EthSwt_MgmtInfoType* MgmtInfoPtr,uint8 An,uint64* NextPnPtr)",
                "comments": "Request the Ethernet Switch Driver to return the Packet Number that is used for the next packet in the given Transmission Secure Association. Tags: atp. Status = DRAFT"
            },
            "144": {
                "name": "EthIf_MacSecGetTxSaNextPn",
                "type": "Std_ReturnType EthIf_MacSecGetTxSaNextPn (uint8 CtrlIdx,uint8 An,uint64* NextPnPtr)",
                "comments": "Request the Ethernet Interface (MACsec per SW) or the Ethernet Transceiver Driver to return the Packet Number that is used for the next packet in the given Transmission Secure Association. Tags: atp. Status = DRAFT"
            },
            "123": {
                "name": "EthIf_SwitchMacSecGetMacSecStats",
                "type": "Std_ReturnType EthIf_SwitchMacSecGetMacSecStats (const EthSwt_MgmtInfoType* MgmtInfoPtr)",
                "comments": "Request the Ethernet switch Driver to provide MACsec statistics. The result is returned through EthIf_SwitchMacSecGetMacSecStatsNotification. Tags: atp.Status = DRAFT"
            },
            "137": {
                "name": "EthIf_MacSecGetMacSecStats",
                "type": "Std_ReturnType EthIf_MacSecGetMacSecStats (uint8 CtrlIdx)",
                "comments": "Request the Ethernet Interface (MACsec per SW) or the Ethernet Transceiver Driver to provide MACsec statistics. The result is returned through EthIf_MacSecGetMacSecStatsNotification Tags: atp.Status = DRAFT"
            },
            "124": {
                "name": "EthIf_SwitchMacSecGetMacSecStatsNotification",
                "type": "void EthIf_SwitchMacSecGetMacSecStatsNotification (const EthSwt_MgmtInfoType* MgmtInfoPtr,const Mka_Stats_SecYType* MacSecStatsPtr)",
                "comments": "Callback to notify that Eth If Switch Mac Sec Get Mac Sec Stats finished and provide the requested statistics. Tags: atp.Status = DRAFT"
            },
            "125": {
                "name": "EthIf_MacSecGetMacSecStatsNotification",
                "type": "void EthIf_MacSecGetMacSecStatsNotification (uint8 CtrlIdx,const Mka_Stats_SecYType* MacSecStatsPtr)",
                "comments": "Callback to notify that Eth If_MacSecGetMacSecStats finished and provide the requested statistics. Tags: atp. Status = DRAFT"
            },
            "126": {
                "name": "EthIf_SwitchMacSecOperational",
                "type": "Std_ReturnType EthIf_SwitchMacSecOperational (const EthSwt_MgmtInfoType* MgmtInfoPtr,boolean MacSecOperational)",
                "comments": "To inform Eth if that MacSec is operational and that EthSM can be notified. (Switch case) Tags: atp.Status = DRAFT"
            },
            "28": {
                "name": "EthIf_MacSecOperational",
                "type": "Std_ReturnType EthIf_MacSecOperational (uint8 CtrlIdx,boolean MacSecOperational)",
                "comments": "To inform Eth If that MacSec is operational and that Eth SM can be informed. (Ethernet Interface (MACsec per SW) or the Ethernet Transceiver Driver) Tags: atp.Status = DRAFT"
            },
            "127": {
                "name": "EthIf_SwitchMacSecSetControlledPortEnabled",
                "type": "Std_ReturnType EthIf_SwitchMacSecSetControlledPortEnabled (const EthSwt_MgmtInfoType* MgmtInfoPtr,boolean ControlledPortEnabled)",
                "comments": "Requests to set the Controlled Port enabled parameter of a PAE. Tags: atp. Status = DRAFT"
            },
            "128": {
                "name": "EthIf_MacSecSetControlledPortEnabled",
                "type": "Std_ReturnType EthIf_MacSecSetControlledPortEnabled (uint8 CtrlIdx,boolean ControlledPortEnabled)",
                "comments": "Requests to set the Controlled Port enabled parameter of a PAE. Tags: atp. Status = DRAFT"
            },
            "145": {
                "name": "EthIf_GetStreamHandleIdxStatistics",
                "type": "void EthIf_GetStreamHandleIdxStatistics (uint8 SwitchIdx)",
                "comments": "This function is called by the Firewall module to get bucket counter statistics from the switch. Tags: atp. Status = draft"
            },
            "146": {
                "name": "EthIf_SetStreamHandleIdxConfiguration",
                "type": "void EthIf_SetStreamHandleIdxConfiguration (uint8 SwitchIdx,uint8 StreamHandleIdxPtr,boolean StreamHandleIdxActivityStatus)",
                "comments": "This function is called by the Firewall module to control the activity status of a Stream Handle Idx in the switch. Tags: atp.Status = draft"
            },
            "16": {
                "name": "EthIf_RxIndication",
                "type": "void EthIf_RxIndication (uint8 CtrlIdx,Eth_FrameType FrameType,boolean IsBroadcast,const uint8* PhysAddrPtr,const Eth_DataType* DataPtr,uint16 DataLen,TimeTupleType* IngressTimeTuplePtr,Eth_BufIdxType RxHandleId)",
                "comments": "Receiving indication of an Ethernet frame which was received by the indexed controller."
            },
            "17": {
                "name": "EthIf_TxConfirmation",
                "type": "void EthIf_TxConfirmation (uint8 CtrlIdx,Eth_BufIdxType BufIdx,Std_ReturnType Result)",
                "comments": "Confirms frame transmission by the indexed controller"
            },
            "14": {
                "name": "EthIf_CtrlModeIndication",
                "type": "void EthIf_CtrlModeIndication (uint8 CtrlIdx,Eth_ModeType CtrlMode)",
                "comments": "Called asynchronously when mode has been read out. Triggered by previous <EthDrv>_SetControllerMode call. Can directly be called within the trigger functions."
            },
            "15": {
                "name": "EthIf_TrcvModeIndication",
                "type": "void EthIf_TrcvModeIndication (uint8 TrcvIdx,Eth_ModeType TrcvMode)",
                "comments": "Called asynchronously when a mode change has been read out. If the function is triggered by previous call of EthTrcv_SetTransceiverMode it can directly be called within the trigger function."
            },
            "70": {
                "name": "EthIf_SwitchPortModeIndication",
                "type": "void EthIf_SwitchPortModeIndication (uint8 SwitchIdx,uint8 SwitchPortIdx,Eth_ModeType PortMode)",
                "comments": "The Eth If shall determine the expected notifications based on the Eth Swt Port configuration. In case the Eth Swt Port references an Eth Trcv, the Eth If expects a notification from the Eth Trcv via API EthIf_TrcvModeIndication(). Otherwise, the Eth If expects a notification from the Eth Swt via API EthIf_SwitchPortModeIndication()."
            },
            "104": {
                "name": "EthIf_SleepIndication",
                "type": "void EthIf_SleepIndication (uint8 TrcvIdx)",
                "comments": "This API is called by the corresponding EthTrcv, if a sleep indication was detected on the network. This could be used e.g. for Ethernet hardware which is compliant to the OATC10. In this case the Ethernet hardware (PHY) detects a Sleep indication which was triggered by a Sleep request of the connected link partner. Tags: atp.Status = draft"
            },
            "147": {
                "name": "EthIf_StreamHandleIdxConfiguration",
                "type": "void EthIf_StreamHandleIdxConfiguration (uint8 SwitchIdx,uint8 StreamHandleIdxPtr,boolean StreamHandleIdxActivityStatus)",
                "comments": "The function is called by the EthSwtDrv once it has successfully set the StreamHandleIdx activity status in the switch. Tags: atp.Status = draft"
            },
            "148": {
                "name": "EthIf_StreamHandleIdxStatistics",
                "type": "void EthIf_StreamHandleIdxStatistics (uint8 SwitchIdx,uint8 NumberOfBuckets,const uint8* StreamHandleIdxStatisticsPtr)",
                "comments": "The function is called by the EthSwtDrv once it has successfully retrieved the bucket counter values from the switch. Tags: atp. Status = draft."
            },
            "32": {
                "name": "EthIf_MainFunctionRx",
                "type": "void EthIf_MainFunctionRx (void)",
                "comments": "The function checks for new received frames and issues reception indications in polling mode."
            },
            "66": {
                "name": "EthIf_MainFunctionRx_PriorityProcessingShortName",
                "type": "void EthIf_MainFunctionRx_PriorityProcessing ShortName (void)",
                "comments": "The function checks for new received frames at the related Ethernet controller or CanXL controller and reception queue by calling <EthDrv>_Receive() with the respective FifoIdx. EthIf_MainFunctionRx shall receive frames from all FIFOs that are not assigned for processing via EthIfPhysCtrlRxMainFunctionPriorityProcessing. Tags: atp. Status = obsolete."
            },
            "156": {
                "name": "EthIf_MainFunctionRx_IngressQueueProcessingShortName",
                "type": "void EthIf_MainFunctionRx_IngressQueueProcessing ShortName (void)",
                "comments": "The function checks for new received Ethernet frames at the related Ethernet controller and the related ingress queue referenced via EthIfPhysCtrlRxIngressQueueRef, or at the related CanXL controller and the related ingress FIFO referenced via EthIfCanXLCtrlRxIngressFifoRef. In case of Ethernet controller calling Eth_Receive() with the respective QueueIdx. In case of CanXL controller calling CanXL_Receive() with the respective FifoIdx. Tags: atp. Status = draft"
            },
            "33": {
                "name": "EthIf_MainFunctionTx",
                "type": "void EthIf_MainFunctionTx (void)",
                "comments": "The function issues transmission confirmations in polling mode. It checks also for transceiver state changes."
            },
            "5": {
                "name": "EthIf_MainFunctionState",
                "type": "void EthIf_MainFunctionState (void)",
                "comments": "The function is polling different communication hardware (Ethernet transceiver, Ethernet switch ports) related information, e.g. link state, signal quality."
            }
        }
    },
    "143": {
        "name": "Ethernet State Manager",
        "short_name": "EthSM",
        "functions": {
            "7": {
                "name": "EthSM_Init",
                "type": "void EthSM_Init (void)",
                "comments": "This function initializes the EthSM."
            },
            "2": {
                "name": "EthSM_GetVersionInfo",
                "type": "void EthSM_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "This service puts out the version information of this module."
            },
            "5": {
                "name": "EthSM_RequestComMode",
                "type": "Std_ReturnType EthSM_RequestComMode (NetworkHandleType NetworkHandle,ComM_ModeType ComM_Mode)",
                "comments": "Handles the communication mode and sets the Ethernet network active or passive."
            },
            "4": {
                "name": "EthSM_GetCurrentComMode",
                "type": "Std_ReturnType EthSM_GetCurrentComMode (NetworkHandleType NetworkHandle,ComM_ModeType* ComM_ModePtr)",
                "comments": "This service shall put out the current communication mode of an Ethernet network."
            },
            "9": {
                "name": "EthSM_CtrlModeIndication",
                "type": "void EthSM_CtrlModeIndication (uint8 CtrlIdx,Eth_ModeType CtrlMode)",
                "comments": "Called when mode has been read out. Either triggered by previous EthIf_GetControllerMode or by EthIf_SetControllerMode call. Can directly be called within the trigger functions."
            },
            "6": {
                "name": "EthSM_TrcvLinkStateChg",
                "type": "void EthSM_TrcvLinkStateChg (uint8 CtrlIdx,EthTrcv_LinkStateType TransceiverLinkState)",
                "comments": "This service is called by the Ethernet Interface to report a transceiver link state change."
            },
            "8": {
                "name": "EthSM_TcpIpModeIndication",
                "type": "void EthSM_TcpIpModeIndication (uint8 CtrlIdx,TcpIp_StateType TcpIpState)",
                "comments": "This service is called by the Tcp Ip to report the actual Tcp Ip state (e.g. online, offline)."
            },
            "10": {
                "name": "EthSM_SleepIndication",
                "type": "void EthSM_SleepIndication (uint8 Ctrl_Idx)",
                "comments": "This API is called by the Eth If and indicates that a sleep indication was detected on the network. This API is only called if the ECU is acting as a passive communication slave on the corresponding communication channel (the referenced Eth Trcvof the affected Eth If Transceiver has set Eth Trcv Act As Slave Passive Enabled to TRUE). This could be used e.g. for Ethernet hardware which is compliant to the OATC10. In this case, the Ethernet hardware detects a Sleep Indication which was triggered by a Sleep Request of the connected link partner. Tags: atp.Status=draft"
            },
            "1": {
                "name": "EthSM_MainFunction",
                "type": "void EthSM_MainFunction (void)",
                "comments": "CyclicMainFunction which is called from the Scheduler."
            }
        }
    },
    "89": {
        "name": "Ethernet Switch Driver",
        "short_name": "EthSwt",
        "functions": {
            "1": {
                "name": "EthSwt_Init",
                "type": "void EthSwt_Init (const EthSwt_ConfigType* CfgPtr)",
                "comments": "Initialize the Ethernet Switch Driver"
            },
            "3": {
                "name": "EthSwt_SetSwitchPortMode",
                "type": "Std_ReturnType EthSwt_SetSwitchPortMode (uint8 SwitchIdx,uint8 SwitchPortIdx,Eth_ModeType PortMode)",
                "comments": "Enables/disables the indexed switch port."
            },
            "4": {
                "name": "EthSwt_GetSwitchPortMode",
                "type": "Std_ReturnType EthSwt_GetSwitchPortMode (uint8 SwitchIdx,uint8 SwitchPortIdx,Eth_ModeType* SwitchModePtr)",
                "comments": "Obtains the mode of the indexed switch port"
            },
            "5": {
                "name": "EthSwt_StartSwitchPortAutoNegotiation",
                "type": "Std_ReturnType EthSwt_StartSwitchPortAutoNegotiation (uint8 SwitchIdx,uint8 SwitchPortIdx)",
                "comments": "Starts the auto-negotiation of the indexed switch port."
            },
            "76": {
                "name": "EthSwt_CheckWakeup",
                "type": "Std_ReturnType EthSwt_CheckWakeup (uint8 SwitchIdx)",
                "comments": "API is called by EthIf. The Ethernet switch driver requests to check for wake-up at all Ethernet switch ports which reference an EthTrcv. For those Ethernet switch ports, the call is forwarded to the referenced EthTrcv. The function could be called in the context of an interrupt service routine or on task level. Note: Interrupt service routine consuming time has to be considered, since all EthSwtPorts of the maintained Ethernet switches have to be checked. Therefore, the call is forwarded to the referred EthTrcv where the request to check for wake-up is stored. The check of the Ethernet hardware is done asynchronously in the context of the EthTrcv_MainFunction."
            },
            "75": {
                "name": "EthSwt_GetSwitchPortWakeupReason",
                "type": "Std_ReturnType EthSwt_GetSwitchPortWakeupReason (uint8 SwitchIdx,uint8 SwitchPortIdx,EthTrcv_WakeupReasonType Reason)",
                "comments": "This function obtains the wakeup reasons of the indexed Ethernet switch port by calling EthTrcv_GetBusWuReason(...) of the referenced EthTrcv."
            },
            "6": {
                "name": "EthSwt_GetLinkState",
                "type": "Std_ReturnType EthSwt_GetLinkState (uint8 SwitchIdx,uint8 SwitchPortIdx,EthTrcv_LinkStateType* LinkStatePtr)",
                "comments": "Obtains the link state of the indexed switch port"
            },
            "7": {
                "name": "EthSwt_GetBaudRate",
                "type": "Std_ReturnType EthSwt_GetBaudRate (uint8 SwitchIdx,uint8 SwitchPortIdx,EthTrcv_BaudRateType* BaudRatePtr)",
                "comments": "Obtains the baud rate of the indexed switch port."
            },
            "8": {
                "name": "EthSwt_GetDuplexMode",
                "type": "Std_ReturnType EthSwt_GetDuplexMode (uint8 SwitchIdx,uint8 SwitchPortIdx,EthTrcv_DuplexModeType* DuplexModePtr)",
                "comments": "Obtains the duplex mode of the indexed switch port."
            },
            "9": {
                "name": "EthSwt_GetPortMacAddr",
                "type": "Std_ReturnType EthSwt_GetPortMacAddr (uint8 SwitchIdx,const uint8* MacAddrPtr,uint8* PortIdxPtr)",
                "comments": "Obtains the port over which this MAC address at the indexed switch can be reached. The result might be used for a DHCP server which will need the port/MAC resolution. If for the PortIdxPtr the maximal possible value (255) is returned the given MAC address cannot be reached via a port of this switch. If multiple ports were found the API returns E_NOT_OK."
            },
            "10": {
                "name": "EthSwt_GetArlTable",
                "type": "Std_ReturnType EthSwt_GetArlTable (uint8 switchIdx,uint16* numberOfElements,Eth_MacVlanType* arlTableListPointer)",
                "comments": "Obtains the address resolution table of a switch and copies the list into a user-provided buffer. The function will copy all or number of elements into the output list. If input value of number of elements is 0, the function will not copy any data but only return the number of valid entries in the cache. arlTableListPointer may be NULL_PTR in this case."
            },
            "12": {
                "name": "EthSwt_GetCounterValues",
                "type": "Std_ReturnType EthSwt_GetCounterValues (uint8 SwitchIdx,uint8 SwitchPortIdx,Eth_CounterType* CounterPtr)",
                "comments": "Reads a list with drop counter values of the corresponding port of the switch. The meaning of these values is described at Eth_CounterType."
            },
            "13": {
                "name": "EthSwt_GetRxStats",
                "type": "Std_ReturnType EthSwt_GetRxStats (uint8 SwitchIdx,uint8 SwitchPortIdx,Eth_RxStatsType* RxStats)",
                "comments": "Returns a list of statistic counters defined with Eth_RxTatsType. The majority of these counters are derived from the IETF RFC 2819."
            },
            "32": {
                "name": "EthSwt_GetTxStats",
                "type": "Std_ReturnType EthSwt_GetTxStats (uint8 SwitchIdx,uint8 SwitchPortIdx,Eth_TxStatsType* TxStats)",
                "comments": "Returns the list of Transmission Statistics out of IETF RFC 1213 defined with Eth_TxStatsType, where the maximal possible value shall denote an invalid value, e.g. this counter is not available."
            },
            "33": {
                "name": "EthSwt_GetTxErrorCounterValues",
                "type": "Std_ReturnType EthSwt_GetTxErrorCounterValues (uint8 SwitchIdx,uint8 SwitchPortIdx,Eth_TxErrorCounterValuesType* TxStats)",
                "comments": "Returns the list of Transmission Error Counters out of IETF RFC 1213 and RFC 1643 defined with Eth_TxErrorCounterValuesType, where the maximal possible value shall denote an invalid value, e.g. this counter is not available."
            },
            "14": {
                "name": "EthSwt_GetSwitchReg",
                "type": "Std_ReturnType EthSwt_GetSwitchReg (uint8 SwitchIdx,uint32 page,uint32 register,uint32* registerContent)",
                "comments": "Generic API for reading the content of a switch register"
            },
            "15": {
                "name": "EthSwt_SetSwitchReg",
                "type": "Std_ReturnType EthSwt_SetSwitchReg (uint8 SwitchIdx,uint32 page,uint32 register,uint32 registerContent)",
                "comments": "Generic API for writing the content of a switch register"
            },
            "16": {
                "name": "EthSwt_ReadTrcvRegister",
                "type": "Std_ReturnType EthSwt_ReadTrcvRegister (uint8 SwitchIdx,uint8 SwitchPortIdx,uint8 RegIdx,uint16* RegValPtr)",
                "comments": "Generic API for reading the content of a transceiver register"
            },
            "17": {
                "name": "EthSwt_WriteTrcvRegister",
                "type": "Std_ReturnType EthSwt_WriteTrcvRegister (uint8 SwitchIdx,uint8 SwitchPortIdx,uint8 RegIdx,uint16 RegVal)",
                "comments": "Generic API for writing the content of a transceiver register"
            },
            "18": {
                "name": "EthSwt_EnableVlan",
                "type": "Std_ReturnType EthSwt_EnableVlan (uint8 SwitchIdx,uint8 SwitchPortIdx,uint16 VlanId,boolean Enable)",
                "comments": "Enables or disables a pre-configured VLAN at a certain port of a switch."
            },
            "19": {
                "name": "EthSwt_StoreConfiguration",
                "type": "Std_ReturnType EthSwt_StoreConfiguration (uint8 SwitchIdx)",
                "comments": "Trigger the storage / reset of the configuration of the learned MAC / Port tables of a switch in a persistent manner and will be used by e.g. CDD."
            },
            "20": {
                "name": "EthSwt_ResetConfiguration",
                "type": "Std_ReturnType EthSwt_ResetConfiguration (uint8 SwitchIdx)",
                "comments": "The function shall request to reset and store the configuration of the learned MAC/Port tables of an Ethernet switch in a persistent manner. This could be used by e.g. a CDD."
            },
            "21": {
                "name": "EthSwt_SetMacLearningMode",
                "type": "Std_ReturnType EthSwt_SetMacLearningMode (uint8 SwitchIdx,uint8 SwitchPortIdx,EthSwt_MacLearningType MacLearningMode)",
                "comments": "Sets the MAC learning mode in one of the three modes: 1.) HW learning enabled, 2.) Hardware learning disabled, 3.) Software learning enabled. Note: This feature is hardware dependent, i.e. the switch hardware needs to support the different learning modes."
            },
            "22": {
                "name": "EthSwt_GetMacLearningMode",
                "type": "Std_ReturnType EthSwt_GetMacLearningMode (uint8 SwitchIdx,uint8 SwitchPortIdx,EthSwt_MacLearningType* MacLearningMode)",
                "comments": "Returns the MAC learning mode, i.e. 1.) HW learning enabled, 2.) Hardware learning disabled, 3.) Software learning enabled. Note: This feature is hardware dependent, i.e. the switch hardware needs to support the different learning modes."
            },
            "23": {
                "name": "EthSwt_NvmSingleBlockCallback",
                "type": "Std_ReturnType EthSwt_NvmSingleBlockCallback (NvM_BlockRequestType BlockRequest,NvM_RequestResultType JobResult)",
                "comments": "Function will be called by the NVRAM Manager after the switch configuration has been stored or reset."
            },
            "24": {
                "name": "EthSwt_GetVersionInfo",
                "type": "void EthSwt_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information of this module."
            },
            "35": {
                "name": "EthSwt_EthRxProcessFrame",
                "type": "Std_ReturnType EthSwt_EthRxProcessFrame (uint8 CtrlIdx,Eth_BufIdxType BufIdx,uint8** DataPtr,uint16* LengthPtr,boolean* IsMgmtFrameOnlyPtr)",
                "comments": "Function inspects the Ethernet frame passed by the data pointer for management information and stores it for later use in EthSwt_EthRxFinishedIndication()."
            },
            "36": {
                "name": "EthSwt_EthRxFinishedIndication",
                "type": "Std_ReturnType EthSwt_EthRxFinishedIndication (uint8 CtrlIdx,Eth_BufIdxType BufIdx)",
                "comments": "Indication for a finished receive process for a specific Ethernet frame, which results in providing the management information retrieved during EthSwt_EthRxProcessFrame()."
            },
            "37": {
                "name": "EthSwt_EthTxPrepareFrame",
                "type": "Std_ReturnType EthSwt_EthTxPrepareFrame (uint8 CtrlIdx,Eth_BufIdxType BufIdx,uint8** DataPtr,uint16* LengthPtr)",
                "comments": "Prepares the Ethernet frame for common Ethernet communication (frame shall be handled by switch according to the common address resolution behavior) and stores the information for processing of EthSwt_EthTxFinishedIndication()."
            },
            "38": {
                "name": "EthSwt_EthTxAdaptBufferLength",
                "type": "void EthSwt_EthTxAdaptBufferLength (uint16* LengthPtr)",
                "comments": "Modify the buffer length to be able to insert management information."
            },
            "39": {
                "name": "EthSwt_SetMgmtInfo",
                "type": "Std_ReturnType EthSwt_SetMgmtInfo (uint8 CtrlIdx,Eth_BufIdxType BufIdx,const EthSwt_MgmtInfoType* MgmtInfoPtr)",
                "comments": "Extends the Ethernet frame prepared previously by EthSwt_EthTxPrepareFrame() with the management information to achieve transmission only on specific ports."
            },
            "40": {
                "name": "EthSwt_EthTxProcessFrame",
                "type": "Std_ReturnType EthSwt_EthTxProcessFrame (uint8 CtrlIdx,Eth_BufIdxType BufIdx,uint8** DataPtr,uint16* LengthPtr)",
                "comments": "Function inserts management information into the Ethernet frame."
            },
            "41": {
                "name": "EthSwt_EthTxFinishedIndication",
                "type": "Std_ReturnType EthSwt_EthTxFinishedIndication (uint8 CtrlIdx,Eth_BufIdxType BufIdx)",
                "comments": "Indication for a finished transmit process for a specific Ethernet frame."
            },
            "64": {
                "name": "EthSwt_PortEnableTimeStamp",
                "type": "Std_ReturnType EthSwt_PortEnableTimeStamp (uint8 CtrlIdx,Eth_BufIdxType BufIdx,EthSwt_MgmtInfoType* MgmtInfoPtr)",
                "comments": "Activates egress timestamping on a dedicated message object on a dedicated port of a Switch if EthSwtPortTimeStampSupport is set to TRUE for this port. The selective activation of dedicated message objects for timestamping reduces the number of notification calls only to the required calls. Some HW does store once the egress timestamp marker and some HW needs it always before transmission. There will be no disabled functionality, due to the fact that the message type is always \"timestamped\" by network design."
            },
            "49": {
                "name": "EthSwt_VerifyConfig",
                "type": "Std_ReturnType EthSwt_VerifyConfig (uint8 SwitchIdx,boolean* Result)",
                "comments": "Verifies the Switch Configuration depending on the HW-Architecture, HW-capability and the intended accuracy of this verification."
            },
            "50": {
                "name": "EthSwt_SetForwardingMode",
                "type": "Std_ReturnType EthSwt_SetForwardingMode (uint8 SwitchIdx,boolean mode)",
                "comments": "Configures switch to start or stop forwarding for all ports. This API call may be used during switch configuration verification."
            },
            "51": {
                "name": "EthSwt_GetPortSignalQuality",
                "type": "Std_ReturnType EthSwt_GetPortSignalQuality (uint8 SwitchIdx,uint8 PortIdx,uint32* SignalQualityPtr)",
                "comments": "The function retrieves the signal quality of the link of the indexed Ethernet switch port. If no transceiver is referenced the signal quality shall be set to 0xFFFFFFFF."
            },
            "52": {
                "name": "EthSwt_GetPortIdentifier",
                "type": "Std_ReturnType EthSwt_GetPortIdentifier (uint8 SwitchIdx,uint8 PortIdx,uint32* OrgUniqueIdPtr,uint8* ModelNrPtr,uint8* RevisionNrPtr)",
                "comments": "This function retrieves the OUI (24 bit) of the indexed Ethernet switch port."
            },
            "53": {
                "name": "EthSwt_GetSwitchIdentifier",
                "type": "Std_ReturnType EthSwt_GetSwitchIdentifier (uint8 SwitchIdx,uint32* OrgUniqueIdPtr)",
                "comments": "Obtain the Organizationally Unique Identifier that is given by the IEEE of the indexed Ethernet switch. This function shall provide the OUI of Ethernet switch. The OUI has a size of 24 bit. If an Ethernet switch can provide the OUI, the 8 most significant bits of the OUI shall be set to 0x00xxxxxx. If an Ethernet switch cannot provide the OUI, the 8 most significant bits of the OUI shall be set to 0xFFxxxxxx."
            },
            "54": {
                "name": "EthSwt_WritePortMirrorConfiguration",
                "type": "Std_ReturnType EthSwt_WritePortMirrorConfiguration (uint8 MirroredSwitchIdx,const EthSwt_PortMirrorCfgType* PortMirrorConfigurationPtr)",
                "comments": "Store the given port mirror configuration in a shadow buffer in the Ethernet switch driver for the given Mirrored Switch Idx."
            },
            "55": {
                "name": "EthSwt_ReadPortMirrorConfiguration",
                "type": "Std_ReturnType EthSwt_ReadPortMirrorConfiguration (uint8 MirroredSwitchIdx,EthSwt_PortMirrorCfgType* PortMirrorConfigurationPtr)",
                "comments": "Obtain the port mirror configuration of the given Ethernet switch."
            },
            "74": {
                "name": "EthSwt_DeletePortMirrorConfiguration",
                "type": "Std_ReturnType EthSwt_DeletePortMirrorConfiguration (uint8 MirroredSwitchIdx)",
                "comments": "Delete the stored port mirror configuration of the given Mirrored Switch Index. If no port mirror configuration was found for the given Mirrored Switch Index, the return value shall be E_OK."
            },
            "56": {
                "name": "EthSwt_GetPortMirrorState",
                "type": "Std_ReturnType EthSwt_GetPortMirrorState (uint8 SwitchIdx,uint8 PortIdx,EthSwt_PortMirrorStateType* PortMirrorStatePtr)",
                "comments": "Obtain the current status of the port mirroring for the indexed Ethernet switch port."
            },
            "57": {
                "name": "EthSwt_SetPortMirrorState",
                "type": "Std_ReturnType EthSwt_SetPortMirrorState (uint8 MirroredSwitchIdx,EthSwt_PortMirrorStateType PortMirrorState)",
                "comments": "Request to set the given port mirroring state of the port mirror configuration for the given Ethernet switch."
            },
            "58": {
                "name": "EthSwt_SetPortTestMode",
                "type": "Std_ReturnType EthSwt_SetPortTestMode (uint8 SwitchIdx,uint8 PortIdx,EthTrcv_PhyTestModeType Mode)",
                "comments": "Activates a given test mode of the indexed Ethernet switch port."
            },
            "59": {
                "name": "EthSwt_SetPortLoopbackMode",
                "type": "Std_ReturnType EthSwt_SetPortLoopbackMode (uint8 SwitchIdx,uint8 PortIdx,EthTrcv_PhyLoopbackModeType Mode)",
                "comments": "Activates a given test loop-back mode of the indexed Ethernet switch port."
            },
            "60": {
                "name": "EthSwt_SetPortTxMode",
                "type": "Std_ReturnType EthSwt_SetPortTxMode (uint8 SwitchIdx,uint8 PortIdx,EthTrcv_PhyTxModeType Mode)",
                "comments": "Activates a given transmission mode of the indexed Ethernet switch port."
            },
            "69": {
                "name": "EthSwt_RunPortCableDiagnostic",
                "type": "Std_ReturnType EthSwt_RunPortCableDiagnostic (uint8 SwitchIdxIdx,uint8 PortIdx)",
                "comments": "Trigger the cable diagnostics of the given Ethernet Switch port (PortIdx) by calling EthTrcv_RunCableDiagnostic of the referenced Ethernet transceiver."
            },
            "63": {
                "name": "EthSwt_GetPortCableDiagnosticsResult",
                "type": "Std_ReturnType EthSwt_GetPortCableDiagnosticsResult (uint8 SwitchIdx,uint8 PortIdx,EthTrcv_CableDiagResultType* ResultPtr)",
                "comments": "Retrieve the cable diagnostics result of the indexed Ethernet switch port respectively the referenced Ethernet Transceiver Driver."
            },
            "65": {
                "name": "EthSwt_GetCfgDataRaw",
                "type": "Std_ReturnType EthSwt_GetCfgDataRaw (uint8 SwitchIdx,uint32 Offset,uint16 Length,uint8* BufferPtr)",
                "comments": "Retrieve the data in memory of the indexed Ethernet switch in variable length."
            },
            "66": {
                "name": "EthSwt_GetCfgDataInfo",
                "type": "Std_ReturnType EthSwt_GetCfgDataInfo (uint8 SwitchIdx,uint32* DataSizePtr,uint32* DataAdressPtr)",
                "comments": "Retrieve the total size of data and the memory start address of the indexed Ethernet Switch."
            },
            "73": {
                "name": "EthSwt_PortLinkStateRequest",
                "type": "Std_ReturnType EthSwt_PortLinkStateRequest (uint8 SwitchIdx,uint8 PortIdx,EthTrcv_LinkStateType PortLinkState)",
                "comments": "Request a link state by calling EthTrcv_TransceiverLinkStateRequest with the TrcvIdx of the Ethernet transceiver which is referenced by the Ethernet Switch port (PortIdx)."
            },
            "72": {
                "name": "EthSwt_GetMaxFIFOBufferFillLevel",
                "type": "Std_ReturnType EthSwt_GetMaxFIFOBufferFillLevel (uint8 SwitchIdx,uint8 SwitchPortIdx,uint8 SwitchPortEgressFifoIdx,uint32* SwitchPortEgressFifoBufferLevelPtr)",
                "comments": "The function retrieves the maximum amount of allocated FIFO buffer of the indexed Ethernet switch egress port. If the Ethernet switch hardware does not support Ethernet switch port based maximal FIFO buffer level, the content of Switch Port Egress Fifo Buffer Level Ptr shall be set to 0xFFFFFFFF. This API may be called by e.g. a CDD."
            },
            "71": {
                "name": "EthSwt_GetRxMgmtObject",
                "type": "Std_ReturnType EthSwt_GetRxMgmtObject (uint8 CtrlIdx,Eth_DataType* DataPtr,EthSwt_MgmtObjectType** MgmtObjectPtr)",
                "comments": "Obtains the Mgmt Object of the (in this context) unique Data Ptr."
            },
            "68": {
                "name": "EthSwt_GetTxMgmtObject",
                "type": "Std_ReturnType EthSwt_GetTxMgmtObject (uint8 CtrlIdx,Eth_BufIdxType BufIdx,EthSwt_MgmtObjectType** MgmtObjectPtr)",
                "comments": "Obtains the Mgmt Object of the (in this context) unique Buf Idx."
            },
            "77": {
                "name": "EthSwt_MacSecUpdateSecY",
                "type": "Std_ReturnType EthSwt_MacSecUpdateSecY (const EthSwt_MgmtInfoType* MgmtInfoPtr,const Mka_MacSecConfigType* MACsecCfgPtr,uint64 TxSci)",
                "comments": "Requests the Ethernet Switch to update the Sec Y/PAC of the PHY with the provided parameters. A Transmission Secure Channel with the provided SCI shall be configured during the first call. A pointer to a MACsec Basic Parameters Configuration file shall be provided to create the Secure Channel. Tags: atp. Status = DRAFT"
            },
            "88": {
                "name": "EthSwt_MacSecUpdateSecYNotification",
                "type": "void EthSwt_MacSecUpdateSecYNotification (const EthSwt_MgmtInfoType* MgmtInfoPtr)",
                "comments": "Callback to notify that EthSwt_MacSecUpdateSecY finished. Tags: atp. Status = DRAFT"
            },
            "78": {
                "name": "EthSwt_MacSecInitRxSc",
                "type": "Std_ReturnType EthSwt_MacSecInitRxSc (const EthSwt_MgmtInfoType* MgmtInfoPtr,uint64 Sci)",
                "comments": "Requests the Ethernet Switch Driver to configure a Reception Secure Channel for the given Secure Channel Identifier. Tags: atp. Status = DRAFT"
            },
            "79": {
                "name": "EthSwt_MacSecResetRxSc",
                "type": "Std_ReturnType EthSwt_MacSecResetRxSc (const EthSwt_MgmtInfoType* MgmtInfoPtr,uint64 Sci)",
                "comments": "Request the Ethernet Switch Driver to reset to default the MACsec values of the Reception Secure Channel for the given Secure Channel Identifier. Tags: atp. Status = DRAFT"
            },
            "80": {
                "name": "EthSwt_MacSecAddTxSa",
                "type": "Std_ReturnType EthSwt_MacSecAddTxSa (EthSwt_MgmtInfoType* MgmtInfoPtr,uint8 An,uint64 NextPn,uint32 Ssci,const Mka_SakKeyPtrType* KeysPtr,boolean Active)",
                "comments": "Requests the Ethernet Switch Driver to create a Transmission Secure Association in the Transceiver. The Short Secure Channel Identifier is included to support XPN configurations. Tags: atp. Status = DRAFT"
            },
            "89": {
                "name": "EthSwt_MacSecAddTxSaNotification",
                "type": "void EthSwt_MacSecAddTxSaNotification (const EthSwt_MgmtInfoType* MgmtInfoPtr)",
                "comments": "Callback to notify that EthSwt_MacSecAddTxSa finished. Tags: atp. Status = DRAFT"
            },
            "81": {
                "name": "EthSwt_MacSecUpdateTxSa",
                "type": "Std_ReturnType EthSwt_MacSecUpdateTxSa (const EthSwt_MgmtInfoType* MgmtInfoPtr,uint8 An,uint64 NextPn,boolean Active)",
                "comments": "Request the Ethernet Switch Driver to update the Transmission Secure Association with the given Packet Number. The Active parameter is included to change the specified AN status. Tags: atp.Status = DRAFT"
            },
            "82": {
                "name": "EthSwt_MacSecDeleteTxSa",
                "type": "Std_ReturnType EthSwt_MacSecDeleteTxSa (const EthSwt_MgmtInfoType* MgmtInfoPtr,uint8 An)",
                "comments": "Request the Ethernet Switch Driver to remove the Transmission Secure Association identified by the provided Association Number. Tags: atp. Status = DRAFT"
            },
            "83": {
                "name": "EthSwt_MacSecAddRxSa",
                "type": "Std_ReturnType EthSwt_MacSecAddRxSa (const EthSwt_MgmtInfoType* MgmtInfoPtr,uint8 An,uint64 LowestPn,uint32 Ssci,const Mka_SakKeyPtrType* KeysPtr,boolean Active)",
                "comments": "Request the Ethernet Switch Driver to create a Reception Secure Association in the Transceiver. The Short Secure Channel Identifier is included to support XPN configurations. Tags: atp. Status = DRAFT"
            },
            "90": {
                "name": "EthSwt_MacSecAddRxSaNotification",
                "type": "void EthSwt_MacSecAddRxSaNotification (const EthSwt_MgmtInfoType* MgmtInfoPtr)",
                "comments": "Callback to notify that EthSwt_MacSecAddRxSa finished. Tags: atp. Status = DRAFT"
            },
            "84": {
                "name": "EthSwt_MacSecUpdateRxSa",
                "type": "Std_ReturnType EthSwt_MacSecUpdateRxSa (const EthSwt_MgmtInfoType* MgmtInfoPtr,uint8 An,uint64 LowestPn,boolean Active)",
                "comments": "Request the Ethernet Switch Driver to update the Reception Secure Association with the given Packet Number. The Active parameter is included to change the specified AN status. Tags: atp. Status = DRAFT"
            },
            "85": {
                "name": "EthSwt_MacSecDeleteRxSa",
                "type": "Std_ReturnType EthSwt_MacSecDeleteRxSa (const EthSwt_MgmtInfoType* MgmtInfoPtr,uint8 An)",
                "comments": "Request the Ethernet Switch Driver to remove the Reception Secure Association identified by the provided Association Number. Tags: atp. Status = DRAFT"
            },
            "86": {
                "name": "EthSwt_MacSecGetTxSaNextPn",
                "type": "Std_ReturnType EthSwt_MacSecGetTxSaNextPn (const EthSwt_MgmtInfoType* MgmtInfoPtr,uint8 An,uint64* NextPnPtr)",
                "comments": "Request the Ethernet Switch Driver to return the Packet Number that is used for the next packet in the given Transmission Secure Association. Tags: atp. Status = DRAFT"
            },
            "87": {
                "name": "EthSwt_MacSecGetMacSecStats",
                "type": "Std_ReturnType EthSwt_MacSecGetMacSecStats (const EthSwt_MgmtInfoType* MgmtInfoPtr)",
                "comments": "Request the Ethernet Switch Driver to provide MACsec statistics. Tags: atp. Status = DRAFT"
            },
            "91": {
                "name": "EthSwt_MacSecGetMacSecStatsNotification",
                "type": "void EthSwt_MacSecGetMacSecStatsNotification (const EthSwt_MgmtInfoType* MgmtInfoPtr,const Mka_Stats_SecYType* MacSecStats)",
                "comments": "Callback to notify that EthSwt_MacSecGetMacSecStats finished and provide the requested statistics. Tags: atp. Status = DRAFT"
            },
            "92": {
                "name": "EthSwt_MacSecSetControlledPortEnabled",
                "type": "Std_ReturnType EthSwt_MacSecSetControlledPortEnabled (const EthSwt_MgmtInfoType* MgmtInfoPtr,boolean ControlledPortEnabled)",
                "comments": "Requests to set the Controlled Port enabled parameter of a PAE. Tags: atp. Status = DRAFT"
            },
            "93": {
                "name": "EthSwt_ExtractStreamHandleIdx",
                "type": "Std_ReturnType EthSwt_ExtractStreamHandleIdx (const Eth_DataType* DataPtr,uint16 LenByte,uint8* StreamHandleIdxPtr)",
                "comments": "Extracts the Stream Handle Idx from the switch vendor specific part of the network packet header Tags: atp.Status = draft"
            },
            "94": {
                "name": "EthSwt_GetStreamHandleIdxStatistics",
                "type": "void EthSwt_GetStreamHandleIdxStatistics (uint8 SwitchIdx)",
                "comments": "Request the bucket counter values from the switch Tags: atp.Status = draft"
            },
            "95": {
                "name": "EthSwt_SetStreamHandleIdxConfiguration",
                "type": "void EthSwt_SetStreamHandleIdxConfiguration (uint8 SwitchIdx,uint8 StreamHandleIdx,boolean StreamHandleIdxActivityStatus)",
                "comments": "This function is called by the Eth If module to control the activity status of a Stream Handle Idx in the switch. Tags: atp. Status = draft"
            },
            "27": {
                "name": "EthSwtPersistentConfigurationResultCallback",
                "type": "void EthSwtPersistentConfigurationResultCallback (NvM_RequestResultType JobResult)",
                "comments": "JobEndNotificationOfEthSwt_StoreConfigurationOrEthSwt_ResetConfiguration"
            },
            "28": {
                "name": "EthSwt_MainFunction",
                "type": "void EthSwt_MainFunction (void)",
                "comments": "Service to support asynchronous behavior of API calls"
            },
            "70": {
                "name": "EthSwt_BackgroundTask",
                "type": "void EthSwt_BackgroundTask (void)",
                "comments": "The background task should be scheduled as often as possible when no other task runs. It may be used for switch and port initialization in case the EthSwt_Init function needs too much time."
            },
            "25": {
                "name": "EthSwtLinkDownCallout",
                "type": "void EthSwtLinkDownCallout (uint8 SwitchIdx,uint8 PortIdx)",
                "comments": "Is called, if a link which is configured goes down."
            },
            "26": {
                "name": "EthSwtLinkUpCallout",
                "type": "void EthSwtLinkUpCallout (uint8 SwitchIdx,uint8 PortIdx)",
                "comments": "Is called, if a link which is configured goes up."
            },
            "67": {
                "name": "GetCfgDataRawDone",
                "type": "void GetCfgDataRawDone (uint8 SwitchIdx)",
                "comments": "The call of the function EthSwt_GetCfgDataRaw() triggers an asynchronous read of a certain memory section of the Ethernet switch driver. If the read is done, the configured callout function <GetCfgDataRawDone> shall be called."
            }
        }
    },
    "73": {
        "name": "Ethernet Transceiver Driver",
        "short_name": "EthTrcv",
        "functions": {
            "1": {
                "name": "EthTrcv_Init",
                "type": "void EthTrcv_Init (const EthTrcv_ConfigType* CfgPtr)",
                "comments": "Initialize the Ethernet Transceiver Driver"
            },
            "3": {
                "name": "EthTrcv_SetTransceiverMode",
                "type": "Std_ReturnType EthTrcv_SetTransceiverMode (uint8 TrcvIdx,Eth_ModeType TrcvMode)",
                "comments": "Enables/disables the indexed transceiver"
            },
            "4": {
                "name": "EthTrcv_GetTransceiverMode",
                "type": "Std_ReturnType EthTrcv_GetTransceiverMode (uint8 TrcvIdx,Eth_ModeType* TrcvModePtr)",
                "comments": "Obtains the state of the indexed transceiver"
            },
            "23": {
                "name": "EthTrcv_GetBusWuReason",
                "type": "Std_ReturnType EthTrcv_GetBusWuReason (uint8 TrcvIdx,EthTrcv_WakeupReasonType* WakeupReasonPtr)",
                "comments": "This function returns the least recent wake up reasons."
            },
            "15": {
                "name": "EthTrcv_CheckWakeup",
                "type": "Std_ReturnType EthTrcv_CheckWakeup (uint8 TrcvIdx)",
                "comments": "Service is called by Eth if in case a wake-up interrupt is detected."
            },
            "5": {
                "name": "EthTrcv_StartAutoNegotiation",
                "type": "Std_ReturnType EthTrcv_StartAutoNegotiation (uint8 TrcvIdx)",
                "comments": "Restarts the negotiation of the transmission parameters used by the indexed transceiver."
            },
            "2": {
                "name": "EthTrcv_TransceiverLinkStateRequest",
                "type": "Std_ReturnType EthTrcv_TransceiverLinkStateRequest (uint8 TrcvIdx,EthTrcv_LinkStateType LinkState)",
                "comments": "Request the given link state for the given transceiver."
            },
            "6": {
                "name": "EthTrcv_GetLinkState",
                "type": "Std_ReturnType EthTrcv_GetLinkState (uint8 TrcvIdx,EthTrcv_LinkStateType* LinkStatePtr)",
                "comments": "Obtains the link state of the indexed transceiver."
            },
            "7": {
                "name": "EthTrcv_GetBaudRate",
                "type": "Std_ReturnType EthTrcv_GetBaudRate (uint8 TrcvIdx,EthTrcv_BaudRateType* BaudRatePtr)",
                "comments": "Obtains the baud rate of the indexed transceiver"
            },
            "8": {
                "name": "EthTrcv_GetDuplexMode",
                "type": "Std_ReturnType EthTrcv_GetDuplexMode (uint8 TrcvIdx,EthTrcv_DuplexModeType* DuplexModePtr)",
                "comments": "Obtains the duplex mode of the indexed transceiver."
            },
            "17": {
                "name": "EthTrcvWakeUpCallout",
                "type": "void EthTrcvWakeUpCallout (uint8 TrcvIdx,Eth_ModeType TrcvMode)",
                "comments": "Indicates a wake-up request for the specified Ethernet Transceiver. The given Trcv Mode indicates if the request is based on a remote request from the network (ETH_MODE_ACTIVE) or if the request is based on an active user request (ETH_MODE_ACTIVE_WITH_WAKEUP_REQUEST). The callback function C can be used to trigger integrator code that initiates a remote wake-up (e.g. trigger a wake-up line for an active user request)."
            },
            "18": {
                "name": "EthTrcv_SetPhyLoopbackMode",
                "type": "Std_ReturnType EthTrcv_SetPhyLoopbackMode (uint8 TrcvIdx,EthTrcv_PhyLoopbackModeType Mode)",
                "comments": "Activates a given loopback mode."
            },
            "16": {
                "name": "EthTrcv_GetPhySignalQuality",
                "type": "Std_ReturnType EthTrcv_GetPhySignalQuality (uint8 TrcvIdx,uint32* SignalQualityPtr)",
                "comments": "Obtains the current signal quality of the link of the indexed transceiver."
            },
            "19": {
                "name": "EthTrcv_SetPhyTxMode",
                "type": "Std_ReturnType EthTrcv_SetPhyTxMode (uint8 TrcvIdx,EthTrcv_PhyTxModeType Mode)",
                "comments": "Activates a given transmission mode."
            },
            "22": {
                "name": "EthTrcv_RunCableDiagnostic",
                "type": "Std_ReturnType EthTrcv_RunCableDiagnostic (uint8 TrcvIdx)",
                "comments": "Trigger the cable diagnostics for the given Ethernet transceiver."
            },
            "20": {
                "name": "EthTrcv_GetCableDiagnosticsResult",
                "type": "Std_ReturnType EthTrcv_GetCableDiagnosticsResult (uint8 TrcvIdx,EthTrcv_CableDiagResultType* ResultPtr)",
                "comments": "Retrieve the cable diagnostics result of a given transceiver."
            },
            "21": {
                "name": "EthTrcv_GetPhyIdentifier",
                "type": "Std_ReturnType EthTrcv_GetPhyIdentifier (uint8 TrcvIdx,uint32* OrgUniqueIdPtr,uint8* ModelNrPtr,uint8* RevisionNrPtr)",
                "comments": "Obtains the PHY identifier of the Ethernet Transceiver according to IEEE 802.3-2015 chapter 22.2.4.3.1 PHY Identifier."
            },
            "24": {
                "name": "EthTrcv_GetMacMethod",
                "type": "Std_ReturnType EthTrcv_GetMacMethod (uint8* TrcvIdx,EthTrcv_MacMethodType* MacModePtr)",
                "comments": "ObtainsthemediaaccessmodeofthetransceiverwhenEthTrcvDuplexModeisconfiguredas ETHTRCV_DUPLEX_MODE_HALF."
            },
            "11": {
                "name": "EthTrcv_GetVersionInfo",
                "type": "void EthTrcv_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information of this module."
            },
            "25": {
                "name": "EthTrcv_MacSecUpdateSecY",
                "type": "Std_ReturnType EthTrcv_MacSecUpdateSecY (uint8 TrcvIdx,const Mka_MacSecConfigType* MACsecCfgPtr,uint64 TxSci)",
                "comments": "Request the Ethernet Transceiver to update the SecY/PAC of the PHY with the provided parameters. A Transmission Secure Channel with the provided SCI shall be configured during the first call. A pointer to a MACsec Basic Parameters Configuration file shall be provided to create the Secure Channel. Tags: atp. Status = DRAFT"
            },
            "26": {
                "name": "EthTrcv_MacSecInitRxSc",
                "type": "Std_ReturnType EthTrcv_MacSecInitRxSc (uint8 TrcvIdx,uint64 Sci)",
                "comments": "Request the Ethernet Transceiver Driver to configure a Reception Secure Channel for the given Secure Channel Identifier. Tags: atp. Status = DRAFT"
            },
            "27": {
                "name": "EthTrcv_MacSecResetRxSc",
                "type": "Std_ReturnType EthTrcv_MacSecResetRxSc (uint8 TrcvIdx,uint64 Sci)",
                "comments": "Request the Ethernet Transceiver Driver to reset to default the MACsec values of the Reception Secure Channel for the given Secure Channel Identifier. Tags: atp. Status = DRAFT"
            },
            "28": {
                "name": "EthTrcv_MacSecAddTxSa",
                "type": "Std_ReturnType EthTrcv_MacSecAddTxSa (uint8 TrcvIdx,uint8 An,uint64 NextPn,uint32 Ssci,const Mka_SakKeyPtrType* KeysPtr,boolean Active)",
                "comments": "Request the Ethernet Transceiver Driver to create a Transmission Secure Association in the Transceiver. The Short Secure Channel Identifier is included to support XPN configurations. Tags: atp. Status=DRAFT"
            },
            "29": {
                "name": "EthTrcv_MacSecUpdateTxSa",
                "type": "Std_ReturnType EthTrcv_MacSecUpdateTxSa (uint8 TrcvIdx,uint8 An,uint64 NextPn,boolean Active)",
                "comments": "Requests the Ethernet Transceiver Driver to update the Transmission Secure Association with the given Packet Number. The Active parameter is included to change the specified AN status. Tags: atp.Status = DRAFT"
            },
            "30": {
                "name": "EthTrcv_MacSecDeleteTxSa",
                "type": "Std_ReturnType EthTrcv_MacSecDeleteTxSa (uint8 TrcvIdx,uint8 An)",
                "comments": "Request the Ethernet Transceiver Driver to remove the Transmission Secure Association identified by the provided Association Number. Tags: atp. Status = DRAFT"
            },
            "31": {
                "name": "EthTrcv_MacSecAddRxSa",
                "type": "Std_ReturnType EthTrcv_MacSecAddRxSa (uint8 TrcvIdx,uint8 An,uint64 LowestPn,uint32 Ssci,const Mka_SakKeyPtrType* KeysPtr,boolean Active)",
                "comments": "Request the Ethernet Transceiver Driver to create a Reception Secure Association in the Transceiver. The Short Secure Channel Identifier is included to support XPN configurations. Tags: atp. Status = DRAFT"
            },
            "32": {
                "name": "EthTrcv_MacSecUpdateRxSa",
                "type": "Std_ReturnType EthTrcv_MacSecUpdateRxSa (uint8 TrcvIdx,uint8 An,uint64 LowestPn,boolean Active)",
                "comments": "Request the Ethernet Transceiver Driver to update the Reception Secure Association with the given Packet Number. The Active parameter is included to change the specified AN status. Tags: atp.Status = DRAFT"
            },
            "33": {
                "name": "EthTrcv_MacSecDeleteRxSa",
                "type": "Std_ReturnType EthTrcv_MacSecDeleteRxSa (uint8 TrcvIdx,uint8 An)",
                "comments": "Request the Ethernet Transceiver Driver to remove the Reception Secure Association identified by the provided Association Number. Tags: atp. Status = DRAFT"
            },
            "34": {
                "name": "EthTrcv_MacSecGetTxSaNextPn",
                "type": "Std_ReturnType EthTrcv_MacSecGetTxSaNextPn (uint8 TrcvIdx,uint8 An,uint64* NextPnPtr)",
                "comments": "Request the Ethernet Transceiver Driver to return the Packet Number that is used for the next packet in the given Transmission Secure Association. Tags: atp. Status = DRAFT"
            },
            "35": {
                "name": "EthTrcv_MacSecGetMacSecStats",
                "type": "Std_ReturnType EthTrcv_MacSecGetMacSecStats (uint8 TrcvIdx)",
                "comments": "Request the Ethernet Transceiver Driver to provide MACsec statistics. Tags: atp. Status = DRAFT"
            },
            "36": {
                "name": "EthTrcv_MacSecSetControlledPortEnabled",
                "type": "Std_ReturnType EthTrcv_MacSecSetControlledPortEnabled (uint8 TrcvIdx,boolean ControlledPortEnabled)",
                "comments": "Requests to set the Controlled Port enabled parameter of a PAE. Tags: atp. Status = DRAFT"
            },
            "37": {
                "name": "EthTrcv_EthSwitchMacSecUpdateSecY",
                "type": "Std_ReturnType EthTrcv_EthSwitchMacSecUpdateSecY (uint8 TrcvIdx,const Mka_MacSecConfigType* MACsecCfgPtr,uint64 TxSci)",
                "comments": "Requests the Ethernet Transceiver to update the SecY/PAC of the PHY with the provided parameters. A Transmission Secure Channel with the provided SCI shall be configured during the first call. A pointer to a MACsec Basic Parameters Configuration file shall be provided to create the Secure Channel. Tags: atp. Status = DRAFT"
            },
            "38": {
                "name": "EthTrcv_EthSwitchMacSecAddTxSa",
                "type": "Std_ReturnType EthTrcv_EthSwitchMacSecAddTxSa (uint8 TrcvIdx,uint8 An,uint64 NextPn,uint32 Ssci,const Mka_SakKeyPtrType* KeysPtr,boolean Active)",
                "comments": "Requests the Ethernet Transceiver Driver to create a Transmission Secure Association in the Transceiver. The Short Secure Channel Identifier is included to support XPN configurations. Tags: atp. Status = DRAFT"
            },
            "39": {
                "name": "EthTrcv_SwitchMacSecAddRxSa",
                "type": "Std_ReturnType EthTrcv_SwitchMacSecAddRxSa (uint8 TrcvIdx,uint8 An,uint64 LowestPn,uint32 Ssci,const Mka_SakKeyPtrType* KeysPtr,boolean Active)",
                "comments": "Request the Ethernet Transceiver Driver to create a Reception Secure Association in the Transceiver. The Short Secure Channel Identifier is included to support XPN configurations. Tags: atp. Status = DRAFT"
            },
            "40": {
                "name": "EthTrcv_SwitchMacSecGetMacSecStats",
                "type": "Std_ReturnType EthTrcv_SwitchMacSecGetMacSecStats (uint8 TrcvIdx,const Mka_Stats_SecYType* MacSecStats)",
                "comments": "Request the Ethernet Transceiver Driver to provide MACsec statistics. Tags: atp. Status = DRAFT"
            },
            "9": {
                "name": "EthTrcv_ReadMiiIndication",
                "type": "void EthTrcv_ReadMiiIndication (uint8 CtrlIdx,uint8 TrcvIdx,uint8 RegIdx,uint8 RegVal)",
                "comments": "Called when information has been read out via MII interface. Triggered by previous Eth_ReadMii call. Can directly be called within Eth_ReadMii."
            },
            "10": {
                "name": "EthTrcv_WriteMiiIndication",
                "type": "void EthTrcv_WriteMiiIndication (uint8 CtrlIdx,uint8 TrcvIdx,uint8 RegIdx)",
                "comments": "Called when information has been written via MII interface. Triggered by previous Eth_WriteMii call. Can directly be called within Eth_WriteMii."
            },
            "12": {
                "name": "EthTrcv_MainFunction",
                "type": "void EthTrcv_MainFunction (void)",
                "comments": "Used for polling state changes and wakeup reasons. Calls EthIf_TrcvModeIndication when the transceiver mode changed. Stores wakeup events if EthTrcvWakeUpSupport is set to ETHTRCV_WAKEUP_BY_POLLING."
            }
        }
    },
    "111": {
        "name": "Firewall",
        "short_name": "Fw",
        "functions": {
            "0": {
                "name": "Fw_Init",
                "type": "void Fw_Init (const Fw_ConfigType* configPtr)",
                "comments": "Service to initialize the module Fw. It initializes all variables and sets the module state to initialized. Tags: atp. Status = draft"
            },
            "1": {
                "name": "Fw_GetVersionInfo",
                "type": "void Fw_GetVersionInfo (const Std_VersionInfoType* versionInfo)",
                "comments": "Returns version information, vendor ID, and AUTOSAR module ID of the component. Tags: atp.Status = draft"
            },
            "3": {
                "name": "Fw_InspectPacket",
                "type": "Std_ReturnType Fw_InspectPacket (uint8 CtrlIdx,Eth_FrameType FrameType,boolean IsBroadcast,const uint8* PhysAddrPtr,const Eth_DataType* DataPtr,uint16 LenByte,uint8* StreamHandleIdxPtr,Fw_InspectionResultType* InspectionResultPtr)",
                "comments": "This function inspects the network packet against the list of pre-defined firewall rules and returns the inspection result within the InspectionResultPtr. Tags: atp.Status = draft"
            },
            "4": {
                "name": "Fw_SetFirewallState",
                "type": "void Fw_SetFirewallState (uint16 FirewallState)",
                "comments": "This function is invoked by the BswM to indicate ECU state changes. Tags: atp.Status = draft"
            },
            "5": {
                "name": "Fw_StreamHandleIdxStatistics",
                "type": "void Fw_StreamHandleIdxStatistics (uint8 SwitchIdx,uint8 NumberOfBuckets,const uint8* StreamHandleIdxStatisticsPtr)",
                "comments": "The function is called by the Eth If once it has successfully retrieved the bucket counter values from the switch. Tags: atp. Status = draft"
            },
            "6": {
                "name": "Fw_StreamHandleIdxConfiguration",
                "type": "void Fw_StreamHandleIdxConfiguration (uint8 SwitchIdx,uint8 StreamHandleIdxPtr,boolean StreamHandleIdxActivityStatus)",
                "comments": "The function is called by the Eth If once it has successfully set the Stream Handle Idx in the switch. Tags: atp. Status = draft"
            },
            "2": {
                "name": "Fw_MainFunction",
                "type": "void Fw_MainFunction (void)",
                "comments": "This function is called periodically. It is used to perform asynchronous function calls (e.g. to the switch driver). Tags: atp. Status = draft"
            }
        }
    },
    "92": {
        "name": "Flash Driver",
        "short_name": "Fls",
        "functions": {
            "0": {
                "name": "Fls_Init",
                "type": "void Fls_Init (const Fls_ConfigType* ConfigPtr)",
                "comments": "Initialize the Flash Driver."
            },
            "1": {
                "name": "Fls_Erase",
                "type": "Std_ReturnType Fls_Erase (Fls_AddressType TargetAddress,Fls_LengthType Length)",
                "comments": "Erases flash sector(s)."
            },
            "2": {
                "name": "Fls_Write",
                "type": "Std_ReturnType Fls_Write (Fls_AddressType TargetAddress,const uint8* SourceAddressPtr,Fls_LengthType Length)",
                "comments": "Writes one or more complete flash pages."
            },
            "3": {
                "name": "Fls_Cancel",
                "type": "void Fls_Cancel (void)",
                "comments": "Cancels an ongoing job."
            },
            "4": {
                "name": "Fls_GetStatus",
                "type": "MemIf_StatusType Fls_GetStatus (void)",
                "comments": "Returns the driver state."
            },
            "5": {
                "name": "Fls_GetJobResult",
                "type": "MemIf_JobResultType Fls_GetJobResult (void)",
                "comments": "Returns the result of the last job."
            },
            "7": {
                "name": "Fls_Read",
                "type": "Std_ReturnType Fls_Read (Fls_AddressType SourceAddress,uint8* TargetAddressPtr,Fls_LengthType Length)",
                "comments": "Reads from flash memory."
            },
            "8": {
                "name": "Fls_Compare",
                "type": "Std_ReturnType Fls_Compare (Fls_AddressType SourceAddress,const uint8* TargetAddressPtr,Fls_LengthType Length)",
                "comments": "Compares the contents of an area of flash memory with that of an application data buffer."
            },
            "9": {
                "name": "Fls_SetMode",
                "type": "void Fls_SetMode (MemIf_ModeType Mode)",
                "comments": "Sets the flash driver\u2019s operation mode."
            },
            "16": {
                "name": "Fls_GetVersionInfo",
                "type": "void Fls_GetVersionInfo (Std_VersionInfoType* VersioninfoPtr)",
                "comments": "Returns the version information of this module."
            },
            "10": {
                "name": "Fls_BlankCheck",
                "type": "Std_ReturnType Fls_BlankCheck (Fls_AddressType TargetAddress,Fls_LengthType Length)",
                "comments": "The function Fls_BlankCheck shall verify whether a given memory area has been erased but not (yet) programmed. The function shall limit the maximum number of checked flash cells per main function cycle to the configured value FlsMaxReadNormalMode or FlsMaxReadFastMode respectively."
            },
            "6": {
                "name": "Fls_MainFunction",
                "type": "void Fls_MainFunction (void)",
                "comments": "Performs the processing of jobs."
            }
        }
    },
    "21": {
        "name": "Flash EEPROM Emulation",
        "short_name": "Fee",
        "functions": {
            "0": {
                "name": "Fee_Init",
                "type": "void Fee_Init (const Fee_ConfigType* ConfigPtr)",
                "comments": "Service to initialize the FEE module."
            },
            "2": {
                "name": "Fee_Read",
                "type": "Std_ReturnType Fee_Read (uint16 BlockNumber,uint16 BlockOffset,uint8* DataBufferPtr,uint16 Length)",
                "comments": "Service to initiate a read job."
            },
            "3": {
                "name": "Fee_Write",
                "type": "Std_ReturnType Fee_Write (uint16 BlockNumber,const uint8* DataBufferPtr)",
                "comments": "Service to initiate a write job."
            },
            "4": {
                "name": "Fee_Cancel",
                "type": "void Fee_Cancel (void)",
                "comments": "Service to call the cancel function of the underlying flash driver."
            },
            "5": {
                "name": "Fee_GetStatus",
                "type": "MemIf_StatusType Fee_GetStatus (void)",
                "comments": "Service to return the status."
            },
            "6": {
                "name": "Fee_GetJobResult",
                "type": "MemIf_JobResultType Fee_GetJobResult (void)",
                "comments": "Service to query the result of the last accepted job issued by the upper layer software."
            },
            "7": {
                "name": "Fee_InvalidateBlock",
                "type": "Std_ReturnType Fee_InvalidateBlock (uint16 BlockNumber)",
                "comments": "Service to invalidate a logical block."
            },
            "8": {
                "name": "Fee_GetVersionInfo",
                "type": "void Fee_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Service to return the version information of the FEE module."
            },
            "9": {
                "name": "Fee_EraseImmediateBlock",
                "type": "Std_ReturnType Fee_EraseImmediateBlock (uint16 BlockNumber)",
                "comments": "Service to erase a logical block."
            },
            "16": {
                "name": "Fee_JobEndNotification",
                "type": "void Fee_JobEndNotification (void)",
                "comments": "Service to report to this module the successful end of an asynchronous operation."
            },
            "18": {
                "name": "Fee_MainFunction",
                "type": "void Fee_MainFunction (void)",
                "comments": "Service to handle the requested read/write/erase jobs and the internal management operations."
            }
        }
    },
    "104": {
        "name": "Flash Test",
        "short_name": "FlsTst",
        "functions": {
            "0": {
                "name": "FlsTst_Init",
                "type": "void FlsTst_Init (const FlsTst_ConfigType* ConfigPtr)",
                "comments": "Service for Flash Test initialization."
            },
            "1": {
                "name": "FlsTst_DeInit",
                "type": "void FlsTst_DeInit (void)",
                "comments": "Service for Flash Test De-Initialization."
            },
            "2": {
                "name": "FlsTst_StartFgnd",
                "type": "Std_ReturnType FlsTst_StartFgnd (FlsTst_BlockIdFgndType FgndBlockId)",
                "comments": "Service for executing foreground Flash Test."
            },
            "3": {
                "name": "FlsTst_Abort",
                "type": "void FlsTst_Abort (void)",
                "comments": "Service for aborting the Flash Test."
            },
            "4": {
                "name": "FlsTst_Suspend",
                "type": "void FlsTst_Suspend (void)",
                "comments": "Service for suspending current operation of the Flash Test, until FlsTst_Resume is called."
            },
            "5": {
                "name": "FlsTst_Resume",
                "type": "void FlsTst_Resume (void)",
                "comments": "Service for continuing the Flash Test at the point it was suspended."
            },
            "6": {
                "name": "FlsTst_GetCurrentState",
                "type": "FlsTst_StateType FlsTst_GetCurrentState (void)",
                "comments": "Servicer returns the current Flash Test execution state."
            },
            "7": {
                "name": "FlsTst_GetTestResultBgnd",
                "type": "FlsTst_TestResultBgndType FlsTst_GetTestResultBgnd (void)",
                "comments": "Service returns the Background Flash Test result."
            },
            "15": {
                "name": "FlsTst_GetTestResultFgnd",
                "type": "FlsTst_TestResultFgndType FlsTst_GetTestResultFgnd (void)",
                "comments": "Server returns the Foreground Flash Test result."
            },
            "8": {
                "name": "FlsTst_GetVersionInfo",
                "type": "void FlsTst_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Service returns the version information of this module."
            },
            "9": {
                "name": "FlsTst_GetTestSignatureBgnd",
                "type": "FlsTst_TestSignatureBgndType FlsTst_GetTestSignatureBgnd (void)",
                "comments": "Service returns the Flash Test result in background mode."
            },
            "10": {
                "name": "FlsTst_GetTestSignatureFgnd",
                "type": "FlsTst_TestSignatureFgndType FlsTst_GetTestSignatureFgnd (void)",
                "comments": "Service returns the Flash Test result in foreground mode."
            },
            "11": {
                "name": "FlsTst_GetErrorDetails",
                "type": "FlsTst_ErrorDetailsType FlsTst_GetErrorDetails (void)",
                "comments": "Service return error details monitored from the Flash module."
            },
            "12": {
                "name": "FlsTst_TestEcc",
                "type": "Std_ReturnType FlsTst_TestEcc (void)",
                "comments": "Service executes a test of ECC hardware. This is only applicable in case the hardware provides such functionality."
            },
            "13": {
                "name": "FlsTst_MainFunction",
                "type": "void FlsTst_MainFunction (void)",
                "comments": "Service for executing the Flash Test in background mode."
            },
            "14": {
                "name": "FlsTst_TestCompletedNotification",
                "type": "void FlsTst_TestCompletedNotification (void)",
                "comments": "The function FlsTst_TestCompleted shall be called every time when a complete test cycle had been tested."
            }
        }
    },
    "38": {
        "name": "FlexRay AUTOSAR TransportLayer",
        "short_name": "FrArTp",
        "functions": {
            "39": {
                "name": "FrArTp_GetVersionInfo",
                "type": "void FrArTp_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information."
            },
            "0": {
                "name": "FrArTp_Init",
                "type": "void FrArTp_Init (const FrArTp_ConfigType* configPtr)",
                "comments": "This service initializes all global variables of the FlexRay AUTOSAR Transport Layer and sets all states to idle."
            },
            "1": {
                "name": "FrArTp_Shutdown",
                "type": "void FrArTp_Shutdown (void)",
                "comments": "This service closes all pending transport protocol connections by simply stopping operations, frees all resources, and stops the FrArTp Module."
            },
            "73": {
                "name": "FrArTp_Transmit",
                "type": "Std_ReturnType FrArTp_Transmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests the transmission of a PDU."
            },
            "74": {
                "name": "FrArTp_CancelTransmit",
                "type": "Std_ReturnType FrArTp_CancelTransmit (PduIdType TxPduId)",
                "comments": "Requests cancellation of an ongoing transmission of a PDU in a lower layer communication module."
            },
            "76": {
                "name": "FrArTp_CancelReceive",
                "type": "Std_ReturnType FrArTp_CancelReceive (PduIdType RxPduId)",
                "comments": "Requests cancellation of an ongoing reception of a PDU in a lower layer transport protocol module."
            },
            "75": {
                "name": "FrArTp_ChangeParameter",
                "type": "Std_ReturnType FrArTp_ChangeParameter (PduIdType id,TPParameterType parameter,uint16 value)",
                "comments": "Request to change a specific transport protocol parameter (e.g., block size)."
            },
            "65": {
                "name": "FrArTp_TriggerTransmit",
                "type": "Std_ReturnType FrArTp_TriggerTransmit (PduIdType TxPduId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr."
            },
            "66": {
                "name": "FrArTp_RxIndication",
                "type": "void FrArTp_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received Protocol Data Unit (PDU) from a lower-layer communication interface module."
            },
            "64": {
                "name": "FrArTp_TxConfirmation",
                "type": "void FrArTp_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "16": {
                "name": "FrArTp_MainFunction",
                "type": "void FrArTp_MainFunction (void)",
                "comments": "Schedules the FlexRay TP: Entry point for scheduling."
            }
        }
    },
    "81": {
        "name": "FlexRay Driver",
        "short_name": "Fr",
        "functions": {
            "28": {
                "name": "Fr_Init",
                "type": "void Fr_Init (const Fr_ConfigType* Fr_ConfigPtr)",
                "comments": "Initializes the Fr."
            },
            "0": {
                "name": "Fr_ControllerInit",
                "type": "Std_ReturnType Fr_ControllerInit (uint8 Fr_CtrlIdx)",
                "comments": "Initializes a FlexRay CC."
            },
            "3": {
                "name": "Fr_StartCommunication",
                "type": "Std_ReturnType Fr_StartCommunication (uint8 Fr_CtrlIdx)",
                "comments": "Starts communication."
            },
            "35": {
                "name": "Fr_AllowColdstart",
                "type": "Std_ReturnType Fr_AllowColdstart (uint8 Fr_CtrlIdx)",
                "comments": "Invoke the CCHI command 'ALLOW_COLDSTART'."
            },
            "36": {
                "name": "Fr_AllSlots",
                "type": "Std_ReturnType Fr_AllSlots (uint8 Fr_CtrlIdx)",
                "comments": "Invokes the CCHI command 'ALL_SLOTS'."
            },
            "4": {
                "name": "Fr_HaltCommunication",
                "type": "Std_ReturnType Fr_HaltCommunication (uint8 Fr_CtrlIdx)",
                "comments": "Invoke the CCCHI command \u2018DEFERRED_HALT\u2019."
            },
            "5": {
                "name": "Fr_AbortCommunication",
                "type": "Std_ReturnType Fr_AbortCommunication (uint8 Fr_CtrlIdx)",
                "comments": "Invoke the CCHI command 'FREEZE'."
            },
            "6": {
                "name": "Fr_SendWUP",
                "type": "Std_ReturnType Fr_SendWUP (uint8 Fr_CtrlIdx)",
                "comments": "Invoke the CCH I command \u2018WAKEUP\u2019."
            },
            "7": {
                "name": "Fr_SetWakeupChannel",
                "type": "Std_ReturnType Fr_SetWakeupChannel (uint8 Fr_CtrlIdx,Fr_ChannelType Fr_ChnlIdx)",
                "comments": "Set awake up channel."
            },
            "10": {
                "name": "Fr_GetPOCStatus",
                "type": "Std_ReturnType Fr_GetPOCStatus (uint8 Fr_CtrlIdx,Fr_POCStatusType* Fr_POCStatusPtr)",
                "comments": "Get the POC status."
            },
            "11": {
                "name": "Fr_TransmitTxLPdu",
                "type": "Std_ReturnType Fr_TransmitTxLPdu (uint8 Fr_CtrlIdx,uint16 Fr_LPduIdx,const uint8* Fr_LSduPtr,uint8 Fr_LSduLength,Fr_SlotAssignmentType* Fr_SlotAssignmentPtr)",
                "comments": "Transmits data on the FlexRay network."
            },
            "45": {
                "name": "Fr_CancelTxLPdu",
                "type": "Std_ReturnType Fr_CancelTxLPdu (uint8 Fr_CtrlIdx,uint16 Fr_LPduIdx)",
                "comments": "Cancels the already pending transmission of a LPDU contained in a controller's physical transmit resource (e.g. message buffer)."
            },
            "12": {
                "name": "Fr_ReceiveRxLPdu",
                "type": "Std_ReturnType Fr_ReceiveRxLPdu (uint8 Fr_CtrlIdx,uint16 Fr_LPduIdx,uint8* Fr_LSduPtr,Fr_RxLPduStatusType* Fr_LPduStatusPtr,uint8* Fr_LSduLengthPtr,Fr_SlotAssignmentType* Fr_SlotAssignmentPtr)",
                "comments": "Receives data from the FlexRay network."
            },
            "13": {
                "name": "Fr_CheckTxLPduStatus",
                "type": "Std_ReturnType* Fr_CheckTxLPduStatus (uint8 Fr_CtrlIdx,uint16 Fr_LPduIdx,Fr_TxLPduStatusType* Fr_TxLPduStatusPtr,Fr_SlotAssignmentType* Fr_SlotAssignmentPtr)",
                "comments": "Check the transmit status of the LS du."
            },
            "31": {
                "name": "Fr_PrepareLPdu",
                "type": "Std_ReturnType Fr_PrepareLPdu (uint8 Fr_CtrlIdx,uint16 Fr_LPduIdx)",
                "comments": "Preparase a LP du."
            },
            "37": {
                "name": "Fr_ReconfigLPdu",
                "type": "Std_ReturnType Fr_ReconfigLPdu (uint8 Fr_CtrlIdx,uint16 Fr_LPduIdx,uint16 Fr_FrameId,Fr_ChannelType Fr_ChnlIdx,uint8 Fr_CycleRepetition,uint8 Fr_CycleOffset,uint8 Fr_PayloadLength,uint16 Fr_HeaderCRC)",
                "comments": "Reconfigures a given LP du according to the parameters (FrameId, Channel, Cycle Repetition, Cycle Offset, Payload Length, Header CRC) at runtime."
            },
            "38": {
                "name": "Fr_DisableLPdu",
                "type": "Std_ReturnType Fr_DisableLPdu (uint8 Fr_CtrlIdx,uint16 Fr_LPduIdx)",
                "comments": "Disables the hardware resource of a LPDU for transmission/reception."
            },
            "16": {
                "name": "Fr_GetGlobalTime",
                "type": "Std_ReturnType Fr_GetGlobalTime (uint8 Fr_CtrlIdx,uint8* Fr_CyclePtr,uint16* Fr_MacroTickPtr)",
                "comments": "Get the current global FlexRay time. Important Note: Fr_GetGlobalTime may be called within an exclusive area."
            },
            "34": {
                "name": "Fr_GetNmVector",
                "type": "Std_ReturnType Fr_GetNmVector (uint8 Fr_CtrlIdx,uint8* Fr_NmVectorPtr)",
                "comments": "Get the network management vector of the last communication cycle."
            },
            "39": {
                "name": "Fr_GetNumOfStartupFrames",
                "type": "Std_ReturnType Fr_GetNumOfStartupFrames (uint8 Fr_CtrlIdx,uint8* Fr_NumOfStartupFramesPtr)",
                "comments": "Gets the current number of startup frames seen on the cluster. See variable vStartupPairs of 12 for details."
            },
            "40": {
                "name": "Fr_GetChannelStatus",
                "type": "Std_ReturnType Fr_GetChannelStatus (uint8 Fr_CtrlIdx,uint16* Fr_ChannelAStatusPtr,uint16* Fr_ChannelBStatusPtr)",
                "comments": "Gets the channel status information."
            },
            "41": {
                "name": "Fr_GetClockCorrection",
                "type": "Std_ReturnType Fr_GetClockCorrection (uint8 Fr_CtrlIdx,sint16* Fr_RateCorrectionPtr,sint32* Fr_OffsetCorrectionPtr)",
                "comments": "Gets the current clock correction values. See variables vInterimRateCorrection and vInterimOffsetCorrection of 12 for details."
            },
            "42": {
                "name": "Fr_GetSyncFrameList",
                "type": "Std_ReturnType Fr_GetSyncFrameList (uint8 Fr_CtrlIdx,uint8 Fr_ListSize,uint16* Fr_ChannelAEvenListPtr,uint16* Fr_ChannelBEvenListPtr,uint16* Fr_ChannelAOddListPtr,uint16* Fr_ChannelBOddListPtr)",
                "comments": "Gets a list of sync frames received or transmitted on channel A and channel B via the even and odd communication cycle. See variables vsSyncIdListA and vsSyncIdListB of 12 for details."
            },
            "43": {
                "name": "Fr_GetWakeupRxStatus",
                "type": "Std_ReturnType Fr_GetWakeupRxStatus (uint8 Fr_CtrlIdx,uint8* Fr_WakeupRxStatusPtr)",
                "comments": "Gets the wakeup received information from the FlexRay controller."
            },
            "17": {
                "name": "Fr_SetAbsoluteTimer",
                "type": "Std_ReturnType Fr_SetAbsoluteTimer (uint8 Fr_CtrlIdx,uint8 Fr_AbsTimerIdx,uint8 Fr_Cycle,uint16 Fr_Offset)",
                "comments": "Sets the absolute FlexRay timer."
            },
            "19": {
                "name": "Fr_CancelAbsoluteTimer",
                "type": "Std_ReturnType Fr_CancelAbsoluteTimer (uint8 Fr_CtrlIdx,uint8 Fr_AbsTimerIdx)",
                "comments": "Stop an absolute timer."
            },
            "21": {
                "name": "Fr_EnableAbsoluteTimerIRQ",
                "type": "Std_ReturnType Fr_EnableAbsoluteTimerIRQ (uint8 Fr_CtrlIdx,uint8 Fr_AbsTimerIdx)",
                "comments": "Enables the interrupt line of an absolute timer."
            },
            "23": {
                "name": "Fr_AckAbsoluteTimerIRQ",
                "type": "Std_ReturnType Fr_AckAbsoluteTimerIRQ (uint8 Fr_CtrlIdx,uint8 Fr_AbsTimerIdx)",
                "comments": "Resets the interrupt condition of an absolute timer."
            },
            "25": {
                "name": "Fr_DisableAbsoluteTimerIRQ",
                "type": "Std_ReturnType Fr_DisableAbsoluteTimerIRQ (uint8 Fr_CtrlIdx,uint8 Fr_AbsTimerIdx)",
                "comments": "Disables the interrupt line of an absolute timer."
            },
            "32": {
                "name": "Fr_GetAbsoluteTimerIRQStatus",
                "type": "Std_ReturnType Fr_GetAbsoluteTimerIRQStatus (uint8 Fr_CtrlIdx,uint8 Fr_AbsTimerIdx,boolean* Fr_IRQStatusPtr)",
                "comments": "Gets IRQ status of an absolute timer."
            },
            "27": {
                "name": "Fr_GetVersionInfo",
                "type": "void Fr_GetVersionInfo (Std_VersionInfoType* VersioninfoPtr)",
                "comments": "Returns the version information of this module."
            },
            "46": {
                "name": "Fr_ReadCCConfig",
                "type": "Std_ReturnType Fr_ReadCCConfig (uint8 Fr_CtrlIdx,uint8 Fr_ConfigParamIdx,uint32* Fr_ConfigParamValuePtr)",
                "comments": "Reads a FlexRay protocol configuration parameter for a particular FlexRay controller out of the module\u2019s configuration."
            }
        }
    },
    "61": {
        "name": "FlexRay Interface",
        "short_name": "FrIf",
        "functions": {
            "2": {
                "name": "FrIf_Init",
                "type": "void FrIf_Init (const FrIf_ConfigType* FrIf_ConfigPtr)",
                "comments": "Initialize the FlexRay Interface."
            },
            "3": {
                "name": "FrIf_ControllerInit",
                "type": "Std_ReturnType FrIf_ControllerInit (uint8 FrIf_CtrlIdx)",
                "comments": "Initialized a FlexRay CC."
            },
            "25": {
                "name": "FrIf_SetAbsoluteTimer",
                "type": "Std_ReturnType FrIf_SetAbsoluteTimer (uint8 FrIf_CtrlIdx,uint8 FrIf_AbsTimerIdx,uint8 FrIf_Cycle,uint16 FrIf_Offset)",
                "comments": "Wraps the FlexRay Driver API function Fr_SetAbsoluteTimer()."
            },
            "29": {
                "name": "FrIf_EnableAbsoluteTimerIRQ",
                "type": "Std_ReturnType FrIf_EnableAbsoluteTimerIRQ (uint8 FrIf_CtrlIdx,uint8 FrIf_AbsTimerIdx)",
                "comments": "Wraps the FlexRay Driver API function Fr_EnableAbsoluteTimerIRQ()."
            },
            "33": {
                "name": "FrIf_AckAbsoluteTimerIRQ",
                "type": "Std_ReturnType FrIf_AckAbsoluteTimerIRQ (uint8 FrIf_CtrlIdx,uint8 FrIf_AbsTimerIdx)",
                "comments": "Wraps the FlexRay Driver API function Fr_AckAbsoluteTimerIRQ()"
            },
            "4": {
                "name": "FrIf_StartCommunication",
                "type": "Std_ReturnType FrIf_StartCommunication (uint8 FrIf_CtrlIdx)",
                "comments": "Wraps the FlexRay Driver API function Fr_StartCommunication()."
            },
            "5": {
                "name": "FrIf_HaltCommunication",
                "type": "Std_ReturnType FrIf_HaltCommunication (uint8 FrIf_CtrlIdx)",
                "comments": "Wraps the FlexRay Driver API function Fr_HaltCommunication()."
            },
            "6": {
                "name": "FrIf_AbortCommunication",
                "type": "Std_ReturnType FrIf_AbortCommunication (uint8 FrIf_CtrlIdx)",
                "comments": "Wraps the FlexRay Driver API function Fr_AbortCommunication()."
            },
            "7": {
                "name": "FrIf_GetState",
                "type": "Std_ReturnType FrIf_GetState (uint8 FrIf_ClstIdx,FrIf_StateType* FrIf_StatePtr)",
                "comments": "Get current Fr If state."
            },
            "8": {
                "name": "FrIf_SetState",
                "type": "Std_ReturnType FrIf_SetState (uint8 FrIf_ClstIdx,FrIf_StateTransitionType FrIf_StateTransition)",
                "comments": "Requests for Ifstate machine transition."
            },
            "9": {
                "name": "FrIf_SetWakeupChannel",
                "type": "Std_ReturnType FrIf_SetWakeupChannel (uint8 FrIf_CtrlIdx,Fr_ChannelType FrIf_ChnlIdx)",
                "comments": "Wraps the FlexRay Driver API function Fr_SetWakeupChannel(). The enum value \"FR_CHANNEL_AB\" shall not be used."
            },
            "10": {
                "name": "FrIf_SendWUP",
                "type": "Std_ReturnType FrIf_SendWUP (uint8 FrIf_CtrlIdx)",
                "comments": "Wraps the FlexRay Driver API function Fr_SendWUP()."
            },
            "13": {
                "name": "FrIf_GetPOCStatus",
                "type": "Std_ReturnType FrIf_GetPOCStatus (uint8 FrIf_CtrlIdx,Fr_POCStatusType* FrIf_POCStatusPtr)",
                "comments": "Wraps the FlexRay Driver API function Fr_GetPOCStatus()."
            },
            "14": {
                "name": "FrIf_GetGlobalTime",
                "type": "Std_ReturnType FrIf_GetGlobalTime (uint8 FrIf_CtrlIdx,uint8* FrIf_CyclePtr,uint16* FrIf_MacroTickPtr)",
                "comments": "Wraps the FlexRay Driver API function Fr_GetGlobalTime(). Important Note: Fr_GetGlobalTime may be called within an exclusive area."
            },
            "16": {
                "name": "FrIf_AllowColdstart",
                "type": "Std_ReturnType FrIf_AllowColdstart (uint8 FrIf_CtrlIdx)",
                "comments": "Wraps the FlexRay Driver API function Fr_AllowColdstart()."
            },
            "17": {
                "name": "FrIf_GetMacroticksPerCycle",
                "type": "uint16 FrIf_GetMacroticksPerCycle (uint8 FrIf_CtrlIdx)",
                "comments": "Retrieve the amount of Macro ticks per Cycle"
            },
            "49": {
                "name": "FrIf_GetMacrotickDuration",
                "type": "uint16 FrIf_GetMacrotickDuration (uint8 FrIf_CtrlIdx)",
                "comments": "Retrieve the duration of a macro tick in ns"
            },
            "73": {
                "name": "FrIf_Transmit",
                "type": "Std_ReturnType FrIf_Transmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU."
            },
            "19": {
                "name": "FrIf_SetTransceiverMode",
                "type": "Std_ReturnType FrIf_SetTransceiverMode (uint8 FrIf_CtrlIdx,Fr_ChannelType FrIf_ChnlIdx,FrTrcv_TrcvModeType FrIf_TrcvMode)",
                "comments": "Wraps the FlexRay Transceiver Driver API function FrTrcv_SetTransceiverMode(). The enum value \"FR_CHANNEL_AB\" shall not be used."
            },
            "20": {
                "name": "FrIf_GetTransceiverMode",
                "type": "Std_ReturnType FrIf_GetTransceiverMode (uint8 FrIf_CtrlIdx,Fr_ChannelType FrIf_ChnlIdx,FrTrcv_TrcvModeType* FrIf_TrcvModePtr)",
                "comments": "Wraps the FlexRay Transceiver Driver API function FrTrcv_GetTransceiverMode(). The enum value \"FR_CHANNEL_AB\" shall not be used."
            },
            "21": {
                "name": "FrIf_GetTransceiverWUReason",
                "type": "Std_ReturnType FrIf_GetTransceiverWUReason (uint8 FrIf_CtrlIdx,Fr_ChannelType FrIf_ChnlIdx,FrTrcv_TrcvWUReasonType* FrIf_TrcvWUReasonPtr)",
                "comments": "Wraps the FlexRay Transceiver Driver API function FrTrcv_GetTransceiverWUReason(). The enum value \"FR_CHANNEL_AB\" shall not be used."
            },
            "24": {
                "name": "FrIf_ClearTransceiverWakeup",
                "type": "Std_ReturnType FrIf_ClearTransceiverWakeup (uint8 FrIf_CtrlIdx,Fr_ChannelType FrIf_ChnlIdx)",
                "comments": "Wraps the FlexRay Transceiver Driver API function FrTrcv_ClearTransceiverWakeup(). The enum value \"FR_CHANNEL_AB\" shall not be used."
            },
            "27": {
                "name": "FrIf_CancelAbsoluteTimer",
                "type": "Std_ReturnType FrIf_CancelAbsoluteTimer (uint8 FrIf_CtrlIdx,uint8 FrIf_AbsTimerIdx)",
                "comments": "Wraps the FlexRay Driver API function Fr_CancelAbsoluteTimer()."
            },
            "31": {
                "name": "FrIf_GetAbsoluteTimerIRQStatus",
                "type": "Std_ReturnType FrIf_GetAbsoluteTimerIRQStatus (uint8 FrIf_CtrlIdx,uint8 FrIf_AbsTimerIdx,boolean* FrIf_IRQStatusPtr)",
                "comments": "Wraps the FlexRay Driver API function Fr_GetAbsoluteTimerIRQStatus()"
            },
            "35": {
                "name": "FrIf_DisableAbsoluteTimerIRQ",
                "type": "Std_ReturnType FrIf_DisableAbsoluteTimerIRQ (uint8 FrIf_CtrlIdx,uint8 FrIf_AbsTimerIdx)",
                "comments": "Wraps the FlexRay Driver API function Fr_DisableAbsoluteTimerIRQ()."
            },
            "58": {
                "name": "FrIf_GetCycleLength",
                "type": "uint32 FrIf_GetCycleLength (uint8 FrIf_CtrlIdx)",
                "comments": "This API returns the configured time of the configuration parameter \"GdCycle\" in nanoseconds for the FlexRay controller with index FrIf_CtrlIdx."
            },
            "51": {
                "name": "FrIf_AllSlots",
                "type": "Std_ReturnType FrIf_AllSlots (uint8 FrIf_CtrlIdx)",
                "comments": "Wraps the FlexRay Driver API function Fr_AllSlots"
            },
            "38": {
                "name": "FrIf_GetChannelStatus",
                "type": "Std_ReturnType FrIf_GetChannelStatus (uint8 FrIf_CtrlIdx,uint16* FrIf_ChannelAStatusPtr,uint16* FrIf_ChannelBStatusPtr)",
                "comments": "Wraps the FlexRay Driver API function Fr_GetChannelStatus() and gets the channel status information."
            },
            "41": {
                "name": "FrIf_GetClockCorrection",
                "type": "Std_ReturnType FrIf_GetClockCorrection (uint8 FrIf_CtrlIdx,sint16* FrIf_RateCorrectionPtr,sint32* FrIf_OffsetCorrectionPtr)",
                "comments": "Wraps the FlexRay Driver API function Fr_GetClockCorrection() and gets the current clock correction values."
            },
            "42": {
                "name": "FrIf_GetSyncFrameList",
                "type": "Std_ReturnType FrIf_GetSyncFrameList (uint8 FrIf_CtrlIdx,uint8 FrIf_ListSize,uint16* FrIf_ChannelAEvenListPtr,uint16* FrIf_ChannelBEvenListPtr,uint16* FrIf_ChannelAOddListPtr,uint16* FrIf_ChannelBOddListPtr)",
                "comments": "Wraps the FlexRay Driver API function Fr_GetSyncFrameList and gets a list of sync frames received or transmitted on channel A and channel B via the even and odd communication cycle."
            },
            "52": {
                "name": "FrIf_GetNumOfStartupFrames",
                "type": "Std_ReturnType FrIf_GetNumOfStartupFrames (uint8 FrIf_CtrlIdx,uint8* FrIf_NumOfStartupFramesPtr)",
                "comments": "Wraps the FlexRay Driver API function Fr_GetNumOfStartupFrames and gets a list of the current number of startup frames seen on the cluster. See variable vStartupPairs of 12 for details."
            },
            "43": {
                "name": "FrIf_GetWakeupRxStatus",
                "type": "Std_ReturnType FrIf_GetWakeupRxStatus (uint8 FrIf_CtrlIdx,uint8* FrIf_WakeupRxStatusPtr)",
                "comments": "Wraps the FlexRay Driver API function Fr_GetWakeupRxStatus and gets the wakeup received information from the FlexRay controller."
            },
            "74": {
                "name": "FrIf_CancelTransmit",
                "type": "Std_ReturnType FrIf_CancelTransmit (PduIdType TxPduId)",
                "comments": "Requests cancellation of an ongoing transmission of a PDU in a lower layer communication module."
            },
            "40": {
                "name": "FrIf_DisableLPdu",
                "type": "Std_ReturnType FrIf_DisableLPdu (uint8 FrIf_CtrlIdx,uint16 FrIf_LPduIdx)",
                "comments": "Wraps the FlexRay Driver Function Fr_DisableLPdu. It disables the hardware resource of an LPdu for transmission/reception."
            },
            "53": {
                "name": "FrIf_GetTransceiverError",
                "type": "Std_ReturnType FrIf_GetTransceiverError (uint8 FrIf_CtrlIdx,Fr_ChannelType FrIf_ChnlIdx,uint8 FrIf_BranchIdx,uint32* FrIf_BusErrorState)",
                "comments": "Wraps the FlexRay Transceiver Driver API function FrTrcv_GetTransceiverError. The enum value \"FR_CHANNEL_AB\" shall not be used."
            },
            "54": {
                "name": "FrIf_EnableTransceiverBranch",
                "type": "Std_ReturnType FrIf_EnableTransceiverBranch (uint8 FrIf_CtrlIdx,Fr_ChannelType FrIf_ChnlIdx,uint8 FrIf_BranchIdx)",
                "comments": "Wraps the FlexRay Transceiver Driver API function FrTrcv_EnableTransceiverBranch. The enum value \"FR_CHANNEL_AB\" shall not be used."
            },
            "55": {
                "name": "FrIf_DisableTransceiverBranch",
                "type": "Std_ReturnType FrIf_DisableTransceiverBranch (uint8 FrIf_CtrlIdx,Fr_ChannelType FrIf_ChnlIdx,uint8 FrIf_BranchIdx)",
                "comments": "Wraps the FlexRay Transceiver Driver API function FrTrcv_DisableTransceiverBranch. The enum value \"FR_CHANNEL_AB\" shall not be used."
            },
            "0": {
                "name": "FrIf_ReconfigLPdu",
                "type": "Std_ReturnType FrIf_ReconfigLPdu (uint8 FrIf_CtrlIdx,uint16 FrIf_LPduIdx,uint16 FrIf_FrameId,Fr_ChannelType FrIf_ChnlIdx,uint8 FrIf_CycleRepetition,uint8 FrIf_CycleOffset,uint8 FrIf_PayloadLength,uint16 FrIf_HeaderCRC)",
                "comments": "Call the FlexRay Driver\u2019s API Fr_ReconfigLPdu. The enum value \"FR_CHANNEL_AB\" shall not be used."
            },
            "15": {
                "name": "FrIf_GetNmVector",
                "type": "Std_ReturnType FrIf_GetNmVector (uint8 FrIf_CtrlIdx,uint8* FrIf_NmVectorPtr)",
                "comments": "Derives the FlexRay NM Vector."
            },
            "1": {
                "name": "FrIf_GetVersionInfo",
                "type": "void FrIf_GetVersionInfo (Std_VersionInfoType* FrIf_VersionInfoPtr)",
                "comments": "Returns the version information of this module."
            },
            "59": {
                "name": "FrIf_ReadCCConfig",
                "type": "Std_ReturnType FrIf_ReadCCConfig (uint8 FrIf_CtrlIdx,uint8 FrIf_ConfigParamIdx,uint32* FrIf_ConfigParamValuePtr)",
                "comments": "Wraps the FlexRay Driver API function Fr_ReadCCConfig()."
            },
            "75": {
                "name": "FrIf_EnableBusMirroring",
                "type": "Std_ReturnType FrIf_EnableBusMirroring (uint8 FrIf_ClstIdx,boolean FrIf_MirroringActive)",
                "comments": "Enables or disables mirroring for all FlexRay controllers connected to the addressed FlexRay cluster."
            },
            "50": {
                "name": "FrIf_JobListExec_FrIfCluster_ShortName",
                "type": "void FrIf_JobListExec_FrIfCluster_ShortName (void)",
                "comments": "Processes the FlexRay Job List of the FlexRay Cluster with index ClstIdx."
            },
            "57": {
                "name": "FrIf_CheckWakeupByTransceiver",
                "type": "void FrIf_CheckWakeupByTransceiver (uint8 FrIf_CtrlIdx,Fr_ChannelType FrIf_ChnlIdx)",
                "comments": "Wraps the FlexRay Transceiver Driver API function FrTrcv_CheckWakeupByTransceiver(). The enum value \"FR_CHANNEL_AB\" shall not be used."
            },
            "39": {
                "name": "FrIf_MainFunction_FrIfCluster_ShortName",
                "type": "void FrIf_MainFunction_FrIfCluster_ShortName (void)",
                "comments": "This function will be called cyclically by a task body provided by the BSW Scheduler."
            }
        }
    },
    "36": {
        "name": "FlexRay ISO Transport Layer",
        "short_name": "FrTp",
        "functions": {
            "39": {
                "name": "FrTp_GetVersionInfo",
                "type": "void FrTp_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information."
            },
            "0": {
                "name": "FrTp_Init",
                "type": "void FrTp_Init (const FrTp_ConfigType* configPtr)",
                "comments": "This service initializes all global variables of a FlexRay Transport Layer instance and sets it in the idle state. It has no return value because software errors in initialization data shall be detected during configuration time (e.g., by configuration tool)."
            },
            "1": {
                "name": "FrTp_Shutdown",
                "type": "void FrTp_Shutdown (void)",
                "comments": "This service closes all pending transport protocol connections by simply stopping operation, frees all resources, and stops the FrTp Module."
            },
            "73": {
                "name": "FrTp_Transmit",
                "type": "Std_ReturnType FrTp_Transmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests the transmission of a PDU."
            },
            "74": {
                "name": "FrTp_CancelTransmit",
                "type": "Std_ReturnType FrTp_ChangeParameter (PduIdType id,TPParameterType parameter,uint16 value)",
                "comments": "Requests cancellation of an ongoing transmission of a PDU in a lower layer communication module."
            },
            "75": {
                "name": "FrTp_ChangeParameter",
                "type": "Std_ReturnType FrTp_ChangeParameter (PduIdType id,TPParameterType parameter,uint16 value)",
                "comments": "Request to change a specific transport protocol parameter (e.g., block size)."
            },
            "76": {
                "name": "FrTp_CancelReceive",
                "type": "Std_ReturnType FrTp_CancelReceive (PduIdType RxPduId)",
                "comments": "Requests cancellation of an ongoing reception of a PDU in a lower layer transport protocol module."
            },
            "65": {
                "name": "FrTp_TriggerTransmit",
                "type": "Std_ReturnType FrTp_TriggerTransmit (PduIdType TxPduId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr."
            },
            "66": {
                "name": "FrTp_RxIndication",
                "type": "void FrTp_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received Protocol Data Unit (PDU) from a lower layer communication interface module."
            },
            "64": {
                "name": "FrTp_TxConfirmation",
                "type": "void FrTp_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "16": {
                "name": "FrTp_MainFunction",
                "type": "void FrTp_MainFunction (void)",
                "comments": "Schedules the FlexRay TP (entry point for scheduling)."
            }
        }
    },
    "32": {
        "name": "FlexRay Network Management",
        "short_name": "FrNm",
        "functions": {
            "0": {
                "name": "FrNm_Init",
                "type": "void FrNm_Init (const FrNm_ConfigType* nmConfigPtr)",
                "comments": "Initializes the FlexRay NM and its internal state machine."
            },
            "1": {
                "name": "FrNm_PassiveStartUp",
                "type": "Std_ReturnType FrNm_PassiveStartUp (NetworkHandleType NetworkHandle)",
                "comments": "Initiate the Passive Startup of the FlexRay NM."
            },
            "2": {
                "name": "FrNm_NetworkRequest",
                "type": "Std_ReturnType FrNm_NetworkRequest (NetworkHandleType NetworkHandle)",
                "comments": "This function requests the network because the ECU needs to communicate on the bus. Network state shall be changed to 'requested'."
            },
            "3": {
                "name": "FrNm_NetworkRelease",
                "type": "Std_ReturnType FrNm_NetworkRelease (NetworkHandleType NetworkHandle)",
                "comments": "This function releases the network because the ECU doesn\u2019t have to communicate on the bus. Network state shall be changed to \u2018released\u2019."
            },
            "6": {
                "name": "FrNm_SetUserData",
                "type": "Std_ReturnType FrNm_SetUserData (NetworkHandleType NetworkHandle,const uint8* nmUserDataPtr)",
                "comments": "This function sets user data for NM-Data transmitted next on the bus."
            },
            "7": {
                "name": "FrNm_GetUserData",
                "type": "Std_ReturnType FrNm_GetUserData (NetworkHandleType NetworkHandle,uint8* nmUserDataPtr)",
                "comments": "This function gets user data from the last successfully received NM message."
            },
            "8": {
                "name": "FrNm_GetPduData",
                "type": "Std_ReturnType FrNm_GetPduData (NetworkHandleType NetworkHandle,uint8* nmPduData)",
                "comments": "Gets PDU data."
            },
            "9": {
                "name": "FrNm_RepeatMessageRequest",
                "type": "Std_ReturnType FrNm_RepeatMessageRequest (NetworkHandleType NetworkHandle)",
                "comments": "This function causes a Repeat Message Request to be transmitted next on the bus."
            },
            "10": {
                "name": "FrNm_GetNodeIdentifier",
                "type": "Std_ReturnType FrNm_GetNodeIdentifier (NetworkHandleType NetworkHandle,uint8* nmNodeIdPtr)",
                "comments": "This function gets the node identifier from the last successfully received NM-message."
            },
            "11": {
                "name": "FrNm_GetLocalNodeIdentifier",
                "type": "Std_ReturnType FrNm_GetLocalNodeIdentifier (NetworkHandleType NetworkHandle,uint8* nmNodeIdPtr)",
                "comments": "This function gets the node identifier configured for the local node."
            },
            "192": {
                "name": "FrNm_RequestBusSynchronization",
                "type": "Std_ReturnType FrNm_RequestBusSynchronization (NetworkHandleType NetworkHandle)",
                "comments": "This function has no functionality - the service is provided only to be compatible to future extensions and to be compatible to the CAN-NM interface."
            },
            "13": {
                "name": "FrNm_CheckRemoteSleepIndication",
                "type": "Std_ReturnType FrNm_CheckRemoteSleepIndication (NetworkHandleType NetworkHandle,boolean* nmRemoteSleepIndPtr)",
                "comments": "This function checks if remote sleep indication has taken place or not."
            },
            "14": {
                "name": "FrNm_GetState",
                "type": "Std_ReturnType FrNm_GetState (NetworkHandleType NetworkHandle,Nm_StateType* nmStatePtr,Nm_ModeType* nmModePtr)",
                "comments": "This function returns the state and the mode of the network management."
            },
            "15": {
                "name": "FrNm_GetVersionInfo",
                "type": "void FrNm_GetVersionInfo (Std_VersionInfoType* NmVerInfoPtr)",
                "comments": "Returns the version information."
            },
            "16": {
                "name": "FrNm_StartupError",
                "type": "void FrNm_StartupError (NetworkHandleType NetworkHandle)",
                "comments": "This function is called by the FrSM when synchronization of the FlexRay cluster could not be achieved."
            },
            "73": {
                "name": "FrNm_Transmit",
                "type": "Std_ReturnType FrNm_Transmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU."
            },
            "5": {
                "name": "FrNm_EnableCommunication",
                "type": "Std_ReturnType FrNm_EnableCommunication (NetworkHandleType nmChannelHandle)",
                "comments": "Enable the NMPDU transmission ability due to a ISO 14229 Communication Control (28 hex) service."
            },
            "12": {
                "name": "FrNm_DisableCommunication",
                "type": "Std_ReturnType FrNm_DisableCommunication (NetworkHandleType nmChannelHandle)",
                "comments": "Disable the NMPDU transmission ability due to a ISO 14229 Communication Control (28 hex) service."
            },
            "18": {
                "name": "FrNm_SetSleepReadyBit",
                "type": "Std_ReturnType FrNm_SetSleepReadyBit (NetworkHandleType nmChannelHandle,boolean nmSleepReadyBit)",
                "comments": "Set the NM Coordinator Sleep Ready bit in the Control Bit Vector"
            },
            "241": {
                "name": "FrNm_PnLearningRequest",
                "type": "Std_ReturnType FrNm_PnLearningRequest (NetworkHandleType NetworkHandle)",
                "comments": "Set Repeat Message Request Bit and Partial Network Learning Bit for NM messages transmitted next on the bus. This will force all nodes to enter the PNC Learning Phase. This is needed for the optional Dynamic PNC-to-channel mapping feature. Tags: atp. Status = draft"
            },
            "244": {
                "name": "FrNm_ActivateTxPnShutdownMsg",
                "type": "Std_ReturnType FrNm_ActivateTxPnShutdownMsg (NetworkHandleType nmChannelHandle)",
                "comments": "N Mindicate to activate the transmission of PN shutdown messages on the given NM-Channel. This results in transmission of a NM-PDU with PN SR bit set to 1 (PN shutdown message)."
            },
            "245": {
                "name": "FrNm_DeactivateTxPnShutdownMsg",
                "type": "Std_ReturnType FrNm_DeactivateTxPnShutdownMsg (NetworkHandleType nmChannelHandle)",
                "comments": "N Mindicate to deactivate the transmission of PN shutdown messages on the given NM-Channel. This results in transmission of usual NM-PDUs with PNSR bit set to 0."
            },
            "66": {
                "name": "FrNm_RxIndication",
                "type": "void FrNm_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "65": {
                "name": "FrNm_TriggerTransmit",
                "type": "Std_ReturnType FrNm_TriggerTransmit (PduIdType TxPduId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr."
            },
            "64": {
                "name": "FrNm_TxConfirmation",
                "type": "void FrNm_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "240": {
                "name": "FrNm_MainFunction_FrNmChannel_ShortName",
                "type": "void FrNm_MainFunction_FrNmChannel_ShortName (void)",
                "comments": "Main function of FlexRay NM."
            }
        }
    },
    "142": {
        "name": "FlexRay State Manager",
        "short_name": "FrSM",
        "functions": {
            "1": {
                "name": "FrSM_Init",
                "type": "void FrSM_Init (const FrSM_ConfigType* FrSM_ConfigPtr)",
                "comments": "Initialize the FlexRay State Manager."
            },
            "2": {
                "name": "FrSM_RequestComMode",
                "type": "Std_ReturnType FrSM_RequestComMode (NetworkHandleType NetworkHandle,ComM_ModeType ComM_Mode)",
                "comments": "This API function is used by the ComM to start up or shut down the communication on a FlexRay cluster."
            },
            "3": {
                "name": "FrSM_GetCurrentComMode",
                "type": "Std_ReturnType FrSM_GetCurrentComMode (NetworkHandleType NetworkHandle,ComM_ModeType* ComM_ModePtr)",
                "comments": "This API function can be used to determine the current communication mode of a FlexRay cluster."
            },
            "4": {
                "name": "FrSM_GetVersionInfo",
                "type": "void FrSM_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "This service returns the version information of this module. The version information includes: \u2022 Module Id \u2022 Vendor Id \u2022 Vendor specific version numbers (BSW00407). This function shall be precompile time configurable On/Off by the configuration parameter: FRSM_VERSION_INFO_API Hint: If source code for caller and callee of this function is available, this function should be realized as a macro. The macro should be defined in the module's header file."
            },
            "5": {
                "name": "FrSM_AllSlots",
                "type": "Std_ReturnType FrSM_AllSlots (NetworkHandleType NetworkHandle)",
                "comments": "This API function can be used to leave the Key Slot Only Mode."
            },
            "6": {
                "name": "FrSM_SetEcuPassive",
                "type": "Std_ReturnType FrSM_SetEcuPassive (boolean FrSM_Passive)",
                "comments": "This API function can be used to set all FlexRay clusters of the ECU to a receive-only mode."
            },
            "128": {
                "name": "FrSM_MainFunction_FrSMCluster_ShortName",
                "type": "void FrSM_MainFunction_FrSMCluster_ShortName (void)",
                "comments": "I'm sorry, but I can't see the text you want me to fix. Please provide the text, and I'll be happy to help you correct it!"
            }
        }
    },
    "71": {
        "name": "FlexRay Tranceiver Driver",
        "short_name": "FrTrcv",
        "functions": {
            "0": {
                "name": "FrTrcv_Init",
                "type": "void FrTrcv_Init (const FrTrcv_ConfigType* ConfigPtr)",
                "comments": "This service initializes the Fr Trcv."
            },
            "1": {
                "name": "FrTrcv_SetTransceiverMode",
                "type": "Std_ReturnType FrTrcv_SetTransceiverMode (uint8 FrTrcv_TrcvIdx,FrTrcv_TrcvModeType FrTrcv_TrcvMode)",
                "comments": "This service sets the transceiver mode."
            },
            "5": {
                "name": "FrTrcv_GetTransceiverMode",
                "type": "Std_ReturnType FrTrcv_GetTransceiverMode (uint8 FrTrcv_TrcvIdx,FrTrcv_TrcvModeType* FrTrcv_TrcvModePtr)",
                "comments": "This function returns the actual state of the transceiver."
            },
            "6": {
                "name": "FrTrcv_GetTransceiverWUReason",
                "type": "Std_ReturnType FrTrcv_GetTransceiverWUReason (uint8 FrTrcv_TrcvIdx,FrTrcv_TrcvWUReasonType* FrTrcv_TrcvWUReasonPtr)",
                "comments": "This function returns the wakeup reason."
            },
            "7": {
                "name": "FrTrcv_GetVersionInfo",
                "type": "void FrTrcv_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "This service returns the version information of this module."
            },
            "12": {
                "name": "FrTrcv_ClearTransceiverWakeup",
                "type": "Std_ReturnType FrTrcv_ClearTransceiverWakeup (uint8 FrTrcv_TrcvIdx)",
                "comments": "This function clears a pending wake up event."
            },
            "14": {
                "name": "FrTrcv_CheckWakeupByTransceiver",
                "type": "void FrTrcv_CheckWakeupByTransceiver (uint8 FrTrcv_TrcvIdx)",
                "comments": "I'm sorry, but it appears you haven't provided any text to fix. Please provide the text you'd like me to correct, and I'll be happy to help!"
            },
            "8": {
                "name": "FrTrcv_GetTransceiverError",
                "type": "Std_ReturnType FrTrcv_GetTransceiverError (uint8 FrTrcv_TrcvIdx,uint8 FrTrcv_BranchIdx,uint32* FrTrcv_BusErrorState)",
                "comments": "All mandatory errors defined by the FlexRay EPL 5 which are supported by the FlexRay transceiver hardware can be accessed via this API: In addition to errors on the physical layer and local to the ECU hardware, a global error flag is provided."
            },
            "15": {
                "name": "FrTrcv_DisableTransceiverBranch",
                "type": "Std_ReturnType FrTrcv_DisableTransceiverBranch (uint8 FrTrcv_TrcvIdx,uint8 FrTrcv_BranchIdx)",
                "comments": "This function disables the specified branch on the addressed (active star) transceiver."
            },
            "16": {
                "name": "FrTrcv_EnableTransceiverBranch",
                "type": "Std_ReturnType FrTrcv_EnableTransceiverBranch (uint8 FrTrcv_TrcvIdx,uint8 FrTrcv_BranchIdx)",
                "comments": "This function enables the specified branch on the addressed (active star) transceiver."
            },
            "13": {
                "name": "FrTrcv_MainFunction",
                "type": "void FrTrcv_MainFunction (void)",
                "comments": "I'm sorry, but it seems you haven't provided any specific text to fix. Please provide the text that needs correction, and I'll be glad to help!"
            }
        }
    },
    "11": {
        "name": "Function Inhibition Manager",
        "short_name": "FiM",
        "functions": {
            "0": {
                "name": "FiM_Init",
                "type": "void FiM_Init (const FiM_ConfigType* FiMConfigPtr)",
                "comments": "This service initializes the FIM."
            },
            "1": {
                "name": "FiM_GetFunctionPermission",
                "type": "Std_ReturnType FiM_GetFunctionPermission (FiM_FunctionIdType FID,boolean* Permission)",
                "comments": "This service reports the permission state to the functionality."
            },
            "7": {
                "name": "FiM_SetFunctionAvailable",
                "type": "Std_ReturnType FiM_SetFunctionAvailable (FiM_FunctionIdType FID,boolean Availability)",
                "comments": "This service sets the availability of a function. The function is only available if FiM Availability Support is configured as True."
            },
            "2": {
                "name": "FiM_DemTriggerOnMonitorStatus",
                "type": "void FiM_DemTriggerOnMonitorStatus (Dem_EventIdType EventId)",
                "comments": "This service is provided to be called by the Demin order to inform the Fim about monitor status changes."
            },
            "6": {
                "name": "FiM_DemTriggerOnComponentStatus",
                "type": "void FiM_DemTriggerOnComponentStatus (Dem_ComponentIdType ComponentId,boolean ComponentFailedStatus)",
                "comments": "Trigger son changes of the component failed status."
            },
            "3": {
                "name": "FiM_DemInit",
                "type": "void FiM_DemInit (void)",
                "comments": "This service re-initializes the FIM."
            },
            "4": {
                "name": "FiM_GetVersionInfo",
                "type": "void FiM_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "This service returns the version information of this module."
            },
            "5": {
                "name": "FiM_MainFunction",
                "type": "void FiM_MainFunction (void)",
                "comments": "I'm sorry, but I can't assist with that without the text you'd like me to fix. Please provide the text, and I'll be happy to help!"
            }
        }
    },
    "100": {
        "name": "GPT Driver",
        "short_name": "Gpt",
        "functions": {
            "0": {
                "name": "Gpt_GetVersionInfo",
                "type": "void Gpt_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information of this module."
            },
            "1": {
                "name": "Gpt_Init",
                "type": "void Gpt_Init (const Gpt_ConfigType* ConfigPtr)",
                "comments": "Initialize the GPT driver."
            },
            "2": {
                "name": "Gpt_DeInit",
                "type": "void Gpt_DeInit (void)",
                "comments": "Deinitializes the GPT driver."
            },
            "3": {
                "name": "Gpt_GetTimeElapsed",
                "type": "Gpt_ValueType Gpt_GetTimeElapsed (Gpt_ChannelType Channel)",
                "comments": "Returns the time already elapsed."
            },
            "4": {
                "name": "Gpt_GetTimeRemaining",
                "type": "Gpt_ValueType Gpt_GetTimeRemaining (Gpt_ChannelType Channel)",
                "comments": "Returns the time remaining until the target time is reached."
            },
            "5": {
                "name": "Gpt_StartTimer",
                "type": "void Gpt_StartTimer (Gpt_ChannelType Channel,Gpt_ValueType Value)",
                "comments": "Starts a timer channel."
            },
            "6": {
                "name": "Gpt_StopTimer",
                "type": "void Gpt_StopTimer (Gpt_ChannelType Channel)",
                "comments": "Stop, sat, a timer channel."
            },
            "7": {
                "name": "Gpt_EnableNotification",
                "type": "void Gpt_EnableNotification (Gpt_ChannelType Channel)",
                "comments": "Enables the interrupt notification for a channel (relevant in normal mode)."
            },
            "8": {
                "name": "Gpt_DisableNotification",
                "type": "void Gpt_DisableNotification (Gpt_ChannelType Channel)",
                "comments": "Disables the interrupt notification for a channel (relevant in normal mode)."
            },
            "9": {
                "name": "Gpt_SetMode",
                "type": "void Gpt_SetMode (Gpt_ModeType Mode)",
                "comments": "Sets the operation mode of the GPT."
            },
            "10": {
                "name": "Gpt_DisableWakeup",
                "type": "void Gpt_DisableWakeup (Gpt_ChannelType Channel)",
                "comments": "Disables the wake-up interrupt of a channel (relevant in sleep mode)."
            },
            "11": {
                "name": "Gpt_EnableWakeup",
                "type": "void Gpt_EnableWakeup (Gpt_ChannelType Channel)",
                "comments": "Enables the wakeup interrupt of a channel (relevant in sleep mode)."
            },
            "12": {
                "name": "Gpt_CheckWakeup",
                "type": "void Gpt_CheckWakeup (EcuM_WakeupSourceType WakeupSource)",
                "comments": "Checks if a wake up capable GPT channel is the source for a wake up event and calls the ECU state manager service EcuM_SetWakeupEvent in case of a valid GPT channel wake up event."
            },
            "13": {
                "name": "Gpt_GetPredefTimerValue",
                "type": "Std_ReturnType Gpt_GetPredefTimerValue (Gpt_PredefTimerType PredefTimer,uint32* TimeValuePtr)",
                "comments": "Delivers the current value of the desired GPT Predef Timer."
            }
        }
    },
    "17": {
        "name": "HW Test Manager on start up andshutdown",
        "short_name": "HTMSS",
        "functions": {
            "1": {
                "name": "HTMSS_Init",
                "type": "void HTMSS_Init (const HTMSS_TestCfgType* ConfigPtr)",
                "comments": "Initializes the HTMSS module."
            },
            "3": {
                "name": "HTMSS_StartTest",
                "type": "Std_ReturnType HTMSS_StartTest (HTMSS_TestGroupType GrpId)",
                "comments": "Starts the configured MSTP tests."
            },
            "4": {
                "name": "HTMSS_GetTestStatus",
                "type": "HTMSS_TestStatusType HTMSS_GetTestStatus (HTMSS_TestGroupType GrpId,HTMSS_TestResultType* RequestTestResultPtr)",
                "comments": "Returns the current test status for the requested test."
            },
            "6": {
                "name": "HTMSS_GetVersionInfo",
                "type": "void HTMSS_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Sure! Please provide the text that you would like me to fix."
            },
            "7": {
                "name": "HTMSS_ StartupTestErrorHook",
                "type": "void HTMSS_ StartupTestErrorHook (void)",
                "comments": "The ECU State Manager will call the error hook if the HTMSS-provided startup test results have a failure. In this situation, the integrator has to control the CPU processing based on the system requirements, i.e., reset, safe state, etc."
            },
            "8": {
                "name": "HTMSS_ ShutdownTestErrorHook",
                "type": "void HTMSS_ ShutdownTestErrorHook (void)",
                "comments": "The ECU State Manager will call the error hook if the HTMSS provided shutdown test results have a failure. In this situation, the integrator has to control the CPU processing based on the system requirements, i.e. reset, safe state, etc."
            }
        }
    },
    "122": {
        "name": "ICU Driver",
        "short_name": "Icu",
        "functions": {
            "0": {
                "name": "Icu_Init",
                "type": "void Icu_Init (const Icu_ConfigType* ConfigPtr)",
                "comments": "This function initializes the driver."
            },
            "1": {
                "name": "Icu_DeInit",
                "type": "void Icu_DeInit (void)",
                "comments": "This function deinitializes the ICU module."
            },
            "2": {
                "name": "Icu_SetMode",
                "type": "void Icu_SetMode (Icu_ModeType Mode)",
                "comments": "This function sets the ICU (Intensive Care Unit) mode."
            },
            "3": {
                "name": "Icu_DisableWakeup",
                "type": "void Icu_DisableWakeup (Icu_ChannelType Channel)",
                "comments": "This function disables the wake-up capability of a single ICU channel."
            },
            "4": {
                "name": "Icu_EnableWakeup",
                "type": "void Icu_EnableWakeup (Icu_ChannelType Channel)",
                "comments": "This function re-enables the wakeup capability of the given ICU channel."
            },
            "21": {
                "name": "Icu_CheckWakeup",
                "type": "void Icu_CheckWakeup (EcuM_WakeupSourceType WakeupSource)",
                "comments": "Checks if a wakeup capable ICU channel is the source for a wakeup event and calls the ECU state manager service EcuM_SetWakeupEvent in case of a valid ICU channel wakeup event."
            },
            "5": {
                "name": "Icu_SetActivationCondition",
                "type": "void Icu_SetActivationCondition (Icu_ChannelType Channel,Icu_ActivationType Activation)",
                "comments": "This function sets the activation edge for the given channel."
            },
            "6": {
                "name": "Icu_DisableNotification",
                "type": "void Icu_DisableNotification (Icu_ChannelType Channel)",
                "comments": "This function disables the notifications of a channel."
            },
            "7": {
                "name": "Icu_EnableNotification",
                "type": "void Icu_EnableNotification (Icu_ChannelType Channel)",
                "comments": "This function enables the notification on the given channel."
            },
            "8": {
                "name": "Icu_GetInputState",
                "type": "Icu_InputStateType Icu_GetInputState (Icu_ChannelType Channel)",
                "comments": "This function returns the status of the ICU input."
            },
            "9": {
                "name": "Icu_StartTimestamp",
                "type": "void Icu_StartTimestamp (Icu_ChannelType Channel,Icu_ValueType* BufferPtr,uint16 BufferSize,uint16 NotifyInterval)",
                "comments": "This function starts the capturing of timer values on the rising and falling edges."
            },
            "10": {
                "name": "Icu_StopTimestamp",
                "type": "void Icu_StopTimestamp (Icu_ChannelType Channel)",
                "comments": "This function stops the measurement of the timestamp for the given channel."
            },
            "11": {
                "name": "Icu_GetTimestampIndex",
                "type": "Icu_IndexType Icu_GetTimestampIndex (Icu_ChannelType Channel)",
                "comments": "This function reads the timestamp index of the given channel."
            },
            "12": {
                "name": "Icu_ResetEdgeCount",
                "type": "void Icu_ResetEdgeCount (Icu_ChannelType Channel)",
                "comments": "This function resets the value of the counted edges to zero."
            },
            "13": {
                "name": "Icu_EnableEdgeCount",
                "type": "void Icu_EnableEdgeCount (Icu_ChannelType Channel)",
                "comments": "This function enables the counting of edges in the given channel."
            },
            "22": {
                "name": "Icu_EnableEdgeDetection",
                "type": "void Icu_EnableEdgeDetection (Icu_ChannelType Channel)",
                "comments": "This function enables or re-enables the detection of edges in the given channel."
            },
            "23": {
                "name": "Icu_DisableEdgeDetection",
                "type": "void Icu_DisableEdgeDetection (Icu_ChannelType Channel)",
                "comments": "This function disables the detection of the edges of the given channel."
            },
            "14": {
                "name": "Icu_DisableEdgeCount",
                "type": "void Icu_DisableEdgeCount (Icu_ChannelType Channel)",
                "comments": "This function disables the counting of edges for the given channel."
            },
            "15": {
                "name": "Icu_GetEdgeNumbers",
                "type": "Icu_EdgeNumberType Icu_GetEdgeNumbers (Icu_ChannelType Channel)",
                "comments": "This function reads the number of counted edges."
            },
            "19": {
                "name": "Icu_StartSignalMeasurement",
                "type": "void Icu_StartSignalMeasurement (Icu_ChannelType Channel)",
                "comments": "This function starts the measurement of signals."
            },
            "20": {
                "name": "Icu_StopSignalMeasurement",
                "type": "void Icu_StopSignalMeasurement (Icu_ChannelType Channel)",
                "comments": "This function stops the measurement of signals from the given channel."
            },
            "16": {
                "name": "Icu_GetTimeElapsed",
                "type": "Icu_ValueType Icu_GetTimeElapsed (Icu_ChannelType Channel)",
                "comments": "This function reads the elapsed signal low time for the given channel."
            },
            "17": {
                "name": "Icu_GetDutyCycleValues",
                "type": "void Icu_GetDutyCycleValues (Icu_ChannelType Channel,Icu_DutyCycleType* DutyCycleValues)",
                "comments": "This function reads the coherent active time and period time for the given ICU Channel."
            },
            "18": {
                "name": "Icu_GetVersionInfo",
                "type": "void Icu_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "This function returns the version information of this module."
            },
            "24": {
                "name": "Icu_DisableNotificationAsync",
                "type": "void Icu_DisableNotificationAsync (Icu_ChannelType Channel)",
                "comments": "This function disables the notifications of a channel."
            },
            "25": {
                "name": "Icu_EnableNotificationAsync",
                "type": "void Icu_EnableNotificationAsync (Icu_ChannelType Channel)",
                "comments": "This function enables notifications on the given channel."
            }
        }
    },
    "131": {
        "name": "IEEE1722 Transport Layer",
        "short_name": "IEEE1722Tp",
        "functions": {
            "1": {
                "name": "IEEE1722Tp_Init",
                "type": "void IEEE1722Tp_Init (const IEEE1722Tp_ConfigType* ConfigPtr)",
                "comments": "This function initializes the IEEE 1722 Tp module. In configurations in which IEEE 1722 Tp is assigned to more than one partition (i.e. IEEE 1722 Tp Main Functions are mapped to partitions), IEEE 1722 Tp may provide one init function per partition. Tags: atp. Status = draft"
            },
            "2": {
                "name": "IEEE1722Tp_DeInit",
                "type": "void IEEE1722Tp_DeInit (void)",
                "comments": "This function resets the IEEE 1722 Tpmodule to the uninitialized state. Tags: atp. Status = draft"
            },
            "3": {
                "name": "IEEE1722Tp_GetVersionInfo",
                "type": "void IEEE1722Tp_GetVersionInfo (Std_VersionInfoType* versionInfo)",
                "comments": "Returns the version information of this module. Tags: atp. Status = draft"
            },
            "6": {
                "name": "IEEE1722Tp_ActivateStream",
                "type": "Std_ReturnType IEEE1722Tp_ActivateStream (IEEE1722Tp_StreamIndexType StreamIndex)",
                "comments": "Request to activate a stream of the given stream index. Tags: atp. Status = draft"
            },
            "7": {
                "name": "IEEE1722Tp_DeactivateStream",
                "type": "Std_ReturnType IEEE1722Tp_DeactivateStream (IEEE1722Tp_StreamIndexType StreamIndex)",
                "comments": "Request to deactivate a stream of the given stream index. Tags: atp. Status = draft"
            },
            "4": {
                "name": "IEEE1722Tp_Transmit",
                "type": "Std_ReturnType IEEE1722Tp_Transmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU. Tags: atp. Status = draft"
            },
            "5": {
                "name": "IEEE1722Tp_ReleaseRxBuffer",
                "type": "void IEEE1722Tp_ReleaseRxBuffer (PduIdType RxPduId)",
                "comments": "Indication from the upper layer to release the lower layer reception buffer. Tags: atp. Status = draft"
            },
            "8": {
                "name": "IEEE1722Tp_TxConfirmation",
                "type": "void IEEE1722Tp_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU. Tags: atp. Status = draft"
            },
            "9": {
                "name": "IEEE1722Tp_RxIndication",
                "type": "void IEEE1722Tp_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "The lower layer communication interface module indicates the reception of a PDU. Tags: atp. Status = draft"
            },
            "10": {
                "name": "IEEE1722Tp_MainFunctionTx",
                "type": "void IEEE1722Tp_MainFunctionTx (void)",
                "comments": "The function issues transmission requests in polling mode. Tags: atp.Status = draft"
            },
            "11": {
                "name": "IEEE1722Tp_MainFunctionRx",
                "type": "void IEEE1722Tp_MainFunctionRx (void)",
                "comments": "The function issues reception indications in polling mode. Tags: atp. Status = draft"
            }
        }
    },
    "108": {
        "name": "Intrusion Detection SystemManager",
        "short_name": "IdsM",
        "functions": {
            "0": {
                "name": "IdsM_Init",
                "type": "void IdsM_Init (const IdsM_ConfigType* configPtr)",
                "comments": "Service to initialize the module Ids M. It initializes all variables and sets the module state to initialized."
            },
            "1": {
                "name": "IdsM_GetVersionInfo",
                "type": "void IdsM_GetVersionInfo (Std_VersionInfoType* versionInfo)",
                "comments": "Returns version information, vendor ID and AUTOSAR module ID of the component."
            },
            "2": {
                "name": "IdsM_MainFunction",
                "type": "void IdsM_MainFunction (void)",
                "comments": "This function is called periodically. It processes security events asynchronously which are queued during API function calls."
            },
            "67": {
                "name": "IdsM_CopyTxData",
                "type": "BufReq_ReturnType IdsM_CopyTxData (PduIdType id,const PduInfoType* info,const RetryInfoType* retry,PduLengthType* availableDataPtr)",
                "comments": "This function is called to request transmit data of the TPI d s M-Upper Layer Tx Pdu. The function can be called several times and each call to this function copies the next part of the data to be transmitted."
            },
            "3": {
                "name": "IdsM_SetSecurityEvent",
                "type": "void IdsM_SetSecurityEvent (IdsM_SecurityEventIdType securityEventId)",
                "comments": "This API is the application interface to report security events to the IdsM."
            },
            "4": {
                "name": "IdsM_SetSecurityEventWithContextData",
                "type": "void IdsM_SetSecurityEventWithContextData (IdsM_SecurityEventIdType securityEventId,const uint8* contextData,uint16 contextDataSize)",
                "comments": "This API is the application interface to report security events with context data to the Ids M."
            },
            "5": {
                "name": "IdsM_SetSecurityEventWithCount",
                "type": "void IdsM_SetSecurityEventWithCount (IdsM_SecurityEventIdType securityEventId,uint16 count)",
                "comments": "This API is the application interface for Smart Sensors to report security events with a count value to the Ids M."
            },
            "6": {
                "name": "IdsM_SetSecurityEventWithCountContextData",
                "type": "void IdsM_SetSecurityEventWithCountContextData (IdsM_SecurityEventIdType securityEventId,uint16 count,const uint8* contextData,uint16 contextDataSize)",
                "comments": "This API is the application interface for Smart Sensors to report security events with a count value and context data to the IdsM."
            },
            "7": {
                "name": "IdsM_SetSecurityEventWithTimestampCount",
                "type": "void IdsM_SetSecurityEventWithTimestampCount (IdsM_SecurityEventIdType securityEventId,IdsM_TimestampType timestamp,uint16 count)",
                "comments": "This API is the application interface for Smart Sensors to report security events with a timestamp and a count value to the Ids M."
            },
            "8": {
                "name": "IdsM_SetSecurityEventWithTimestampCountContextData",
                "type": "void IdsM_SetSecurityEventWithTimestampCountContextData (IdsM_SecurityEventIdType securityEventId,IdsM_TimestampType timestamp,uint16 count,const uint8* contextData,uint16 contextDataSize)",
                "comments": "This API is the application interface for Smart Sensors to report security events with a timestamp, a count value and context data to the IDS M."
            },
            "15": {
                "name": "IdsM_BswM_StateChanged",
                "type": "void IdsM_BswM_StateChanged (IdsM_Filters_BlockStateType state)",
                "comments": "This callback function is invoked by the BswM to indicate ECU state changes."
            },
            "72": {
                "name": "IdsM_TpTxConfirmation",
                "type": "void IdsM_TpTxConfirmation (PduIdType id,Std_ReturnType result)",
                "comments": "The function is called to confirm a successful transmission of the TPId's M-UpperLayerTxPdu or to report an error that occurred during transmission."
            },
            "64": {
                "name": "IdsM_TxConfirmation",
                "type": "void IdsM_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The function is called to confirm the complete transmission of the IFI DsM-Upper Layer Tx Pdu."
            },
            "13": {
                "name": "IdsM_Dcm_GetReportingMode_RequestResults",
                "type": "Std_ReturnType IdsM_Dcm_GetReportingMode_RequestResults (Dcm_OpStatusType OpStatus ,uint8* Out_ReportingMode,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function is a request from DCM to the Ids M to read the routine results triggered by function Ids M_Dcm_GetReportingMode_Start()."
            },
            "12": {
                "name": "IdsM_Dcm_GetReportingMode_Start",
                "type": "Std_ReturnType IdsM_Dcm_GetReportingMode_Start (uint16 In_SecurityEventId,uint8 In_SensorInstanceId,Dcm_OpStatusType OpStatus,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function is a request from DCM to the Ids M to start the routine execution to request the current reporting mode of a specific Security Event ID."
            },
            "14": {
                "name": "IdsM_Dcm_SetReportingMode_Start",
                "type": "Std_ReturnType IdsM_Dcm_SetReportingMode_Start (uint16 In_SecurityEventId,uint8 In_SensorInstanceId,uint8 In_ReportingMode,Dcm_OpStatusType OpStatus,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function is a request from DCM to the IDs M to start the routine execution to set the reporting mode of a specific Security Event ID."
            }
        }
    },
    "254": {
        "name": "IO HW Abstraction",
        "short_name": "IoHwAb",
        "functions": {
            "1": {
                "name": "IoHwAb_InitInit_Id",
                "type": "void IoHwAb_InitInit_Id (const IoHwAb_Init_Id_ConfigType* ConfigPtr)",
                "comments": "Initializes either all the IO Hardware Abstraction software or is a part of the IO Hardware Abstraction."
            },
            "16": {
                "name": "IoHwAb_GetVersionInfo",
                "type": "void IoHwAb_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "32": {
                "name": "IoHwAb_AdcNotification_groupID",
                "type": "void IoHwAb_AdcNotification_groupID (void)",
                "comments": "Will be called by the ADC Driver when a group conversion is completed for group <_groupID>."
            },
            "48": {
                "name": "IoHwAb_PwmNotification_channel",
                "type": "void IoHwAb_PwmNotification_channel (void)",
                "comments": "Will be called by the PWM Driver when a signal edge occurs on channel <_channel>."
            },
            "64": {
                "name": "IoHwAb_IcuNotification_channel",
                "type": "void IoHwAb_IcuNotification_channel (void)",
                "comments": "Will be called by the ICU driver when a signal edge occurs on channel <_channel>."
            },
            "80": {
                "name": "IoHwAb_GptNotification_channel",
                "type": "void IoHwAb_OcuNotification_channel (void)",
                "comments": "Will be called by the GPT driver when a timer value expires on channel <_channel>."
            },
            "160": {
                "name": "IoHwAb_OcuNotification_channel",
                "type": "void IoHwAb_OcuNotification_channel (void)",
                "comments": "Will be called by the OCU driver when the current value of the threshold matches the threshold on the channel <_channel>."
            },
            "96": {
                "name": "IoHwAb_Pwm_NotifyReadyForPowerState_Mode",
                "type": "void IoHwAb_Pwm_NotifyReadyForPowerState_Mode (void)",
                "comments": "The API shall be invoked by the PWM Driver when the requested power state preparation for mode <_Mode> is completed."
            },
            "112": {
                "name": "IoHwAb_Adc_NotifyReadyForPowerState_Mode",
                "type": "void IoHwAb_Adc_NotifyReadyForPowerState_Mode (void)",
                "comments": "The API shall be invoked by the ADC Driver when the requested power state preparation for mode <_Mode> is completed."
            },
            "176": {
                "name": "IoHwAb_Dcm_EcuSignalName",
                "type": "void IoHwAb_Dcm_EcuSignalName (uint8 action,EcuSignalDataType signal)",
                "comments": "This function provides controlled access to a certain ECU signal to the DCM module ( <EcuSignalName> is the symbolic name of an ECU signal). The ECU signal can be locked and unlocked by this function. Locking 'freezes' the ECU signal to the current value, the configured default value, or a value given by the parameter 'signal'."
            },
            "192": {
                "name": "IoHwAb_Dcm_ReadEcuSignalName",
                "type": "void IoHwAb_Dcm_ReadEcuSignalName (EcuSignalDataType* signal)",
                "comments": "This function provides read access to a certain ECU signal to the DCM module (EcuSignalName is the symbolic name of an ECU signal)."
            },
            "128": {
                "name": "IoHwAb_PreparePowerState_Mode",
                "type": "void IoHwAb_PreparePowerState_Mode (void)",
                "comments": "The API shall be invoked by the IoHwAbs in order to prepare the transition to a given power state. The aim of this API is to encapsulate all actions to prepare the HW for a predefined power mode, decoupling application power definition from HW power states."
            },
            "144": {
                "name": "IoHwAb_EnterPowerState_Mode",
                "type": "void IoHwAb_EnterPowerState_Mode (void)",
                "comments": "The API shall be invoked by the IoHwAbs in order to effectively enter a power state which was prepared by the API IoHwAb_PreparePowerState<_Mode>(). The aim of this API is to encapsulate all actions to set the HW in a power state corresponding to a predefined power mode, decoupling application power definition from HW power states."
            }
        }
    },
    "52": {
        "name": "IPDU Multiplexer",
        "short_name": "IpduM",
        "functions": {
            "0": {
                "name": "IpduM_Init",
                "type": "void IpduM_Init (const IpduM_ConfigType* config)",
                "comments": "Initializes the I-PDU Multiplexer. In configurations in which IpduM is assigned to more than one partition (i.e., IpduM_Main Functions are mapped to partitions), IpduM may provide one init function per partition."
            },
            "1": {
                "name": "IpduM_GetVersionInfo",
                "type": "void IpduM_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Service returns the version information of this module."
            },
            "73": {
                "name": "IpduM_Transmit",
                "type": "Std_ReturnType IpduM_Transmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU."
            },
            "66": {
                "name": "IpduM_RxIndication",
                "type": "void IpduM_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "64": {
                "name": "IpduM_TxConfirmation",
                "type": "void IpduM_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "65": {
                "name": "IpduM_TriggerTransmit",
                "type": "Std_ReturnType IpduM_TriggerTransmit (PduIdType TxPduId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr."
            },
            "18": {
                "name": "IpduM_MainFunctionTx",
                "type": "void IpduM_MainFunctionTx (void)",
                "comments": "This function performs the processing of the transmission activities that are not directly handled within the calls from PduR. Per configured IpduM Main Function Tx instance, one IpduM_MainFunctionTx_<shortName> shall be implemented. Hereby, <shortName> is the short name of the IpduM Main Function Tx configuration container in the ECU configuration."
            },
            "17": {
                "name": "IpduM_MainFunctionRx",
                "type": "void IpduM_MainFunctionRx (void)",
                "comments": "This function performs the processing of the reception activities that are not directly handled within the calls from PduR. Per configured IpduM Main Function Rx instance one IpduM_MainFunctionRx_<shortName> shall be implemented. Hereby <shortName> is the short name of the IpduM Main Function Rx configuration container in the ECU configuration."
            }
        }
    },
    "109": {
        "name": "Key Manager",
        "short_name": "KeyM",
        "functions": {
            "1": {
                "name": "KeyM_Init",
                "type": "void KeyM_Init (const KeyM_ConfigType* ConfigPtr)",
                "comments": "This function initializes the key management module."
            },
            "2": {
                "name": "KeyM_Deinit",
                "type": "void KeyM_Deinit (void)",
                "comments": "This function resets the key management module to the uninitialized state."
            },
            "3": {
                "name": "KeyM_GetVersionInfo",
                "type": "void KeyM_GetVersionInfo (Std_VersionInfoType* VersionInfo)",
                "comments": "Provides the version information of this module."
            },
            "4": {
                "name": "KeyM_Start",
                "type": "Std_ReturnType KeyM_Start (KeyM_StartType StartType,const uint8* RequestData,uint16 RequestDataLength,uint8* ResponseData,uint16* ResponseDataLength)",
                "comments": "This function is optional and only used if the configuration item KeyMCryptoKeyStartFinalizeFunctionEnabled is set to true. It intends to allow key update operation."
            },
            "5": {
                "name": "KeyM_Prepare",
                "type": "Std_ReturnType KeyM_Prepare (const uint8* RequestData,uint16 RequestDataLength,uint8* ResponseData,uint16* ResponseDataLength)",
                "comments": "This function is used to prepare a key update operation. The main intent is to provide information for the key operation to the key server. Other operations may start the negotiation for a common secret that is used further to derive key material. This function is only available if KeyMCryptoKeyPrepareFunctionEnabled is set to TRUE."
            },
            "6": {
                "name": "KeyM_Update",
                "type": "Std_ReturnType KeyM_Update (const uint8* KeyNamePtr,uint16 KeyNameLength,const uint8* RequestDataPtr,uint16 RequestDataLength,uint8* ResultDataPtr,uint16 ResultDataMaxLength)",
                "comments": "This function is used to initiate the key generation or update process."
            },
            "7": {
                "name": "KeyM_Finalize",
                "type": "Std_ReturnType KeyM_Finalize (const uint8* RequestDataPtr,uint16 RequestDataLength,uint8* ResponseDataPtr,uint16 ResponseMaxDataLength)",
                "comments": "The function is used to finalize key update operations. It is typically used in conjunction with the KeyM_Start operation and returns the key operation into the idle mode. Further key prepare or update operations are not accepted until a new KeyM_Start operation has been initialized. This function is only available if KeyMCryptoKeyStartFinalizeFunctionEnabled is set to TRUE. In addition, updated key material will be persisted and set into valid state (calling Csm_KeySetValid)."
            },
            "8": {
                "name": "KeyM_Verify",
                "type": "Std_ReturnType KeyM_Verify (const uint8* KeyNamePtr,uint16 KeyNameLength,const uint8* RequestData,uint16 RequestDataLength,uint8* ResponseData,uint16* ResponseDataLength)",
                "comments": "The key server requests to verify the provided keys. The key manager performs operation on the assigned job and returns the result to the key server who verifies if the result was provided with this key as expected. This function is only available if KeyM Crypto Key Verify Function Enabled is set to TRUE."
            },
            "9": {
                "name": "KeyM_ServiceCertificate",
                "type": "Std_ReturnType KeyM_ServiceCertificate (KeyM_ServiceCertificateType Service,const uint8* CertNamePtr,uint32 CertNameLength,const uint8* RequestData,uint32 RequestDataLength,uint8* ResponseData,uint32* ResponseDataLength)",
                "comments": "The key server requests an operation from the key client. The type of operation is specified in the first parameter KeyM_ServiceCertificateType. Certificate operation requests are operated through this function. This function is only available if the configuration parameter KeyMServiceCertificateFunctionEnabled is set to TRUE."
            },
            "19": {
                "name": "KeyM_ServiceCertificateByCertId",
                "type": "Std_ReturnType KeyM_ServiceCertificateByCertId (KeyM_CertificateIdType CertId,KeyM_ServiceCertificateType Service,const uint8* RequestData,uint32 RequestDataLength,uint8* ResponseData,uint32* ResponseDataLength)",
                "comments": "The key server requests an operation from the key client. The type of operation is specified in the parameter KeyM_ServiceCertificateType. Certificate operation requests are operated through this function. This function is only available if the configuration parameter KeyMServiceCertificateFunctionEnabled is set to TRUE. This function is identical to the function KeyM_ServiceCertificate(), but uses already the certificate identifier as parameter. In consequence there is no need to search the configured certificate by its name."
            },
            "10": {
                "name": "KeyM_SetCertificate",
                "type": "Std_ReturnType KeyM_SetCertificate (KeyM_CertificateIdType CertId,const KeyM_CertDataType* CertificateDataPtr)",
                "comments": "This function provides the certificate data to the key management module to temporarily store the certificate."
            },
            "11": {
                "name": "KeyM_GetCertificate",
                "type": "Std_ReturnType KeyM_GetCertificate (KeyM_CertificateIdType CertId,KeyM_CertDataType* CertificateDataPtr)",
                "comments": "This function provides the DER encoded certificate data."
            },
            "12": {
                "name": "KeyM_VerifyCertificates",
                "type": "Std_ReturnType KeyM_VerifyCertificates (KeyM_CertificateIdType CertId,KeyM_CertificateIdType CertUpperId)",
                "comments": "This function verifies two certificates that are stored and parsed internally against each other. The certificate referenced with CertId was signed by the certificate referenced with certUpperId. Only these two certificates are validated against each other."
            },
            "13": {
                "name": "KeyM_VerifyCertificate",
                "type": "Std_ReturnType KeyM_VerifyCertificate (KeyM_CertificateIdType CertId)",
                "comments": "This function verifies a certificate that was previously provided with KeyM_SetCertificate() against already stored and provided certificates stored with other certificate IDs."
            },
            "14": {
                "name": "KeyM_VerifyCertificateChain",
                "type": "Std_ReturnType KeyM_VerifyCertificateChain (KeyM_CertificateIdType CertId,const KeyM_CertDataType certChainData,uint8 NumberOfCertificates)",
                "comments": "This function performs a certificate verification against a list of certificates. It is a pre-requisite that the certificate that shall be checked has already been written with KeyM_SetCertificate() and that the root certificate is either in the list or is already assigned to one of the other certificates."
            },
            "15": {
                "name": "KeyM_CertElementGet",
                "type": "Std_ReturnType KeyM_CertElementGet (KeyM_CertificateIdType CertId,KeyM_CertElementIdType CertElementId,uint8* CertElementData,uint32* CertElementDataLength)",
                "comments": "Provides the content of a specific certificate element. The certificate configuration defines how the certificate submodule can find the element, e.g. by providing the object identifier (OID). This function is used to retrieve this information if only one element is assigned to the respective OID."
            },
            "27": {
                "name": "KeyM_CertificateElementGetByIndex",
                "type": "Std_ReturnType KeyM_CertificateElementGetByIndex (KeyM_CertificateIdType CertId,KeyM_CertElementIdType CertElementId,uint16 Index,uint8* CertElementDataPtr,uint32* CertElementDataLengthPtr)",
                "comments": "This function provides the element data of a certificate. The function is used if an element type can have more than one parameter. The index specifies which element shall be read. The function works similar to the KeyM_CertElementGetFirst/KeyM_CertElementGetNext, but instead of the iteration, the individual elements can be accessed by index (like the operation in the service interface)."
            },
            "28": {
                "name": "KeyM_CertificateElementGetCount",
                "type": "Std_ReturnType KeyM_CertificateElementGetCount (KeyM_CertificateIdType CertId,KeyM_CertElementIdType CertElementId,uint16* CountPtr)",
                "comments": "This function provides the total number of data elements that are available for the specified certificate element. Typically, only one data element is available. But in some cases, several data elements can be assigned to one certificate element in a row. This function retrieves the total number of elements. The individual data elements can then be accessed with KeyM_CertificateElementGetByIndex(). It is similar to the functions KeyM_CertElementGetFirst/KeyM_CertElementGetNext to retrieve a group of data elements of one certificate element."
            },
            "16": {
                "name": "KeyM_CertElementGetFirst",
                "type": "Std_ReturnType KeyM_CertElementGetFirst (KeyM_CertificateIdType CertId,KeyM_CertElementIdType CertElementId,KeyM_CertElementIteratorType* CertElementIterator,uint8* CertElementData,uint32* CertElementDataLength)",
                "comments": "This function is used to initialize the interative extraction of a certificate data element. It always retrieves the top element from the configured certificate element and initializes the structure KeyM_CertElementIterator so that consecutive data from this element can be read with KeyM_CertElementGetNext()."
            },
            "17": {
                "name": "KeyM_CertElementGetNext",
                "type": "Std_ReturnType KeyM_CertElementGetNext (KeyM_CertElementIteratorType* CertElementIterator,uint8* CertElementData,uint32* CertElementDataLength)",
                "comments": "This function provides further data from a certificate element, e.g. if a set of data are located in one certificate element that shall be read one after another. This function can only be called if the function KeyM_CertElementGetFirst() has been called once before."
            },
            "18": {
                "name": "KeyM_CertGetStatus",
                "type": "Std_ReturnType KeyM_CertGetStatus (KeyM_CertificateIdType CertId,KeyM_CertificateStatusType* Status)",
                "comments": "This function provides the status of a certificate."
            },
            "25": {
                "name": "KeyM_MainFunction",
                "type": "void KeyM_MainFunction (void)",
                "comments": "Function is called periodically according to the specified time interval."
            },
            "26": {
                "name": "KeyM_MainBackgroundFunction",
                "type": "void KeyM_MainBackgroundFunction (void)",
                "comments": "Function is called from a pre-emptive operating system when no other task operation is needed. Can be used for calling time-consuming synchronous functions such as KeyM_KH_Update()."
            }
        }
    },
    "49": {
        "name": "Large Data COM",
        "short_name": "LdCom",
        "functions": {
            "1": {
                "name": "LdCom_Init",
                "type": "void LdCom_Init (const LdCom_ConfigType* config)",
                "comments": "This service initializes internal and external interfaces and variables of the AUTOSAR LdCom module for the further processing."
            },
            "2": {
                "name": "LdCom_DeInit",
                "type": "void LdCom_DeInit (void)",
                "comments": "With a call to LdCom_DeInit the AUTOSAR LdCom module is put into an uninitialized state."
            },
            "3": {
                "name": "LdCom_GetVersionInfo",
                "type": "void LdCom_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "73": {
                "name": "LdCom_Transmit",
                "type": "Std_ReturnType LdCom_Transmit (PduIdType Id,const PduInfoType* InfoPtr)",
                "comments": "Requests transmission of a signal."
            },
            "67": {
                "name": "LdCom_CopyTxData",
                "type": "BufReq_ReturnType LdCom_CopyTxData (PduIdType id,const PduInfoType* info,const RetryInfoType* retry,PduLengthType* availableDataPtr)",
                "comments": "This function is called to acquire the transmit data of an I-PDU segment (N-PDU). Each call to this function provides the next part of the I-PDU data unless retry->TpDataState is TP_DATA_RETRY. In this case, the function restarts to copy the data beginning at the offset from the current position indicated by retry->TxTpDataCnt. The size of the remaining data is written to the position indicated by availableDataPtr."
            },
            "72": {
                "name": "LdCom_TpTxConfirmation",
                "type": "void LdCom_TpTxConfirmation (PduIdType id,Std_ReturnType result)",
                "comments": "This function is called after the I-PDU has been transmitted on its network, the result indicates whether the transmission was successful or not."
            },
            "70": {
                "name": "LdCom_StartOfReception",
                "type": "BufReq_ReturnType LdCom_StartOfReception (PduIdType id,const PduInfoType* info,PduLengthType TpSduLength,PduLengthType* bufferSizePtr)",
                "comments": "This function is called at the start of receiving an N-SDU. The N-SDU might be fragmented into multiple N-PDUs (FF with one or more following CFs) or might consist of a single N-PDU (SF). The service shall provide the currently available maximum buffer size when invoked with TpSduLength equal to 0."
            },
            "68": {
                "name": "LdCom_CopyRxData",
                "type": "BufReq_ReturnType LdCom_CopyRxData (PduIdType id,const PduInfoType* info,PduLengthType* bufferSizePtr)",
                "comments": "This function is called to provide the received data of an I-PDU segment (N-PDU) to the upper layer. Each call to this function provides the next part of the I-PDU data. The size of the remaining buffer is written to the position indicated by bufferSizePtr."
            },
            "69": {
                "name": "LdCom_TpRxIndication",
                "type": "void LdCom_TpRxIndication (PduIdType id,Std_ReturnType result)",
                "comments": "Called after an I-PDU has been received via the TP API, the result indicates whether the transmission was successful or not."
            },
            "66": {
                "name": "LdCom_RxIndication",
                "type": "void LdCom_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "64": {
                "name": "LdCom_TxConfirmation",
                "type": "void LdCom_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "65": {
                "name": "LdCom_TriggerTransmit",
                "type": "Std_ReturnType LdCom_TriggerTransmit (PduIdType TxPduId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr."
            }
        }
    },
    "82": {
        "name": "LIN Driver",
        "short_name": "Lin",
        "functions": {
            "0": {
                "name": "Lin_Init",
                "type": "void Lin_Init (const Lin_ConfigType* Config)",
                "comments": "Initializes the LIN module."
            },
            "10": {
                "name": "Lin_CheckWakeup",
                "type": "Std_ReturnType Lin_CheckWakeup (uint8 Channel)",
                "comments": "This function checks if a wake up has occurred on the addressed LIN channel."
            },
            "1": {
                "name": "Lin_GetVersionInfo",
                "type": "void Lin_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "4": {
                "name": "Lin_SendFrame",
                "type": "Std_ReturnType Lin_SendFrame (uint8 Channel,const Lin_PduType* PduInfoPtr)",
                "comments": "Sends a LIN header and a LIN response, if necessary. The direction of the frame response (master response, slave response, slave-to-slave communication) is provided by the PduInfoPtr. Only used for LIN master nodes."
            },
            "6": {
                "name": "Lin_GoToSleep",
                "type": "Std_ReturnType Lin_GoToSleep (uint8 Channel)",
                "comments": "The service instructs the driver to transmit a go-to-sleep command on the addressed LIN channel. Only used for LIN master nodes."
            },
            "9": {
                "name": "Lin_GoToSleepInternal",
                "type": "Std_ReturnType Lin_GoToSleepInternal (uint8 Channel)",
                "comments": "Sets the channel state to LIN_CH_SLEEP, enables the wake-up detection and optionally sets the LIN hardware unit to reduced power operation mode (if supported by HW)."
            },
            "7": {
                "name": "Lin_Wakeup",
                "type": "Std_ReturnType Lin_Wakeup (uint8 Channel)",
                "comments": "Generates a wakeup pulse and sets the channel state to LIN_CH_OPERATIONAL."
            },
            "11": {
                "name": "Lin_WakeupInternal",
                "type": "Std_ReturnType Lin_WakeupInternal (uint8 Channel)",
                "comments": "Sets the channel state to LIN_CH_OPERATIONAL without generating a wake up pulse."
            },
            "8": {
                "name": "Lin_GetStatus",
                "type": "Lin_StatusType Lin_GetStatus (uint8 Channel,const uint8** Lin_SduPtr)",
                "comments": "Get the status of the LIN driver. Only used for LIN master nodes."
            }
        }
    },
    "62": {
        "name": "LIN Interface",
        "short_name": "LinIf",
        "functions": {
            "1": {
                "name": "LinIf_Init",
                "type": "void LinIf_Init (const LinIf_ConfigType* ConfigPtr)",
                "comments": "Initialize the LIN Interface."
            },
            "3": {
                "name": "LinIf_GetVersionInfo",
                "type": "void LinIf_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "73": {
                "name": "LinIf_Transmit",
                "type": "Std_ReturnType LinIf_Transmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU."
            },
            "5": {
                "name": "LinIf_ScheduleRequest",
                "type": "Std_ReturnType LinIf_ScheduleRequest (NetworkHandleType Channel,LinIf_SchHandleType ScheduleTableIdx)",
                "comments": "Requests a schedule table to be executed. Only used for LIN masternodes."
            },
            "6": {
                "name": "LinIf_GotoSleep",
                "type": "Std_ReturnType LinIf_GotoSleep (NetworkHandleType Channel)",
                "comments": "Initiates a transition into the Sleep Mode on the selected channel."
            },
            "7": {
                "name": "LinIf_Wakeup",
                "type": "Std_ReturnType LinIf_Wakeup (NetworkHandleType Channel)",
                "comments": "Initiate the wake up process."
            },
            "8": {
                "name": "LinIf_SetTrcvMode",
                "type": "Std_ReturnType LinIf_SetTrcvMode (NetworkHandleType Channel,LinTrcv_TrcvModeType TransceiverMode)",
                "comments": "Set the given LIN transceiver to the given mode."
            },
            "9": {
                "name": "LinIf_GetTrcvMode",
                "type": "Std_ReturnType LinIf_GetTrcvMode (NetworkHandleType Channel,LinTrcv_TrcvModeType* TransceiverModePtr)",
                "comments": "Returns the actual state of a LIN Transceiver Driver."
            },
            "10": {
                "name": "LinIf_GetTrcvWakeupReason",
                "type": "Std_ReturnType LinIf_GetTrcvWakeupReason (NetworkHandleType Channel,LinTrcv_TrcvWakeupReasonType* TrcvWuReasonPtr)",
                "comments": "Returns the reason for the wake up that has been detected by the LIN Transceiver Driver."
            },
            "11": {
                "name": "LinIf_SetTrcvWakeupMode",
                "type": "Std_ReturnType LinIf_SetTrcvWakeupMode (NetworkHandleType Channel,LinTrcv_TrcvWakeupModeType LinTrcvWakeupMode)",
                "comments": "This API enables, disables and clears the notification for wake up events on the addressed network."
            },
            "114": {
                "name": "LinIf_GetPIDTable",
                "type": "Std_ReturnType LinIf_GetPIDTable (NetworkHandleType Channel,Lin_FramePidType* PidBuffer,uint8* PidBufferLength)",
                "comments": "Retrieves all assigned PID values. The order is congruent to the LIN frame index. Only applicable for LIN slave nodes."
            },
            "115": {
                "name": "LinIf_SetPIDTable",
                "type": "Std_ReturnType LinIf_SetPIDTable (NetworkHandleType Channel,Lin_FramePidType* PidBuffer,uint8 PidBufferLength)",
                "comments": "Sets all assigned PID values. The order is congruent to the LIN frame index. Only applicable for LIN slave nodes."
            },
            "112": {
                "name": "LinIf_GetConfiguredNAD",
                "type": "Std_ReturnType LinIf_GetConfiguredNAD (NetworkHandleType Channel,uint8* Nad)",
                "comments": "Reports the current configured NAD. Only applicable for LIN slave nodes."
            },
            "113": {
                "name": "LinIf_SetConfiguredNAD",
                "type": "Std_ReturnType LinIf_SetConfiguredNAD (NetworkHandleType Channel,uint8 Nad)",
                "comments": "Sets the current configured NAD. Only applicable for LIN slave nodes."
            },
            "64": {
                "name": "LinTp_Init",
                "type": "void LinTp_Init (const LinTp_ConfigType* ConfigPtr)",
                "comments": "Initialize the LIN Transport Layer."
            },
            "83": {
                "name": "LinTp_Transmit",
                "type": "Std_ReturnType LinTp_Transmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU."
            },
            "66": {
                "name": "LinTp_GetVersionInfo",
                "type": "void LinTp_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "67": {
                "name": "LinTp_Shutdown",
                "type": "void LinTp_Shutdown (void)",
                "comments": "Shutdowns the LINTP."
            },
            "75": {
                "name": "LinTp_ChangeParameter",
                "type": "Std_ReturnType LinTp_ChangeParameter (PduIdType id,TPParameterType parameter,uint16 value)",
                "comments": "Request to change a specific transport protocol parameter (e.g. block size)."
            },
            "96": {
                "name": "LinIf_CheckWakeup",
                "type": "Std_ReturnType LinIf_CheckWakeup (EcuM_WakeupSourceType WakeupSource)",
                "comments": "Will be called when the ECU has been notified about a wake up on a specific LIN channel."
            },
            "127": {
                "name": "LinIf_EnableBusMirroring",
                "type": "Std_ReturnType LinIf_EnableBusMirroring (NetworkHandleType Channel,boolean MirroringActive)",
                "comments": "Enables or disables mirroring for a LIN channel."
            },
            "97": {
                "name": "LinIf_WakeupConfirmation",
                "type": "void LinIf_WakeupConfirmation (EcuM_WakeupSourceType WakeupSource)",
                "comments": "The LIN Driver or LIN Transceiver Driver will call this function to report the wakeup source after the successful wakeup detection during Check Wakeup or after power on by bus."
            },
            "120": {
                "name": "LinIf_HeaderIndication",
                "type": "Std_ReturnType LinIf_HeaderIndication (NetworkHandleType Channel,Lin_PduType* PduPtr)",
                "comments": "The LIN Driver will call this function to report a received LIN header. This function is only applicable for LIN slave nodes (available only if the ECU has any LIN slave channel)."
            },
            "121": {
                "name": "LinIf_RxIndication",
                "type": "void LinIf_RxIndication (NetworkHandleType Channel,uint8* Lin_SduPtr)",
                "comments": "The LIN Driver will call this function to report a successfully received response and provide the reception data to the LIN Interface. This function is only applicable for LIN slave nodes (available only if the ECU has any LIN slave channel)."
            },
            "122": {
                "name": "LinIf_TxConfirmation",
                "type": "void LinIf_TxConfirmation (NetworkHandleType Channel)",
                "comments": "The LIN Driver will call this function to report a successfully transmitted response. This function is only applicable for LIN slave nodes (available only if the ECU has any LIN slave channel)."
            },
            "123": {
                "name": "LinIf_LinErrorIndication",
                "type": "void LinIf_LinErrorIndication (NetworkHandleType Channel,Lin_SlaveErrorType ErrorStatus)",
                "comments": "The LIN Driver will call this function to report a detected error event during header or response processing. This function is only applicable for LIN slave nodes (available only if the ECU has any LIN slave channel)."
            },
            "128": {
                "name": "LinIf_MainFunction_LinIfChannel_ShortName",
                "type": "void LinIf_MainFunction_LinIfChannel_ShortName (void)",
                "comments": "The main processing function of the LIN Interface."
            },
            "116": {
                "name": "User_ResponseErrorSignalChanged",
                "type": "void User_ResponseErrorSignalChanged (NetworkHandleType Channel,boolean RespErrSigValue)",
                "comments": "Notify the change of the response error signal with the new value. Only applicable for LIN slave nodes."
            },
            "117": {
                "name": "User_SaveConfigurationRequest",
                "type": "boolean User_SaveConfigurationRequest (NetworkHandleType Channel)",
                "comments": "Notify the reception of a Save Configuration request. Only applicable for LIN slave nodes."
            }
        }
    },
    "141": {
        "name": "LIN State Manager",
        "short_name": "LinSM",
        "functions": {
            "1": {
                "name": "LinSM_Init",
                "type": "void LinSM_Init (const LinSM_ConfigType* ConfigPtr)",
                "comments": "This function initializes the LinSM."
            },
            "16": {
                "name": "LinSM_ScheduleRequest",
                "type": "Std_ReturnType LinSM_ScheduleRequest (NetworkHandleType network,LinIf_SchHandleType ScheduleTableIdx)",
                "comments": "The upper layer requests a schedule table to be changed on one LIN network."
            },
            "2": {
                "name": "LinSM_GetVersionInfo",
                "type": "void LinSM_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "I'm sorry, but it seems that you haven't provided the text that needs fixing. Please share the text, and I'll be happy to help you correct it!"
            },
            "17": {
                "name": "LinSM_GetCurrentComMode",
                "type": "Std_ReturnType LinSM_GetCurrentComMode (NetworkHandleType network,ComM_ModeType* mode)",
                "comments": "Function to query the current communication mode."
            },
            "18": {
                "name": "LinSM_RequestComMode",
                "type": "Std_ReturnType LinSM_RequestComMode (NetworkHandleType network,ComM_ModeType mode)",
                "comments": "Requesting of a communication mode. The mode switch will not be made instant. The LinSM will notify the caller when mode transition is made."
            },
            "48": {
                "name": "LinSM_MainFunction",
                "type": "void LinSM_MainFunction (void)",
                "comments": "Periodic function that runs the timers of different request timeouts"
            },
            "32": {
                "name": "LinSM_ScheduleRequestConfirmation",
                "type": "void LinSM_ScheduleRequestConfirmation (NetworkHandleType network,LinIf_SchHandleType ScheduleTableIdx)",
                "comments": "The Lin If module will call this callback when the new requested schedule table is active."
            },
            "3": {
                "name": "LinSM_GotoSleepIndication",
                "type": "void LinSM_GotoSleepIndication (NetworkHandleType Channel)",
                "comments": "The LIN If will call this callback when the go to sleep command is received on the network or a bus idle timeout occurs. Only applicable for LIN slave nodes."
            },
            "34": {
                "name": "LinSM_GotoSleepConfirmation",
                "type": "void LinSM_GotoSleepConfirmation (NetworkHandleType network,boolean success)",
                "comments": "The line if will call this callback when the go to sleep command is sent successfully or not sent successfully on the network."
            },
            "33": {
                "name": "LinSM_WakeupConfirmation",
                "type": "void LinSM_WakeupConfirmation (NetworkHandleType network,boolean success)",
                "comments": "The Lin If will call this callback when the wake up signal command is sent not successfully/successfully on the network."
            }
        }
    },
    "64": {
        "name": "LIN Transceiver Driver",
        "short_name": "LinTrcv",
        "functions": {
            "0": {
                "name": "LinTrcv_Init",
                "type": "void LinTrcv_Init (const LinTrcv_ConfigType* ConfigPtr)",
                "comments": "Initializes the Lin Transceiver Driver module."
            },
            "1": {
                "name": "LinTrcv_SetOpMode",
                "type": "Std_ReturnType LinTrcv_SetOpMode (uint8 LinNetwork,LinTrcv_TrcvModeType OpMode)",
                "comments": "The internal state of the LIN transceiver driver is switched to mode given in the parameter OpMode."
            },
            "2": {
                "name": "LinTrcv_GetOpMode",
                "type": "Std_ReturnType LinTrcv_GetOpMode (uint8 LinNetwork,LinTrcv_TrcvModeType* OpMode)",
                "comments": "API detects the actual software state of LIN transceiver driver."
            },
            "3": {
                "name": "LinTrcv_GetBusWuReason",
                "type": "Std_ReturnType LinTrcv_GetBusWuReason (uint8 LinNetwork,LinTrcv_TrcvWakeupReasonType* Reason)",
                "comments": "This API provides the reason for the wakeup that the LIN transceiver has detected in the parameter \"Reason\". The ability to detect and differentiate the possible wakeup reasons depends strongly on the LIN transceiver hardware."
            },
            "4": {
                "name": "LinTrcv_GetVersionInfo",
                "type": "void LinTrcv_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "This service provides the version information of this module through the parameter \"version info\"."
            },
            "7": {
                "name": "LinTrcv_CheckWakeup",
                "type": "Std_ReturnType LinTrcv_CheckWakeup (uint8 LinNetwork)",
                "comments": "Notify the calling function if awake up is detected."
            },
            "5": {
                "name": "LinTrcv_SetWakeupMode",
                "type": "Std_ReturnType LinTrcv_SetWakeupMode (uint8 LINNetwork,LinTrcv_TrcvWakeupModeType TrcvWakupMode)",
                "comments": "This API enables, disables and clears the notification for wake up events on the addressed network."
            }
        }
    },
    "132": {
        "name": "LSDU Router",
        "short_name": "LSduR",
        "functions": {
            "1": {
                "name": "LSduR_Init",
                "type": "void LSduR_Init (const LSduR_PBConfigType* ConfigPtr)",
                "comments": "Initializes the L-SDU Router Tags: atp.Status = draft"
            },
            "2": {
                "name": "LSduR_GetVersionInfo",
                "type": "void LSduR_GetVersionInfo (Std_VersionInfoType versionInfo)",
                "comments": "Returns the version information of this module. Tags: atp. Status = draft"
            },
            "3": {
                "name": "LSduR_GetConfigurationId",
                "type": "LSduR_PBConfigIdType LSduR_GetConfigurationId (void)",
                "comments": "Returns the unique identifier of the post-build time configuration of the L-SDU Router Tags: atp.Status = draft"
            },
            "73": {
                "name": "LSduR_User:UpTransmit",
                "type": "Std_ReturnType LSduR_User:UpTransmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU. Tags: atp. Status = draft"
            },
            "5": {
                "name": "LSduR_User:UpImmediateTransmit",
                "type": "Std_ReturnType LSduR_User:UpImmediateTransmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU for an immediate transmit. Tags: atp. Status = draft"
            },
            "7": {
                "name": "LSduR_User:UpReleaseRxBuffer",
                "type": "void LSduR_User:UpReleaseRxBuffer (PduIdType RxPduId)",
                "comments": "Indication from the upper layer to release the lower layer reception buffer. Tags: atp. Status = draft"
            },
            "69": {
                "name": "LSduR_User:LoRxIndication",
                "type": "void LSduR_User:LoRxIndication (PduIdType id,Std_ReturnType result)",
                "comments": "Called after an I-PDU has been received via the TP-API, the result indicates whether the transmission was successful or not. Tags: atp.Status=draft"
            },
            "64": {
                "name": "LSduR_User:LoTxConfirmation",
                "type": "void LSduR_User:LoTxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU. Tags: atp. Status = draft"
            },
            "65": {
                "name": "LSduR_User:LoTriggerTransmit",
                "type": "Std_ReturnType LSduR_User:LoTriggerTransmit (PduIdType TxPduId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr. Tags: atp. Status=draft"
            }
        }
    },
    "151": {
        "name": "MACsec Key Agreement",
        "short_name": "Mka",
        "functions": {
            "1": {
                "name": "Mka_Init",
                "type": "Std_ReturnType Mka_Init (const Mka_ConfigType* ConfigPtr)",
                "comments": "Initializes the MKA module Tags: atp.Status = DRAFT"
            },
            "2": {
                "name": "Mka_GetVersionInfo",
                "type": "Std_ReturnType Mka_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information of this module. Tags: atp.Status = DRAFT"
            },
            "3": {
                "name": "Mka_SetCknStatus",
                "type": "Std_ReturnType Mka_SetCknStatus (uint8 MkaPaeIdx,boolean Enable,const uint8* Ckn,uint8 CknLength)",
                "comments": "Set status of a CKN from a PAE Tags: atp.Status = DRAFT"
            },
            "4": {
                "name": "Mka_GetCknStatus",
                "type": "Std_ReturnType Mka_GetCknStatus (uint8 MkaPaeIdx,const uint8* Ckn,uint8 CknLength,boolean* EnablePtr)",
                "comments": "Get Status of a CKN from a PAE Tags: atp.Status = DRAFT"
            },
            "8": {
                "name": "Mka_SetEnable",
                "type": "Std_ReturnType Mka_SetEnable (uint8 MkaPaeIdx,boolean Enable)",
                "comments": "Set the MKA activation status of a PAE Tags: atp.Status = DRAFT"
            },
            "5": {
                "name": "Mka_GetEnable",
                "type": "Std_ReturnType Mka_GetEnable (uint8 MkaPaeIdx,boolean* EnablePtr)",
                "comments": "Get the MK A activation status of a PAE Tags: atp.Status = DRAFT"
            },
            "6": {
                "name": "Mka_GetPaeStatus",
                "type": "Std_ReturnType Mka_GetPaeStatus (uint8 MkaPaeIdx,Mka_PaeStatusType* PaeStatusPtr)",
                "comments": "Get detailed information of a PAE Tags: atp.Status = DRAFT"
            },
            "9": {
                "name": "Mka_SetPaePermissiveMode",
                "type": "Std_ReturnType Mka_SetPaePermissiveMode (uint8 MkaPaeIdx,Mka_PermisiveModeType PermisiveMode)",
                "comments": "Set Permissive Mode of a KaY Tags: atp.Status = DRAFT"
            },
            "16": {
                "name": "Mka_StartPae",
                "type": "Std_ReturnType Mka_StartPae (uint8 MkaPaeIdx)",
                "comments": "Manual start of the PAE instance. (In case MakePaeConfiguration.Autostart = False this method starts the PAE operation) Tags: atp.Status = DRAFT"
            },
            "7": {
                "name": "Mka_GetMacSecStatistics",
                "type": "Std_ReturnType Mka_GetMacSecStatistics (uint8 MkaPaeIdx,const uint8* Ckn,uint8 CknLength)",
                "comments": "Get Statistics of a PAE Tags: atp.Status = DRAFT"
            },
            "29": {
                "name": "Mka_LinkStateChange",
                "type": "Std_ReturnType Mka_LinkStateChange (uint8 MkaPaeIdx,EthTrcv_LinkStateType TransceiverLinkState)",
                "comments": "To inform MKA that a dedicated Trcv/Switch/PAC port link state has changed. Tags: atp.Status = DRAFT"
            },
            "30": {
                "name": "Mka_GetMacSecStatisticsNotification",
                "type": "void Mka_GetMacSecStatisticsNotification (uint8 MkaPaeIdx,const Mka_Stats_SecYType* MacSecStatsPtr)",
                "comments": "Callback to notify that Mka_GetMacSecStatistics finished and provide the requested statistics. Tags: atp. Status = DRAFT"
            },
            "31": {
                "name": "Mka_RxIndication",
                "type": "void Mka_RxIndication (uint8 CtrlIdx,Eth_FrameType FrameType,boolean IsBroadcast,const uint8* PhysAddrPtr,const uint8* DataPtr,uint16 LenByte)",
                "comments": "To inform Mka about the reception of MKA Frames Tags: at p.Status = DRAFT"
            },
            "32": {
                "name": "Mka_TxConfirmation",
                "type": "void Mka_TxConfirmation (uint8 CtrlIdx,Eth_BufIdxType BufIdx,Std_ReturnType Result)",
                "comments": "To inform MKA about the correct transmission of MKA Frames. Tags: atp. Status = DRAFT"
            },
            "33": {
                "name": "Mka_MacSecUpdateSecYNotification",
                "type": "void Mka_MacSecUpdateSecYNotification (uint8 MkaPaeIdx)",
                "comments": "Callback to notify that EHT If_MacSec Update SecY finished. Tags: atp. Status = DRAFT"
            },
            "34": {
                "name": "Mka_MacSecAddTxSaNotification",
                "type": "void Mka_MacSecAddTxSaNotification (uint8 MkaPaeIdx)",
                "comments": "Callback to notify that Eth If_MacSec Add Tx Sa finished. Tags: atp. Status = DRAFT"
            },
            "35": {
                "name": "Mka_MacSecAddRxSaNotification",
                "type": "void Mka_MacSecAddRxSaNotification (uint8 MkaPaeIdx)",
                "comments": "Callback to notify that Eth If_MacSec Add Rx Safinished. Tags: atp. Status = DRAFT"
            },
            "36": {
                "name": "Mka_MainFunction",
                "type": "void Mka_MainFunction (void)",
                "comments": "Main function for cyclic call. Tags: atp. Status = DRAFT"
            }
        }
    },
    "101": {
        "name": "MCU Driver",
        "short_name": "Mcu",
        "functions": {
            "0": {
                "name": "Mcu_Init",
                "type": "void Mcu_Init (const Mcu_ConfigType* ConfigPtr)",
                "comments": "This service initializes the MCU driver."
            },
            "1": {
                "name": "Mcu_InitRamSection",
                "type": "Std_ReturnType Mcu_InitRamSection (Mcu_RamSectionType RamSection)",
                "comments": "This service initializes the RAM section-wise."
            },
            "2": {
                "name": "Mcu_InitClock",
                "type": "Std_ReturnType Mcu_InitClock (Mcu_ClockType ClockSetting)",
                "comments": "This service initializes the PLL and other MCU-specific clock options."
            },
            "3": {
                "name": "Mcu_DistributePllClock",
                "type": "Std_ReturnType Mcu_DistributePllClock (void)",
                "comments": "This service activates the PLL clock for the MCU clock distribution."
            },
            "4": {
                "name": "Mcu_GetPllStatus",
                "type": "Mcu_PllStatusType Mcu_GetPllStatus (void)",
                "comments": "This service provides the PLL lock status."
            },
            "5": {
                "name": "Mcu_GetResetReason",
                "type": "Mcu_ResetType Mcu_GetResetReason (void)",
                "comments": "The service reads the reset type from the hardware if supported."
            },
            "6": {
                "name": "Mcu_GetResetRawValue",
                "type": "Mcu_RawResetType Mcu_GetResetRawValue (void)",
                "comments": "The service reads the reset type from the hardware register if supported."
            },
            "7": {
                "name": "Mcu_PerformReset",
                "type": "void Mcu_PerformReset (void)",
                "comments": "The service performs a reset of the microcontroller."
            },
            "8": {
                "name": "Mcu_SetMode",
                "type": "void Mcu_SetMode (Mcu_ModeType McuMode)",
                "comments": "This service activates the MCU's power modes."
            },
            "9": {
                "name": "Mcu_GetVersionInfo",
                "type": "void Mcu_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "This service returns the version information of this module."
            },
            "10": {
                "name": "Mcu_GetRamState",
                "type": "Mcu_RamStateType Mcu_GetRamState (void)",
                "comments": "This service provides the actual status of the microcontroller RAM (if supported)."
            }
        }
    },
    "22": {
        "name": "Memory Abstraction Interface",
        "short_name": "MemIf",
        "functions": {
            "2": {
                "name": "MemIf_Read",
                "type": "Std_ReturnType MemIf_Read (uint16 DeviceIndex,uint16 BlockNumber,uint16 BlockOffset,uint8* DataBufferPtr,uint16 Length)",
                "comments": "Invoke the \"Read\" function of the underlying memory abstraction module selected by the parameter DeviceIndex."
            },
            "3": {
                "name": "MemIf_Write",
                "type": "Std_ReturnType MemIf_Write (uint16 DeviceIndex,uint16 BlockNumber,const uint8* DataBufferPtr)",
                "comments": "Invokes the \"Write\" function of the underlying memory abstraction modules selected by the parameter DeviceIndex."
            },
            "4": {
                "name": "MemIf_Cancel",
                "type": "void MemIf_Cancel (uint16 DeviceIndex)",
                "comments": "Invokes the \"Cancel\" function of the underlying memory abstraction module selected by the parameter DeviceIndex."
            },
            "5": {
                "name": "MemIf_GetStatus",
                "type": "MemIf_StatusType MemIf_GetStatus (uint16 DeviceIndex)",
                "comments": "Invokes the \"GetStatus\" function of the underlying memory abstraction module selected by the parameter DeviceIndex."
            },
            "6": {
                "name": "MemIf_GetJobResult",
                "type": "MemIf_JobResultType MemIf_GetJobResult (uint16 DeviceIndex)",
                "comments": "Invokes the \"GetJobResult\" function of the underlying memory abstraction module selected by the parameter DeviceIndex."
            },
            "7": {
                "name": "MemIf_InvalidateBlock",
                "type": "Std_ReturnType MemIf_InvalidateBlock (uint16 DeviceIndex,uint16 BlockNumber)",
                "comments": "Invokes the \"InvalidateBlock\" function of the underlying memory abstraction module selected by the parameter DeviceIndex."
            },
            "8": {
                "name": "MemIf_GetVersionInfo",
                "type": "void MemIf_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns version information."
            },
            "9": {
                "name": "MemIf_EraseImmediateBlock",
                "type": "Std_ReturnType MemIf_EraseImmediateBlock (uint16 DeviceIndex,uint16 BlockNumber)",
                "comments": "Invokes the \"EraseImmediateBlock\" function of the underlying memory abstraction module selected by the parameter DeviceIndex."
            }
        }
    },
    "41": {
        "name": "Memory Access",
        "short_name": "MemAcc",
        "functions": {
            "1": {
                "name": "MemAcc_Init",
                "type": "void MemAcc_Init (const MemAcc_ConfigType* configPtr)",
                "comments": "Initialization function initializes all variables and sets the module state to initialized."
            },
            "19": {
                "name": "MemAcc_DeInit",
                "type": "void MemAcc_DeInit (void)",
                "comments": "Deinitialize module. If there are still access jobs pending, they are immediately terminated and the module state is set to uninitialized. Therefore, MemAcc must be re-initialized before it will accept any new job requests after this service is processed."
            },
            "2": {
                "name": "MemAcc_GetVersionInfo",
                "type": "void MemAcc_GetVersionInfo (Std_VersionInfoType* versionInfoPtr)",
                "comments": "Service to return the version information of the MemAcc module."
            },
            "5": {
                "name": "MemAcc_GetJobResult",
                "type": "MemAcc_JobResultType MemAcc_GetJobResult (MemAcc_AddressAreaIdType addressAreaId)",
                "comments": "Returns the consolidated job result of the address area referenced by addressAreaId."
            },
            "16": {
                "name": "MemAcc_GetJobStatus",
                "type": "MemAcc_JobStatusType MemAcc_GetJobStatus (MemAcc_AddressAreaIdType addressAreaId)",
                "comments": "Returns the status of the MemAcc job referenced by address Area Id."
            },
            "6": {
                "name": "MemAcc_GetMemoryInfo",
                "type": "Std_ReturnType MemAcc_GetMemoryInfo (MemAcc_AddressAreaIdType addressAreaId,MemAcc_AddressType address,MemAcc_MemoryInfoType* memoryInfoPtr)",
                "comments": "This service function retrieves the physical memory device information of a specific address area. It can be used by an upper layer to get all necessary information to align the start address and trim the length for erase/write jobs."
            },
            "7": {
                "name": "MemAcc_GetProcessedLength",
                "type": "MemAcc_LengthType MemAcc_GetProcessedLength (MemAcc_AddressAreaIdType addressAreaId)",
                "comments": "Returns the accumulated number of bytes that have already been processed in the current job."
            },
            "8": {
                "name": "MemAcc_GetJobInfo",
                "type": "void MemAcc_GetJobInfo (MemAcc_AddressAreaIdType addressAreaId,MemAcc_JobInfoType* jobInfoPtr)",
                "comments": "Returns detailed information about the current memory job like memory device ID, job type, job, processing state or job result, address area as well as address and length. In case no job is pending on the referenced address area, the function returns the information of the last job."
            },
            "20": {
                "name": "MemAcc_ActivateMem",
                "type": "Std_ReturnType MemAcc_ActivateMem (MemAcc_AddressType headerAddress,MemAcc_HwIdType hwId)",
                "comments": "Dynamic activation and initialization of a Mem driver referenced by hw Id and header Address."
            },
            "21": {
                "name": "MemAcc_DeactivateMem",
                "type": "Std_ReturnType MemAcc_DeactivateMem (MemAcc_HwIdType hwId,MemAcc_AddressType headerAddress)",
                "comments": "Dynamic deactivation of a Mem driver referenced by hwId and header Address."
            },
            "4": {
                "name": "MemAcc_Cancel",
                "type": "void MemAcc_Cancel (MemAcc_AddressAreaIdType addressAreaId)",
                "comments": "Triggers a cancel operation of the pending job for the address area referenced by the address Area Id. Cancelling affects only jobs in pending state. For any other states, the request will be ignored."
            },
            "9": {
                "name": "MemAcc_Read",
                "type": "Std_ReturnType MemAcc_Read (MemAcc_AddressAreaIdType addressAreaId,MemAcc_AddressType sourceAddress,MemAcc_DataType* destinationDataPtr,MemAcc_LengthType length)",
                "comments": "Triggers are a job to copy data from the source address into the referenced destination data buffer. The result of this service can be retrieved using the MemAcc_GetJobResult API. If the read operation was successful, the result of the job is MEMACC_OK. If the read operation failed, the result of the job is either MEMACC_FAILED in case of a general error or MEMACC_ECC_CORRECTED / MEMACC_ECC_UNCORRECTED in case of a correctable / uncorrectable ECC error."
            },
            "10": {
                "name": "MemAcc_Write",
                "type": "Std_ReturnType MemAcc_Write (MemAcc_AddressAreaIdType addressAreaId,MemAcc_AddressType targetAddress,const MemAcc_DataType* sourceDataPtr,MemAcc_LengthType length)",
                "comments": "Triggers a write job to store the passed data to the provided address area with given address and length. The result of this service can be retrieved using the MemAcc_GetJobResult API. If the write operation was successful, the job result is MEMACC_OK. If there was an issue writing the data, the result is MEMACC_FAILED."
            },
            "11": {
                "name": "MemAcc_Erase",
                "type": "Std_ReturnType MemAcc_Erase (MemAcc_AddressAreaIdType addressAreaId,MemAcc_AddressType targetAddress,MemAcc_LengthType length)",
                "comments": "Triggers an erase job of the given area. Triggers an erase job of the given area defined by target Address and length. The result of this service can be retrieved using the Mem_GetJobResult API. If the erase operation was successful, the result of the job is MEM_JOB_OK. If the erase operation failed, e.g. due to a hardware issue, the result of the job is MEM_JOB_FAILED."
            },
            "12": {
                "name": "MemAcc_Compare",
                "type": "Std_ReturnType MemAcc_Compare (MemAcc_AddressAreaIdType addressAreaId,MemAcc_AddressType sourceAddress,const MemAcc_DataType* dataPtr,MemAcc_LengthType length)",
                "comments": "Triggers a job to compare the passed data to the memory content of the provided address area. The job terminates if all bytes matched or a difference was detected. The result of this service can be retrieved using the MemAcc_GetJobResult() API. If the compare operation determined a mismatch, the result code is MEMACC_INCONSISTENT. Tags: atp. Status = draft"
            },
            "13": {
                "name": "MemAcc_BlankCheck",
                "type": "Std_ReturnType MemAcc_BlankCheck (MemAcc_AddressAreaIdType addressAreaId,MemAcc_AddressType targetAddress,MemAcc_LengthType length)",
                "comments": "Check if the passed address space is blank, i.e. erased and writable. The result of this service can be retrieved using the MemAcc_GetJobResult API. If the address area defined by targetAddress and length is blank, the result is MEMACC_OK, otherwise the result is MEMACC_INCONSISTENT."
            },
            "14": {
                "name": "MemAcc_HwSpecificService",
                "type": "Std_ReturnType MemAcc_HwSpecificService (MemAcc_AddressAreaIdType addressAreaId,MemAcc_HwIdType hwId,MemAcc_MemHwServiceIdType hwServiceId,MemAcc_DataType* dataPtr,MemAcc_LengthType* lengthPtr)",
                "comments": "Triggers a hardware specific job request referenced by hwServiceId. Service specific data can be passed/retrieved by dataPtr. The result of this service can be retrieved using the MemAcc_GetJobResult API. If the hardware specific operation was successful, the result of the job is MEMACC_OK. If the hardware specific operation failed, the result of the job is MEMACC_FAILED."
            },
            "17": {
                "name": "MemAcc_RequestLock",
                "type": "Std_ReturnType MemAcc_RequestLock (MemAcc_AddressAreaIdType addressAreaId,MemAcc_AddressType address,MemAcc_AddressType length,void* lockNotificationFctPtr)",
                "comments": "Request lock of an address area for exclusive access. Once the lock is granted, the referenced lock notification function is called by MemAcc."
            },
            "18": {
                "name": "MemAcc_ReleaseLock",
                "type": "Std_ReturnType MemAcc_ReleaseLock (MemAcc_AddressAreaIdType addressAreaId,MemAcc_AddressType address,MemAcc_LengthType length)",
                "comments": "Release access lock of provided address area. Tags: atp. Status = draft"
            },
            "3": {
                "name": "MemAcc_MainFunction",
                "type": "void MemAcc_MainFunction (void)",
                "comments": "Service to handle the requested jobs and the internal management operations. Depending on the configuration, MemAcc will call the Mem driver main functions."
            }
        }
    },
    "91": {
        "name": "Memory Driver",
        "short_name": "Mem",
        "functions": {
            "1": {
                "name": "Mem_Init",
                "type": "void Mem_Init (const Mem_ConfigType* configPtr)",
                "comments": "Initialization function - initializes all variables and sets the module state to initialized."
            },
            "11": {
                "name": "Mem_DeInit",
                "type": "void Mem_DeInit (void)",
                "comments": "De-initialize module. If there is still an access job pending, it is immediately terminated (using hardware cancel operation) and the Mem driver module state is set to uninitialized. Therefore, Mem must be re-initialized before it will accept any new job requests after this service is processed."
            },
            "2": {
                "name": "Mem_GetVersionInfo",
                "type": "void Mem_GetVersionInfo (Std_VersionInfoType* versionInfoPtr)",
                "comments": "Service to return the version information of the Mem module."
            },
            "4": {
                "name": "Mem_GetJobResult",
                "type": "MemAcc_MemJobResultType Mem_GetJobResult (Mem_InstanceIdType instanceId)",
                "comments": "Service to return results of the most recent job."
            },
            "12": {
                "name": "Mem_Suspend",
                "type": "void Mem_Suspend (Mem_InstanceIdType instanceId)",
                "comments": "Suspend active memory operation using hardware mechanism. Tags: atp. Status = draft"
            },
            "13": {
                "name": "Mem_Resume",
                "type": "void Mem_Resume (Mem_InstanceIdType instanceId)",
                "comments": "Resume suspended memory operation using hardware mechanism. Tags: ATP. Status = draft"
            },
            "8": {
                "name": "Mem_PropagateError",
                "type": "void Mem_PropagateError (Mem_InstanceIdType instanceId)",
                "comments": "This service can be used to report an access error in case the Mem driver cannot provide the access error information - typically for ECC faults. It is called by the system ECC handler to propagate an ECC error to the memory upper layers."
            },
            "5": {
                "name": "Mem_Read",
                "type": "Std_ReturnType Mem_Read (Mem_InstanceIdType instanceId,Mem_AddressType sourceAddress,Mem_DataType* destinationDataPtr,Mem_LengthType length)",
                "comments": "Triggers are a job to copy the data from the source address into the referenced destination data buffer. The result of this service can be retrieved using the Mem_GetJobResult API. If the read operation was successful, the result of the job is MEM_JOB_OK. If the read operation failed, the result of the job is either MEM_JOB_FAILED in case of a general error or MEM_ECC_CORRECTED / MEM_ECC_UNCORRECTED in case of a correctable / uncorrectable ECC error."
            },
            "6": {
                "name": "Mem_Write",
                "type": "Std_ReturnType Mem_Write (Mem_InstanceIdType instanceId,Mem_AddressType targetAddress,const Mem_DataType* sourceDataPtr,Mem_LengthType length)",
                "comments": "Triggers a write job to store the passed data to the provided address area with given address and length. The result of this service can be retrieved using the Mem_GetJobResult API. If the write operation was successful, the job result is MEM_JOB_OK. If there was an issue writing the data, the result is MEM_FAILED."
            },
            "7": {
                "name": "Mem_Erase",
                "type": "Std_ReturnType Mem_Erase (Mem_InstanceIdType instanceId,Mem_AddressType targetAddress,Mem_LengthType length)",
                "comments": "Triggers an erase job of the given sector/sector batch defined by target address and length. The result of this service can be retrieved using the Mem_GetJobResult API. If the erase operation was successful, the result of the job is MEM_JOB_OK. If the erase operation failed, e.g. due to a hardware issue, the result of the job is MEM_JOB_FAILED."
            },
            "9": {
                "name": "Mem_BlankCheck",
                "type": "Std_ReturnType Mem_BlankCheck (Mem_InstanceIdType instanceId,Mem_AddressType targetAddress,Mem_LengthType length)",
                "comments": "Triggers a job to check the erased state of the page which is referenced by target Address. The result of this service can be retrieved using the Mem_GetJobResult API. If the checked page is blank, the result of the job is MEM_JOB_OK. Otherwise, if the page is not blank, the result is MEM_INCONSISTENT."
            },
            "10": {
                "name": "Mem_HwSpecificService",
                "type": "Std_ReturnType Mem_HwSpecificService (Mem_InstanceIdType instanceId,Mem_HwServiceIdType hwServiceId,Mem_DataType* dataPtr,Mem_LengthType* lengthPtr)",
                "comments": "Triggers a hardware specific memory driver job. dataPtr can be used to pass and return data to/from this service. This service is just a dispatcher to the hardware specific service implementation referenced by hwServiceId. The result of this service can be retrieved using the Mem_GetJobResult API. If the hardware specific operation was successful, the result of the job is MEM_JOB_OK. If the hardware specific operation failed, the result of the job is MEM_JOB_FAILED. Tags: atp.Status=draft"
            },
            "3": {
                "name": "Mem_MainFunction",
                "type": "void Mem_MainFunction (void)",
                "comments": "Service to handle the requested jobs and the internal management operations."
            }
        }
    },
    "29": {
        "name": "Network Management Interface",
        "short_name": "Nm",
        "functions": {
            "0": {
                "name": "Nm_Init",
                "type": "void Nm_Init (const Nm_ConfigType* ConfigPtr)",
                "comments": "Initialize the NM Interface."
            },
            "1": {
                "name": "Nm_PassiveStartUp",
                "type": "Std_ReturnType Nm_PassiveStartUp (NetworkHandleType NetworkHandle)",
                "comments": "This function calls the <Bus> Nm_PassiveStartUp function in case NmBusType is not set to NM_BUS_NM_LOCAL_NM (e.g. CanNm_PassiveStartUp function is called for NM_BUS_NM_CAN)."
            },
            "2": {
                "name": "Nm_NetworkRequest",
                "type": "Std_ReturnType Nm_NetworkRequest (NetworkHandleType NetworkHandle)",
                "comments": "This function calls the <Bus> Nm_NetworkRequest (e.g. CanNm_NetworkRequest function is called if channel is configured as CAN) function in case NmBusType is not set to NM_BUSNM_LOCALNM."
            },
            "3": {
                "name": "Nm_NetworkRelease",
                "type": "Std_ReturnType Nm_NetworkRelease (NetworkHandleType NetworkHandle)",
                "comments": "This function calls the <Bus> Nm_NetworkRelease bus specific function in case NmBusType is not set to NM_BUSNM_LOCALNM (e.g. CanNm_NetworkRelease function is called if channel is configured as CAN)."
            },
            "4": {
                "name": "Nm_DisableCommunication",
                "type": "Std_ReturnType Nm_DisableCommunication (NetworkHandleType NetworkHandle)",
                "comments": "Disables the NMPDU transmission ability. For that purpose, <Bus> Nm_DisableCommunication shall be called in case NmBusType is not set to NM_BUS_NM_LOCAL NM (e.g. Can Nm_DisableCommunication function is called if channel is configured as CAN)."
            },
            "5": {
                "name": "Nm_EnableCommunication",
                "type": "Std_ReturnType Nm_EnableCommunication (NetworkHandleType NetworkHandle)",
                "comments": "Enables the NMPDU transmission ability. For that purpose, <Bus> Nm_EnableCommunication shall be called in case NmBusType is not set to NM_BUSNM_LOCALNM (e.g. Can Nm_EnableCommunication function is called if channel is configured as CAN)."
            },
            "36": {
                "name": "Nm_RequestSynchronizedPncShutdown",
                "type": "Std_ReturnType Nm_RequestSynchronizedPncShutdown (NetworkHandleType NetworkHandle,PNCHandleType PncId)",
                "comments": "This function stores the request for a synchronized PNC shutdown of a particular PNC given by PncId per given NM-Channel. The handling of the synchronized PNC shutdown process is mainly done in the context of the Nm_Main function. The function call is only valid if NmStandardBusType is not set to NM_BUSNM_LOCAL. NM as a <Bus> Nmlike Can Nm is needed to transmit the PNC shutdown requests."
            },
            "38": {
                "name": "Nm_UpdateIRA",
                "type": "void Nm_UpdateIRA (NetworkHandleType NetworkHandle,const uint8* PncBitVectorPtr)",
                "comments": "Indication by ComM of internal PNC requests. This is used to aggregate the internal PNC requests."
            },
            "6": {
                "name": "Nm_SetUserData",
                "type": "Std_ReturnType Nm_SetUserData (NetworkHandleType NetworkHandle,const uint8* nmUserDataPtr)",
                "comments": "Set user data for NM messages transmitted next on the bus. For that purpose, <Bus> Nm_SetUserData shall be called in case NmBusType is not set to NM_BUSNM_LOCALNM (e.g. Can Nm_SetUserData function is called if the channel is configured as CAN)."
            },
            "7": {
                "name": "Nm_GetUserData",
                "type": "Std_ReturnType Nm_GetUserData (NetworkHandleType NetworkHandle,uint8* nmUserDataPtr)",
                "comments": "Get user data out of the last successfully received NM message. For that purpose, <Bus> Nm_GetUserData shall be called in case NmBusType is not set to NM_BUS_NM_LOCAL. (e.g. Can Nm_GetUserData function is called if channel is configured as CAN)."
            },
            "8": {
                "name": "Nm_GetPduData",
                "type": "Std_ReturnType Nm_GetPduData (NetworkHandleType NetworkHandle,uint8* nmPduData)",
                "comments": "Get the whole PDU data out of the most recently received NM message. For that purpose, <BusNm>_GetPduData shall be called in case NmBusType is not set to NM_BUSNM_LOCALNM (e.g. CanNm_GetPduData function is called if channel is configured as CAN)."
            },
            "9": {
                "name": "Nm_RepeatMessageRequest",
                "type": "Std_ReturnType Nm_RepeatMessageRequest (NetworkHandleType NetworkHandle)",
                "comments": "Set Repeat Message Request Bit for NM messages transmitted next on the bus. For that purpose, <Bus> Nm_RepeatMessageRequest shall be called in case NmBusType is not set to NM_BUSNM_LOCALNM (e.g. Can Nm_RepeatMessageRequest function is called if channel is configured as CAN). This will force all nodes on the bus to transmit NM messages so that they can be identified."
            },
            "10": {
                "name": "Nm_GetNodeIdentifier",
                "type": "Std_ReturnType Nm_GetNodeIdentifier (NetworkHandleType NetworkHandle,uint8* nmNodeIdPtr)",
                "comments": "Get node identifier out of the last successfully received NM-message. The function <Bus> Nm_GetNodeIdentifier shall be called in case NmBusType is not set to NM_BUS_NM_LOCAL_NM (e.g. Can Nm_GetNodeIdentifier function is called if channel is configured as CAN)."
            },
            "11": {
                "name": "Nm_GetLocalNodeIdentifier",
                "type": "Std_ReturnType Nm_GetLocalNodeIdentifier (NetworkHandleType NetworkHandle,uint8* nmNodeIdPtr)",
                "comments": "Get node identifier configured for the local node. For that purpose, <Bus> Nm_GetLocalNodeIdentifier shall be called in case NmBusType is not set to NM_BUSNM_LOCALNM (e.g. Can Nm_GetLocalNodeIdentifier function is called if channel is configured as CAN)."
            },
            "13": {
                "name": "Nm_CheckRemoteSleepIndication",
                "type": "Std_ReturnType Nm_CheckRemoteSleepIndication (NetworkHandleType nmNetworkHandle,boolean* nmRemoteSleepIndPtr)",
                "comments": "Check if remote sleep indication takes place or not. For that purpose, <Bus> Nm_CheckRemoteSleepIndication shall be called in case NmBusType is not set to NM_BUSNM_LOCALNM (e.g. Can Nm_CheckRemoteSleepIndication function is called if channel is configured as CAN)."
            },
            "14": {
                "name": "Nm_GetState",
                "type": "Std_ReturnType Nm_GetState (NetworkHandleType nmNetworkHandle,Nm_StateType* nmStatePtr,Nm_ModeType* nmModePtr)",
                "comments": "Returns the state of the network management. The function <Bus> Nm_GetState shall be called in case NmBusType is not set to NM_BUSNM_LOCALNM (e.g. Can Nm_GetState function is called if channel is configured as CAN)."
            },
            "15": {
                "name": "Nm_GetVersionInfo",
                "type": "void Nm_GetVersionInfo (Std_VersionInfoType* nmVerInfoPtr)",
                "comments": "This service returns the version information of this module."
            },
            "34": {
                "name": "Nm_PnLearningRequest",
                "type": "Std_ReturnType Nm_PnLearningRequest (NetworkHandleType NetworkHandle)",
                "comments": "Set Repeat Message Request Bit and Partial Network Learning Bit for NM messages transmitted next on the bus. For that purpose, <Bus> Nm_PnLearningRequest shall be called (e.g., Can Nm_PnLearningRequest function if channel is configured as CAN). This will force all nodes to enter the PNC Learning Phase and re-enter Repeat Message Stat. This is needed for the optional Dynamic PNC-to-channel-mapping feature."
            },
            "17": {
                "name": "Nm_NetworkStartIndication",
                "type": "void Nm_NetworkStartIndication (NetworkHandleType nmNetworkHandle)",
                "comments": "Notification that a NM-message has been received in the Bus-Sleep Mode, what indicates that some nodes in the network have already entered the Network Mode."
            },
            "18": {
                "name": "Nm_NetworkMode",
                "type": "void Nm_NetworkMode (NetworkHandleType nmNetworkHandle)",
                "comments": "Notification that the network management has entered Network Mode."
            },
            "20": {
                "name": "Nm_BusSleepMode",
                "type": "void Nm_BusSleepMode (NetworkHandleType nmNetworkHandle)",
                "comments": "Notification that the network management has entered Bus-Sleep Mode."
            },
            "19": {
                "name": "Nm_PrepareBusSleepMode",
                "type": "void Nm_PrepareBusSleepMode (NetworkHandleType nmNetworkHandle)",
                "comments": "Notification that the network management has entered Prepare Bus-Sleep Mode."
            },
            "33": {
                "name": "Nm_SynchronizeMode",
                "type": "void Nm_SynchronizeMode (NetworkHandleType nmNetworkHandle)",
                "comments": "Notification that the network management has entered Synchronize Mode."
            },
            "23": {
                "name": "Nm_RemoteSleepIndication",
                "type": "void Nm_RemoteSleepIndication (NetworkHandleType nmNetworkHandle)",
                "comments": "Notification that the network management has detected that all other nodes on the network are ready to enter Bus-Sleep Mode."
            },
            "24": {
                "name": "Nm_RemoteSleepCancellation",
                "type": "void Nm_RemoteSleepCancellation (NetworkHandleType nmNetworkHandle)",
                "comments": "Notification that the network management has detected that not all other nodes on the network are longer ready to enter Bus-Sleep Mode."
            },
            "25": {
                "name": "Nm_SynchronizationPoint",
                "type": "void Nm_SynchronizationPoint (NetworkHandleType nmNetworkHandle)",
                "comments": "Notification to the NM Coordinator functionality that this is a suitable point in time to initiate the coordinated shutdown on."
            },
            "30": {
                "name": "Nm_CoordReadyToSleepIndication",
                "type": "void Nm_CoordReadyToSleepIndication (NetworkHandleType nmChannelHandle)",
                "comments": "Sets an indication, when the NM Coordinator Sleep Ready bit in the Control Bit Vector is set."
            },
            "31": {
                "name": "Nm_CoordReadyToSleepCancellation",
                "type": "void Nm_CoordReadyToSleepCancellation (NetworkHandleType nmChannelHandle)",
                "comments": "Cancels an indication when the NM Coordinator Sleep Ready bit in the Control Bit Vector is set back to 0."
            },
            "40": {
                "name": "Nm_ForwardSynchronizedPncShutdown",
                "type": "void Nm_ForwardSynchronizedPncShutdown (NetworkHandleType NetworkHandle,const uint8* PncBitVectorPtr)",
                "comments": "Notification that the network management has received a PN shutdown message on a particular NM-channel. This is used to grant an early synchronized PNC shutdown across the entire PN topology."
            },
            "37": {
                "name": "Nm_PncBitVectorRxIndication",
                "type": "void Nm_PncBitVectorRxIndication (NetworkHandleType NetworkHandle,const uint8* PncBitVectorPtr,boolean* RelevantPncRequestDetectedPtr)",
                "comments": "Indication that a bus specific network management has received a NM message on a particular NM channel that contains a PNC bit vector. This is used to aggregate the external PNC requests. The function evaluates if a relevant PNC request (PNC bit set to '1') is available in the given PNC bit vector. If a relevant PNC request is available (PNC bit passes the PNC bit vector filter), then the Relevant Pnc Request Detected Ptr refers to a boolean with value set to TRUE. Otherwise refer to boolean with value set to FALSE. Relevant Pnc Request Detected Ptr is evaluated by the callee <Bus> Nm module to qualify the further processing of the received NM-PDU."
            },
            "39": {
                "name": "Nm_PncBitVectorTxIndication",
                "type": "void Nm_PncBitVectorTxIndication (NetworkHandleType NetworkHandle,uint8* PncBitVectorPtr)",
                "comments": "Function called by <Bus> Nm store request the aggregated internal PNC requests for transmission within the Nm message."
            },
            "41": {
                "name": "Nm_PncBitVectorTxConfirmation",
                "type": "void Nm_PncBitVectorTxConfirmation (NetworkHandleType NetworkHandle,const uint8* PncBitVectorPtr,Std_ReturnType result)",
                "comments": "Function called by <Bus> Nmsto to confirm the state of the transmission for the given PNC bit vector on the given NM-Channel."
            },
            "21": {
                "name": "Nm_PduRxIndication",
                "type": "void Nm_PduRxIndication (NetworkHandleType nmNetworkHandle)",
                "comments": "Notification that a NM message has been received."
            },
            "22": {
                "name": "Nm_StateChangeNotification",
                "type": "void Nm_StateChangeNotification (NetworkHandleType nmNetworkHandle,Nm_StateType nmPreviousState,Nm_StateType nmCurrentState)",
                "comments": "Notification that the state of the lower layer <Bus> Nm has changed."
            },
            "26": {
                "name": "Nm_RepeatMessageIndication",
                "type": "void Nm_RepeatMessageIndication (NetworkHandleType nmNetworkHandle,boolean pnLearningBitSet)",
                "comments": "Service to indicate that an NM message with set Repeat Message Request B has been received. This is needed for node detection and the Dynamic PNC-to-channel-mapping feature."
            },
            "27": {
                "name": "Nm_TxTimeoutException",
                "type": "void Nm_TxTimeoutException (NetworkHandleType nmNetworkHandle)",
                "comments": "Service to indicate that an attempt to send an NM message failed."
            },
            "29": {
                "name": "Nm_CarWakeUpIndication",
                "type": "void Nm_CarWakeUpIndication (NetworkHandleType nmChannelHandle)",
                "comments": "This function is called by a <Bus> Nm to indicate reception of a CWU request."
            },
            "16": {
                "name": "Nm_MainFunction",
                "type": "void Nm_MainFunction (void)",
                "comments": "This function implements the processes of the NM Interface, which need a fixed cyclic scheduling."
            },
            "32": {
                "name": "NmCarWakeUpCallout",
                "type": "void NmCarWakeUpCallout (NetworkHandleType nmNetworkHandle)",
                "comments": "Callout function to be called by Nm_CarWakeUpIndication()"
            }
        }
    },
    "20": {
        "name": "NVRAM Manager",
        "short_name": "NvM",
        "functions": {
            "0": {
                "name": "NvM_Init",
                "type": "void NvM_Init (const NvM_ConfigType* ConfigPtr)",
                "comments": "Service for resetting all internal variables."
            },
            "1": {
                "name": "NvM_SetDataIndex",
                "type": "Std_ReturnType NvM_SetDataIndex (NvM_BlockIdType BlockId,uint8 DataIndex)",
                "comments": "Service for setting the Data Index of a dataset NVRAM block."
            },
            "2": {
                "name": "NvM_GetDataIndex",
                "type": "Std_ReturnType NvM_GetDataIndex (NvM_BlockIdType BlockId,uint8* DataIndexPtr)",
                "comments": "Service forgetting the currently set Data Index of a dataset NVRAM block"
            },
            "3": {
                "name": "NvM_SetBlockProtection",
                "type": "Std_ReturnType NvM_SetBlockProtection (NvM_BlockIdType BlockId,boolean ProtectionEnabled)",
                "comments": "Service for setting/resetting the write protection for a NV block."
            },
            "4": {
                "name": "NvM_GetErrorStatus",
                "type": "Std_ReturnType NvM_GetErrorStatus (NvM_BlockIdType BlockId,NvM_RequestResultType* RequestResultPtr)",
                "comments": "Service to read the block dependent error/status information."
            },
            "15": {
                "name": "NvM_GetVersionInfo",
                "type": "void NvM_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Service to get the version information of the NvM module."
            },
            "5": {
                "name": "NvM_SetRamBlockStatus",
                "type": "Std_ReturnType NvM_SetRamBlockStatus (NvM_BlockIdType BlockId,boolean BlockChanged)",
                "comments": "Service for setting the RAM block status of a permanent RAM block or the status of the explicit synchronization of a NVRAM block."
            },
            "16": {
                "name": "NvM_CancelJobs",
                "type": "Std_ReturnType NvM_CancelJobs (NvM_BlockIdType BlockId)",
                "comments": "Service to cancel all jobs pending for a NV block."
            },
            "6": {
                "name": "NvM_ReadBlock",
                "type": "Std_ReturnType NvM_ReadBlock (NvM_BlockIdType BlockId,void* NvM_DstPtr)",
                "comments": "Service to copy the data of the NV block to its corresponding RAM block."
            },
            "7": {
                "name": "NvM_WriteBlock",
                "type": "Std_ReturnType NvM_WriteBlock (NvM_BlockIdType BlockId,const void* NvM_SrcPtr)",
                "comments": "Service to copy the data of the RAM block to its corresponding NV block."
            },
            "8": {
                "name": "NvM_RestoreBlockDefaults",
                "type": "Std_ReturnType NvM_RestoreBlockDefaults (NvM_BlockIdType BlockId,void* NvM_DestPtr)",
                "comments": "Service to restore the default data to its corresponding RAM block."
            },
            "9": {
                "name": "NvM_EraseNvBlock",
                "type": "Std_ReturnType NvM_EraseNvBlock (NvM_BlockIdType BlockId)",
                "comments": "Service to erase a NV block."
            },
            "11": {
                "name": "NvM_InvalidateNvBlock",
                "type": "Std_ReturnType NvM_InvalidateNvBlock (NvM_BlockIdType BlockId)",
                "comments": "Service to invalidate a NV block."
            },
            "22": {
                "name": "NvM_ReadPRAMBlock",
                "type": "Std_ReturnType NvM_ReadPRAMBlock (NvM_BlockIdType BlockId)",
                "comments": "Service to copy the data of the NV block to its corresponding permanent RAM block."
            },
            "23": {
                "name": "NvM_WritePRAMBlock",
                "type": "Std_ReturnType NvM_WritePRAMBlock (NvM_BlockIdType BlockId)",
                "comments": "Service to copy the data of the permanent RAM block to its corresponding NV block."
            },
            "24": {
                "name": "NvM_RestorePRAMBlockDefaults",
                "type": "Std_ReturnType NvM_RestorePRAMBlockDefaults (NvM_BlockIdType BlockId)",
                "comments": "Service to restore the default data to its corresponding permanent RAM block."
            },
            "12": {
                "name": "NvM_ReadAll",
                "type": "void NvM_ReadAll (void)",
                "comments": "Initiates a multiblock read request."
            },
            "13": {
                "name": "NvM_WriteAll",
                "type": "void NvM_WriteAll (void)",
                "comments": "Initiates a multiblock write request."
            },
            "10": {
                "name": "NvM_CancelWriteAll",
                "type": "void NvM_CancelWriteAll (void)",
                "comments": "Service to cancel a running NvM_WriteAll request."
            },
            "25": {
                "name": "NvM_ValidateAll",
                "type": "void NvM_ValidateAll (void)",
                "comments": "Initiates a multi-block validation request."
            },
            "20": {
                "name": "NvM_FirstInitAll",
                "type": "void NvM_FirstInitAll (void)",
                "comments": "The function initiates a multiblock first initialization request. The job of the function does not care if a block exists in the non-volatile memory or not or if it is valid (i.e. not corrupted) or not, when processing it."
            },
            "17": {
                "name": "NvM_JobEndNotification",
                "type": "void NvM_JobEndNotification (void)",
                "comments": "Function to be used by the underlying memory abstraction to signal end of job without error."
            },
            "18": {
                "name": "NvM_JobErrorNotification",
                "type": "void NvM_JobErrorNotification (void)",
                "comments": "Function to be used by the underlying memory abstraction to signal end of job with error."
            },
            "14": {
                "name": "NvM_MainFunction",
                "type": "void NvM_MainFunction (void)",
                "comments": "Service for performing the processing of the NvM jobs."
            }
        }
    },
    "125": {
        "name": "OCU Driver",
        "short_name": "Ocu",
        "functions": {
            "0": {
                "name": "Ocu_Init",
                "type": "void Ocu_Init (const Ocu_ConfigType* ConfigPtr)",
                "comments": "Service for OCU initialization."
            },
            "1": {
                "name": "Ocu_DeInit",
                "type": "void Ocu_DeInit (void)",
                "comments": "This function de-initializes the OCU module."
            },
            "2": {
                "name": "Ocu_StartChannel",
                "type": "Std_ReturnType Ocu_StartChannel (Ocu_ChannelType ChannelNumber)",
                "comments": "Service to start an OCU channel."
            },
            "3": {
                "name": "Ocu_StopChannel",
                "type": "void Ocu_StopChannel (Ocu_ChannelType ChannelNumber)",
                "comments": "Service to stop an OCU channel."
            },
            "4": {
                "name": "Ocu_SetPinState",
                "type": "void Ocu_SetPinState (Ocu_ChannelType ChannelNumber,Ocu_PinStateType PinState)",
                "comments": "Service to set immediately the level of the pin associated to an OCU channel."
            },
            "5": {
                "name": "Ocu_SetPinAction",
                "type": "void Ocu_SetPinAction (Ocu_ChannelType ChannelNumber,Ocu_PinActionType PinAction)",
                "comments": "Service to indicate the driver what shall be done automatically by hardware (if supported) upon compare match."
            },
            "6": {
                "name": "Ocu_GetCounter",
                "type": "Ocu_ValueType Ocu_GetCounter (Ocu_ChannelType ChannelNumber)",
                "comments": "Service to read the current value of the counter."
            },
            "7": {
                "name": "Ocu_SetAbsoluteThreshold",
                "type": "Ocu_ReturnType Ocu_SetAbsoluteThreshold (Ocu_ChannelType ChannelNumber,Ocu_ValueType ReferenceValue,Ocu_ValueType AbsoluteValue)",
                "comments": "Service to set the value of the channel threshold using an absolute input data."
            },
            "8": {
                "name": "Ocu_SetRelativeThreshold",
                "type": "Ocu_ReturnType Ocu_SetRelativeThreshold (Ocu_ChannelType ChannelNumber,Ocu_ValueType RelativeValue)",
                "comments": "Service to set the value of the channel threshold relative to the current value of the counter."
            },
            "10": {
                "name": "Ocu_DisableNotification",
                "type": "void Ocu_DisableNotification (Ocu_ChannelType ChannelNumber)",
                "comments": "This service is used to disable notifications from an OCU channel."
            },
            "11": {
                "name": "Ocu_EnableNotification",
                "type": "void Ocu_EnableNotification (Ocu_ChannelType ChannelNumber)",
                "comments": "This service is used to enable notifications from an OCU channel."
            },
            "9": {
                "name": "Ocu_GetVersionInfo",
                "type": "void Ocu_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "This service returns the version information of this module."
            }
        }
    },
    "1": {
        "name": "OS",
        "short_name": "Os",
        "functions": {
            "0": {
                "name": "GetApplicationID",
                "type": "ApplicationType GetApplicationID (void)",
                "comments": "This service determines the OS-Application (a unique identifier has to be allocated to each application) where the caller originally belongs to (was configured to)."
            },
            "39": {
                "name": "GetCurrentApplicationID",
                "type": "ApplicationType GetCurrentApplicationID (void)",
                "comments": "This service determines the OS-Application where the caller of the service is currently executing. Note that if the caller is not within a Call Trusted Function() call the value is equal to the result of GetApplicationID()."
            },
            "1": {
                "name": "GetISRID",
                "type": "ISRType GetISRID (void)",
                "comments": "This service returns the identifier of the currently executing ISR."
            },
            "2": {
                "name": "CallTrustedFunction",
                "type": "StatusType CallTrustedFunction (TrustedFunctionIndexType FunctionIndex,TrustedFunctionParameterRefType FunctionParams)",
                "comments": "A (trusted or non-trusted) OS-Application uses this service to call a trusted function."
            },
            "3": {
                "name": "CheckISRMemoryAccess",
                "type": "AccessType CheckISRMemoryAccess (ISRType ISRID,MemoryStartAddressType Address,MemorySizeType Size)",
                "comments": "This service checks if a memory region is write/read/execute accessible and also returns information if the memory region is part of the stack space."
            },
            "4": {
                "name": "CheckTaskMemoryAccess",
                "type": "AccessType CheckTaskMemoryAccess (TaskType TaskID,MemoryStartAddressType Address,MemorySizeType Size)",
                "comments": "This service checks if a memory region is write/read/execute accessible and also returns information if the memory region is part of the stack space."
            },
            "5": {
                "name": "CheckObjectAccess",
                "type": "ObjectAccessType CheckObjectAccess (ApplicationType ApplID,ObjectTypeType ObjectType,void ___)",
                "comments": "This service determines if the OS-Applications, given by App ID, is allowed to use the IDs of a Task, Resource, Counter, Alarm or Schedule Table in API calls."
            },
            "6": {
                "name": "CheckObjectOwnership",
                "type": "ApplicationType CheckObjectOwnership (ObjectTypeType ObjectType,void ___)",
                "comments": "This service determines to which OS-Application a given Task, ISR, Counter, Alarm or Schedule Table belongs."
            },
            "7": {
                "name": "StartScheduleTableRel",
                "type": "StatusType StartScheduleTableRel (ScheduleTableType ScheduleTableID,TickType Offset)",
                "comments": "This service starts the processing of a schedule table at \"Offset\" relative to the \"Now\" value on the underlying counter."
            },
            "8": {
                "name": "StartScheduleTableAbs",
                "type": "StatusType StartScheduleTableAbs (ScheduleTableType ScheduleTableID,TickType Start)",
                "comments": "This service starts the processing of a schedule table at an absolute value \"Start\" on the underlying counter."
            },
            "9": {
                "name": "StopScheduleTable",
                "type": "StatusType StopScheduleTable (ScheduleTableType ScheduleTableID)",
                "comments": "This service cancels the processing of a schedule table immediately at any point while the schedule table is running."
            },
            "10": {
                "name": "NextScheduleTable",
                "type": "StatusType NextScheduleTable (ScheduleTableType ScheduleTableID_From,ScheduleTableType ScheduleTableID_To)",
                "comments": "This service switches the processing from one schedule table to another schedule table."
            },
            "11": {
                "name": "StartScheduleTableSynchron",
                "type": "StatusType StartScheduleTableSynchron (ScheduleTableType ScheduleTableID)",
                "comments": "This service starts an explicitly synchronized schedule table synchronously."
            },
            "12": {
                "name": "SyncScheduleTable",
                "type": "StatusType SyncScheduleTable (ScheduleTableType ScheduleTableID,TickType Value)",
                "comments": "This service provides the schedule table with a synchronization count and starts synchronization."
            },
            "13": {
                "name": "SetScheduleTableAsync",
                "type": "StatusType SetScheduleTableAsync (ScheduleTableType ScheduleTableID)",
                "comments": "This service stops synchronization of a schedule table."
            },
            "14": {
                "name": "GetScheduleTableStatus",
                "type": "StatusType GetScheduleTableStatus (ScheduleTableType ScheduleTableID,ScheduleTableStatusRefType ScheduleStatus)",
                "comments": "This service queries the state of a schedule table (also with respect to synchronization)."
            },
            "15": {
                "name": "IncrementCounter",
                "type": "StatusType IncrementCounter (CounterType CounterID)",
                "comments": "This service increments a software counter."
            },
            "16": {
                "name": "GetCounterValue",
                "type": "StatusType GetCounterValue (CounterType CounterID,TickRefType Value)",
                "comments": "This service reads the current count value of a counter (returning either the hardware timer ticks if counter is driven by hardware or the software ticks when user drives counter)."
            },
            "17": {
                "name": "GetElapsedValue",
                "type": "StatusType GetElapsedValue (CounterType CounterID,TickRefType Value,TickRefType ElapsedValue)",
                "comments": "This service gets the number of ticks between the current tick value and a previously read tick value."
            },
            "18": {
                "name": "TerminateApplication",
                "type": "StatusType TerminateApplication (ApplicationType Application,RestartType RestartOption)",
                "comments": "This service terminates the OS-Application to which the calling Task/Category 2 ISR/application specific error hook belongs."
            },
            "19": {
                "name": "AllowAccess",
                "type": "StatusType AllowAccess (void)",
                "comments": "This service sets the own state of an OS-Application from APPLICATION_RESTARTING to APPLICATION_ACCESSIBLE."
            },
            "20": {
                "name": "GetApplicationState",
                "type": "StatusType GetApplicationState (ApplicationType Application,ApplicationStateRefType Value)",
                "comments": "This service returns the current state of an OS-Application."
            },
            "21": {
                "name": "GetNumberOfActivatedCores",
                "type": "uint32 GetNumberOfActivatedCores (void)",
                "comments": "The function returns the number of cores running the AUTOSAR OS. This function might be a macro."
            },
            "22": {
                "name": "GetCoreID",
                "type": "CoreIdType GetCoreID (void)",
                "comments": "The function returns a unique core identifier."
            },
            "23": {
                "name": "StartCore",
                "type": "void StartCore (CoreIdType CoreID,StatusType* Status)",
                "comments": "It is not supported to call this function after StartOS(). The function starts the core specified by the parameter CoreID. The OUT parameter allows the caller to check whether the operation was successful or not. If a core is started by means of this function, StartOS shall be called on the core."
            },
            "25": {
                "name": "GetSpinlock",
                "type": "StatusType GetSpinlock (SpinlockIdType SpinlockId)",
                "comments": "GetSpinlock tries to occupy a spin-lock variable. If the function returns, either the lock is successfully taken or an error has occurred. The spinlock mechanism is an active polling mechanism. The function does not cause a de-scheduling."
            },
            "26": {
                "name": "ReleaseSpinlock",
                "type": "StatusType ReleaseSpinlock (SpinlockIdType SpinlockId)",
                "comments": "Release Spinlock releases a spinlock variable that was occupied before. Before terminating a TASK, all spinlock variables that have been occupied with Get Spinlock() shall be released. Before calling Wait EVENT, all Spinlocks shall be released."
            },
            "27": {
                "name": "TryToGetSpinlock",
                "type": "StatusType TryToGetSpinlock (SpinlockIdType SpinlockId,TryToGetSpinlockType* Success)",
                "comments": "TryToGetSpinlock has the same functionality as GetSpinlock with the difference that if the spinlock is already occupied by a TASK on a different core, the function sets the OUT parameter \"Success\" and returns with E_OK."
            },
            "28": {
                "name": "ShutdownAllCores",
                "type": "void ShutdownAllCores (StatusType Error)",
                "comments": "After this service, the OS on all AUTOSAR cores is shutdown. Allowed at TASK level and ISR level, also internally by the OS. The function will never return. The function will force other cores into a shutdown."
            },
            "29": {
                "name": "ControlIdle",
                "type": "StatusType ControlIdle (CoreIdType CoreID,IdleModeType IdleMode)",
                "comments": "This API allows the caller to select the idle mode action which is performed during idle time of the OS (e.g. if no Task/ISR is active). It can be used to implement energy savings. The real idle modes are hardware dependent and not standardized. The default idle mode on each core is IDLE_NO_HALT."
            },
            "40": {
                "name": "ReadPeripheral8",
                "type": "StatusType ReadPeripheral8 (AreaIdType Area,const uint8* Address,uint8* ReadValue)",
                "comments": "This service returns the content of a given memory location (<Address>)."
            },
            "41": {
                "name": "ReadPeripheral16",
                "type": "StatusType ReadPeripheral16 (AreaIdType Area,const uint16* Address,uint16* ReadValue)",
                "comments": "This service returns the content of a given memory location (<Address>)."
            },
            "42": {
                "name": "ReadPeripheral32",
                "type": "StatusType ReadPeripheral32 (AreaIdType Area,const uint32* Address,uint32* ReadValue)",
                "comments": "This service returns the content of a given memory location (<Address>)."
            },
            "43": {
                "name": "WritePeripheral8",
                "type": "StatusType WritePeripheral8 (AreaIdType Area,uint8* Address,uint8 WriteValue)",
                "comments": "This service writes the <value> to a given memory location (<memory address>)."
            },
            "44": {
                "name": "WritePeripheral16",
                "type": "StatusType WritePeripheral16 (AreaIdType Area,uint16* Address,uint16 WriteValue)",
                "comments": "This service writes the <value> to a given memory location (<memory address>)."
            },
            "45": {
                "name": "WritePeripheral32",
                "type": "StatusType WritePeripheral32 (AreaIdType Area,uint32* Address,uint32 WriteValue)",
                "comments": "This service writes the <value> to a given memory location (<memory address>)."
            },
            "46": {
                "name": "ModifyPeripheral8",
                "type": "StatusType ModifyPeripheral8 (AreaIdType Area,uint8* Address,uint8 Clearmask,uint8 Setmask)",
                "comments": "This service modifies a given memory location (<memory address>) with the formula: *<Address> = ((*<Address> & <clear mask>) | <set mask>)"
            },
            "53": {
                "name": "IocInit",
                "type": "void IocInit (void)",
                "comments": "This service initializes the data structures of the IOC. Tags: atp. Status = draft"
            },
            "47": {
                "name": "ModifyPeripheral32",
                "type": "StatusType ModifyPeripheral32 (AreaIdType Area,uint32* Address,uint32 Clearmask,uint32 Setmask)",
                "comments": "This service modifies a given memory location (<memory address>) with the formula: *<Address> = ((*<Address> & <clear mask>) | <set mask>)"
            },
            "49": {
                "name": "EnableInterruptSource",
                "type": "StatusType EnableInterruptSource (ISRType ISRID,boolean ClearPending)",
                "comments": "Enables the interrupt source by modifying the interrupt controller registers. Additionally, it may clear the interrupt pending flag."
            },
            "48": {
                "name": "DisableInterruptSource",
                "type": "StatusType DisableInterruptSource (ISRType ISRID)",
                "comments": "Disables the interrupt source by modifying the interrupt controller registers."
            },
            "50": {
                "name": "ClearPendingInterrupt",
                "type": "StatusType ClearPendingInterrupt (ISRType ISRID)",
                "comments": "Clears the interrupt pending flag by modifying the interrupt controller registers."
            },
            "51": {
                "name": "ActivateTaskAsyn",
                "type": "void ActivateTaskAsyn (TaskType id)",
                "comments": "Asynchronous version of the ActivateTask() function. Intended to be used for cross-core task activation. Possible errors are not returned to the caller, but may be reported via error hooks."
            },
            "52": {
                "name": "SetEventAsyn",
                "type": "void SetEventAsyn (TaskType id,EventMaskType m)",
                "comments": "Asynchronous version of the SetEvent() function. Intended to be used for cross-core event setting. Possible errors are not returned to the caller, but may be reported via error hooks."
            },
            "54": {
                "name": "isOsStarted",
                "type": "boolean isOsStarted (void)",
                "comments": "This API returns a boolean value which indicates if the OS was already started. In case of multi-core, it shall check if StartOs was already called on the core where isOsStarted was called. If the OS was (locally) started it returns true; otherwise, false. The function is intended to be implemented as a macro. The function is by nature also callable before StartOs, but assumes a valid and initialized C environment (e.g. main() was called before the use of isOsStarted). Tags: atp. Status = draft."
            },
            "30": {
                "name": "IocSend_IocId_SenderId",
                "type": "Std_ReturnType IocSend_IocId_SenderId (Data IN,uint16 numberOfBytesIN)",
                "comments": "Performs an \"explicit\" sender-receiver transmission of data elements with \"event\" semantic for a unidirectional 1:1 or N:1 communication between OS-Applications located on the same or on different cores. <IocId> is a unique identifier that references a unidirectional 1:1 or N:1 communication. <SenderId> is used only in N:1 communication. Together with <IocId>, it uniquely identifies the sender. It is separated from <IocId> with an underscore. In case of 1:1 communication, it shall be omitted."
            },
            "31": {
                "name": "IocWrite_IocId_SenderId",
                "type": "Std_ReturnType IocWrite_IocId_SenderId (Data IN,uint16 numberOfBytesIN)",
                "comments": "Performs an \"explicit\" sender-receiver transmission of data elements with \"data\" semantic for a unidirectional 1:1 or N:1 communication between OS-Applications located on the same or on different cores. <IocId> is a unique identifier that references a unidirectional 1:1 or N:1 communication. <SenderId> is used only in N:1 communication. Together with <IocId>, it uniquely identifies the sender. It is separated from <IocId> with an underscore. In case of 1:1 communication, it shall be omitted. <numberOfBytesIN> specifies the size of the data to be transmitted (in bytes)."
            },
            "32": {
                "name": "IocSendGroup_IocId",
                "type": "Std_ReturnType IocSendGroup_IocId (Data1 IN1,uint16 numberOfBytesIN1,Data2 IN2,uint16 numberOfBytesIN2,___)",
                "comments": "Performs an \"explicit\" sender-receiver transmission of data elements with \"event\" semantic for a unidirectional 1:1 communication between OS-Applications located on the same or on different cores. This API involves a group of data elements whose values are specified in parameter. <IocId> is a unique identifier that references a unidirectional 1:1 communication involving many data elements. The optional parameter <numberOfBytesIN<x>> specifies the size of the data to be transmitted (in bytes) for parameter <IN<x>>."
            },
            "33": {
                "name": "IocWriteGroup_IocId",
                "type": "Std_ReturnType IocWriteGroup_IocId (Data1 IN1,uint16 numberOfBytesIN1,Data2 IN2,uint16 numberOfBytesIN2,___)",
                "comments": "Performs an \"explicit\" sender-receiver transmission of data elements with \"data\" semantic for a unidirectional 1:1 communication between OS-Applications located on the same or on different cores. This API involves a group of data elements whose values are specified in parameter. <IocId> is a unique identifier that references a unidirectional 1:1 communication involving many data elements. The optional parameter <numberOfBytesIN<x>> specifies the size of the data to be transmitted (in bytes) for parameter <IN<x>>."
            },
            "34": {
                "name": "IocReceive_IocId",
                "type": "Std_ReturnType IocReceive_IocId (Data OUT,uint16* numberOfBytesOUT)",
                "comments": "Performs an \"explicit\" sender-receiver reception of data elements with \"event\" semantic for a unidirectional communication between OS-Applications located on the same or on different cores. <IocId> is a unique identifier that references a unidirectional 1:1 or N:1 communication."
            },
            "35": {
                "name": "IocRead_IocId_ReceiverId",
                "type": "Std_ReturnType IocRead_IocId_ReceiverId (Data OUT,uint16* numberOfBytesOUT)",
                "comments": "Performs an \"explicit\" sender-receiver reception of data elements with \"data\" semantic for a unidirectional communication between OS-Applications located on the same or on different cores. <IocId> is a unique identifier that references a unidirectional 1:1 or N:1 communication. <ReceiverId> is used only in N:M communication. Together with <IocId>, it uniquely identifies the receiver. It is separated from <IocId> with an underscore. If communication is different from N:M, it shall be omitted."
            },
            "36": {
                "name": "IocReceiveGroup_IocId",
                "type": "Std_ReturnType IocReceiveGroup_IocId (Data1 OUT1,uint16* numberOfBytesOUT1,Data2 OUT2,uint16* numberOfBytesOUT2,___)",
                "comments": "Performs an \"explicit\" sender-receiver transmission of data elements with \"event\" semantic for a unidirectional 1:1 communication between OS-Applications located on the same or on different cores. This API involves a group of data elements whose values are specified in the parameter. <IocId> is a unique identifier that references a unidirectional 1:1 communication involving many data elements."
            },
            "37": {
                "name": "IocReadGroup_IocId",
                "type": "Std_ReturnType IocReadGroup_IocId (Data1 OUT1,uint16* numberOfBytesOUT1,Data2 OUT2,uint16* numberOfBytesOUT2,___)",
                "comments": "Performs an \"explicit\" sender-receiver transmission of data elements with a \"data\" semantic for a unidirectional 1:1 communication between OS-Applications located on the same or on different cores. This API involves a group of data elements whose values are specified in parameter. <IocId> is a unique identifier that references a unidirectional 1:1 communication involving many data elements."
            },
            "38": {
                "name": "IocEmptyQueue_IocId",
                "type": "Std_ReturnType IocEmptyQueue_IocId (void)",
                "comments": "In case of queued communication identified by the <IocId> in the function name, the content of the IOC internal communication queue shall be deleted."
            }
        }
    },
    "51": {
        "name": "PDU Router",
        "short_name": "PduR",
        "functions": {
            "240": {
                "name": "PduR_Init",
                "type": "void PduR_Init (const PduR_PBConfigType* ConfigPtr)",
                "comments": "Initialize the PDURouter"
            },
            "241": {
                "name": "PduR_GetVersionInfo",
                "type": "void PduR_GetVersionInfo (Std_VersionInfoType* versionInfo)",
                "comments": "Returns the version information of this module."
            },
            "242": {
                "name": "PduR_GetConfigurationId",
                "type": "PduR_PBConfigIdType PduR_GetConfigurationId (void)",
                "comments": "Returns the unique identifier of the post-build time configuration of the PDU Router."
            },
            "243": {
                "name": "PduR_EnableRouting",
                "type": "void PduR_EnableRouting (PduR_RoutingPathGroupIdType id)",
                "comments": "Enables a routing path group."
            },
            "244": {
                "name": "PduR_DisableRouting",
                "type": "void PduR_DisableRouting (PduR_RoutingPathGroupIdType id,boolean initialize)",
                "comments": "Disables a routing path group."
            },
            "73": {
                "name": "PduR_User:UpTransmit",
                "type": "Std_ReturnType PduR_User:UpTransmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU."
            },
            "74": {
                "name": "PduR_User:UpCancelTransmit",
                "type": "Std_ReturnType PduR_User:UpCancelTransmit (PduIdType TxPduId)",
                "comments": "Requests cancellation of an ongoing transmission of a PDU in a lower layer communication module."
            },
            "76": {
                "name": "PduR_User:UpCancelReceive",
                "type": "Std_ReturnType PduR_User:UpCancelReceive (PduIdType RxPduId)",
                "comments": "Requests cancellation of an ongoing reception of a PDU in a lower layer transport protocol module."
            },
            "66": {
                "name": "PduR_User:LoRxIndication",
                "type": "void PduR_User:LoRxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "64": {
                "name": "PduR_User:LoTxConfirmation",
                "type": "void PduR_User:LoTxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "65": {
                "name": "PduR_User:LoTriggerTransmit",
                "type": "Std_ReturnType PduR_User:LoTriggerTransmit (PduIdType TxPduId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr."
            },
            "68": {
                "name": "PduR_User:LoTpCopyRxData",
                "type": "BufReq_ReturnType PduR_User:LoTpCopyRxData (PduIdType id,const PduInfoType* info,PduLengthType* bufferSizePtr)",
                "comments": "This function is called to provide the received data of an I-PDU segment (N-PDU) to the upper layer. Each call to this function provides the next part of the I-PDU data. The size of the remaining buffer is written to the position indicated by bufferSizePtr."
            },
            "69": {
                "name": "PduR_User:LoTpRxIndication",
                "type": "void PduR_User:LoTpRxIndication (PduIdType id,Std_ReturnType result)",
                "comments": "Called after an I-PDU has been received via the TP API, the result indicates whether the transmission was successful or not."
            },
            "70": {
                "name": "PduR_User:LoTpStartOfReception",
                "type": "BufReq_ReturnType PduR_User:LoTpStartOfReception (PduIdType id,const PduInfoType* info,PduLengthType TpSduLength,PduLengthType* bufferSizePtr)",
                "comments": "This function is called at the start of receiving an N-SDU. The N-SDU might be fragmented into multiple N-PDUs (FF with one or more following CFs) or might consist of a single N-PDU (SF). The service shall provide the currently available maximum buffer size when invoked with TpSduLength equal to 0."
            },
            "67": {
                "name": "PduR_User:LoTpCopyTxData",
                "type": "BufReq_ReturnType PduR_User:LoTpCopyTxData (PduIdType id,const PduInfoType* info,const RetryInfoType* retry,PduLengthType* availableDataPtr)",
                "comments": "This function is called to acquire the transmit data of an I-PDU segment (N-PDU). Each call to this function provides the next part of the I-PDU data unless retry->TpDataState is TP_DATA_RETRY. In this case, the function restarts to copy the data beginning at the offset from the current position indicated by retry->TxTpDataCnt. The size of the remaining data is written to the position indicated by availableDataPtr."
            },
            "72": {
                "name": "PduR_User:LoTpTxConfirmation",
                "type": "void PduR_User:LoTpTxConfirmation (PduIdType id,Std_ReturnType result)",
                "comments": "This function is called after the I-PDU has been transmitted on its network, the result indicates whether the transmission was successful or not."
            }
        }
    },
    "124": {
        "name": "Port Driver",
        "short_name": "Port",
        "functions": {
            "0": {
                "name": "Port_Init",
                "type": "void Port_Init (const Port_ConfigType* ConfigPtr)",
                "comments": "Initializes the Port Driver module."
            },
            "1": {
                "name": "Port_SetPinDirection",
                "type": "void Port_SetPinDirection (Port_PinType Pin,Port_PinDirectionType Direction)",
                "comments": "Sets the port pin direction"
            },
            "2": {
                "name": "Port_RefreshPortDirection",
                "type": "void Port_RefreshPortDirection (void)",
                "comments": "Refreshes port direction."
            },
            "3": {
                "name": "Port_GetVersionInfo",
                "type": "void Port_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "4": {
                "name": "Port_SetPinMode",
                "type": "void Port_SetPinMode (Port_PinType Pin,Port_PinModeType Mode)",
                "comments": "Sets the port pin mode."
            }
        }
    },
    "121": {
        "name": "PWM Driver",
        "short_name": "Pwm",
        "functions": {
            "0": {
                "name": "Pwm_Init",
                "type": "void Pwm_Init (const Pwm_ConfigType* ConfigPtr)",
                "comments": "Service for PWM Initialization."
            },
            "1": {
                "name": "Pwm_DeInit",
                "type": "void Pwm_DeInit (void)",
                "comments": "Service for PWM De-Initialization."
            },
            "2": {
                "name": "Pwm_SetDutyCycle",
                "type": "void Pwm_SetDutyCycle (Pwm_ChannelType ChannelNumber,uint16 DutyCycle)",
                "comments": "Service sets the duty cycle of the PWM (Pulse Width Modulation) channel."
            },
            "3": {
                "name": "Pwm_SetPeriodAndDuty",
                "type": "void Pwm_SetPeriodAndDuty (Pwm_ChannelType ChannelNumber,Pwm_PeriodType Period,uint16 DutyCycle)",
                "comments": "Service sets the period and the duty cycle of a PWM (Pulse Width Modulation) channel."
            },
            "4": {
                "name": "Pwm_SetOutputToIdle",
                "type": "void Pwm_SetOutputToIdle (Pwm_ChannelType ChannelNumber)",
                "comments": "Service sets the PWM output to the configured idle state."
            },
            "5": {
                "name": "Pwm_GetOutputState",
                "type": "Pwm_OutputStateType Pwm_GetOutputState (Pwm_ChannelType ChannelNumber)",
                "comments": "Service to read the internal state of the PWM output signal."
            },
            "6": {
                "name": "Pwm_DisableNotification",
                "type": "void Pwm_DisableNotification (Pwm_ChannelType ChannelNumber)",
                "comments": "Service to disable the PWM signal edge notification."
            },
            "7": {
                "name": "Pwm_EnableNotification",
                "type": "void Pwm_EnableNotification (Pwm_ChannelType ChannelNumber,Pwm_EdgeNotificationType Notification)",
                "comments": "Service to enable the PWM signal edge notification according to the notification parameter."
            },
            "9": {
                "name": "Pwm_SetPowerState",
                "type": "Std_ReturnType Pwm_SetPowerState (Pwm_PowerStateRequestResultType* Result)",
                "comments": "This API configures the PWM module so that it enters the already prepared power state, chosen from a predefined set of configured options."
            },
            "10": {
                "name": "Pwm_GetCurrentPowerState",
                "type": "Std_ReturnType Pwm_GetCurrentPowerState (Pwm_PowerStateType* CurrentPowerState,Pwm_PowerStateRequestResultType* Result)",
                "comments": "This API returns the current power state of the PWM hardware unit."
            },
            "11": {
                "name": "Pwm_GetTargetPowerState",
                "type": "Std_ReturnType Pwm_GetTargetPowerState (Pwm_PowerStateType* TargetPowerState,Pwm_PowerStateRequestResultType* Result)",
                "comments": "This API returns the target power state of the PWM HW unit."
            },
            "12": {
                "name": "Pwm_PreparePowerState",
                "type": "Std_ReturnType Pwm_PreparePowerState (Pwm_PowerStateType PowerState,Pwm_PowerStateRequestResultType* Result)",
                "comments": "This API starts the needed process to allow the PWM HW module to enter the requested power state."
            },
            "8": {
                "name": "Pwm_GetVersionInfo",
                "type": "void Pwm_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Service returns the version information of this module."
            },
            "13": {
                "name": "Pwm_Main_PowerTransitionManager",
                "type": "void Pwm_Main_PowerTransitionManager (void)",
                "comments": "This API is cyclically called and supervises the power state transitions, checking for the readiness of the module and issuing the callbacks IoHwAb_Pwm_NotifyReadyForPowerState<Mode> (see PwmPowerStateReadyCbkRef configuration parameter)."
            }
        }
    },
    "93": {
        "name": "RAM Test",
        "short_name": "RamTst",
        "functions": {
            "0": {
                "name": "RamTst_Init",
                "type": "void RamTst_Init (const RamTst_ConfigType* ConfigPtr)",
                "comments": "Service for RAM test initialization."
            },
            "12": {
                "name": "RamTst_DeInit",
                "type": "void RamTst_DeInit (void)",
                "comments": "Service for RAM test deinitialization."
            },
            "2": {
                "name": "RamTst_Stop",
                "type": "void RamTst_Stop (void)",
                "comments": "Service for stopping the RAM test."
            },
            "3": {
                "name": "RamTst_Allow",
                "type": "void RamTst_Allow (void)",
                "comments": "Service for continuing the RAM test after calling 'RamTst_Stop'."
            },
            "13": {
                "name": "RamTst_Suspend",
                "type": "void RamTst_Suspend (void)",
                "comments": "Service for suspending the current operation of the background RAM Test until RESUME is called."
            },
            "14": {
                "name": "RamTst_Resume",
                "type": "void RamTst_Resume (void)",
                "comments": "Service for allowing the background RAM Test to continue at the point it was suspended."
            },
            "4": {
                "name": "RamTst_GetExecutionStatus",
                "type": "RamTst_ExecutionStatusType RamTst_GetExecutionStatus (void)",
                "comments": "Service returns the current RAM test execution status."
            },
            "5": {
                "name": "RamTst_GetTestResult",
                "type": "RamTst_TestResultType RamTst_GetTestResult (void)",
                "comments": "Service returns the current RAM test result."
            },
            "6": {
                "name": "RamTst_GetTestResultPerBlock",
                "type": "RamTst_TestResultType RamTst_GetTestResultPerBlock (RamTst_NumberOfBlocksType BlockID)",
                "comments": "Service returns the current RAM test result for the specified block."
            },
            "10": {
                "name": "RamTst_GetVersionInfo",
                "type": "void RamTst_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Service returns the version information of this module."
            },
            "18": {
                "name": "RamTst_GetAlgParams",
                "type": "RamTst_AlgParamsIdType RamTst_GetAlgParams (void)",
                "comments": "Service returns the ID of the current RAM test algorithm parameter set."
            },
            "7": {
                "name": "RamTst_GetTestAlgorithm",
                "type": "RamTst_AlgorithmType RamTst_GetTestAlgorithm (void)",
                "comments": "Service returns the current RAM test algorithm."
            },
            "9": {
                "name": "RamTst_GetNumberOfTestedCells",
                "type": "RamTst_NumberOfTestedCellsType RamTst_GetNumberOfTestedCells (void)",
                "comments": "Service returns the current number of tested cells per main function cycle."
            },
            "11": {
                "name": "RamTst_SelectAlgParams",
                "type": "void RamTst_SelectAlgParams (RamTst_AlgParamsIdType NewAlgParamsId)",
                "comments": "Service used to set the test algorithm and its parameter set."
            },
            "8": {
                "name": "RamTst_ChangeNumberOfTestedCells",
                "type": "void RamTst_ChangeNumberOfTestedCells (RamTst_NumberOfTestedCellsType NewNumberOfTestedCells)",
                "comments": "Service changes the current number of tested cells."
            },
            "16": {
                "name": "RamTst_RunFullTest",
                "type": "void RamTst_RunFullTest (void)",
                "comments": "Service for executing the full RAM test in the foreground."
            },
            "17": {
                "name": "RamTst_RunPartialTest",
                "type": "void RamTst_RunPartialTest (RamTst_NumberOfBlocksType BlockId)",
                "comments": "Service for testing one RAM block in the foreground."
            },
            "1": {
                "name": "RamTst_MainFunction",
                "type": "void RamTst_MainFunction (void)",
                "comments": "Scheduled function for executing the RAM test in the background."
            }
        }
    },
    "2": {
        "name": "RTE",
        "short_name": "Rte",
        "functions": {}
    },
    "58": {
        "name": "SAE J1939 DiagnosticCommunication Manager",
        "short_name": "J1939Dcm",
        "functions": {
            "1": {
                "name": "J1939Dcm_Init",
                "type": "void J1939Dcm_Init (const J1939Dcm_ConfigType* configPtr)",
                "comments": "This function initializes the J1939 Diagnostic Communication Manager."
            },
            "2": {
                "name": "J1939Dcm_DeInit",
                "type": "void J1939Dcm_DeInit (void)",
                "comments": "This function resets the J1939 Diagnostic Communication Manager to the uninitialized state."
            },
            "3": {
                "name": "J1939Dcm_GetVersionInfo",
                "type": "void J1939Dcm_GetVersionInfo (Std_VersionInfoType * versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "11": {
                "name": "J1939Dcm_SetState",
                "type": "Std_ReturnType J1939Dcm_SetState (NetworkHandleType channel,uint8 node,J1939Dcm_StateType newState)",
                "comments": "Changes the communication state of J1939 Dcm to offline or online."
            },
            "73": {
                "name": "J1939Dcm_GenericDMxTransmit",
                "type": "Std_ReturnType J1939Dcm_GenericDMxTransmit (uint8 dmId,uint8 node,NetworkHandleType channel,uint8 destAddress,uint8 priority)",
                "comments": "Requests transmission of a diagnostic message"
            },
            "71": {
                "name": "J1939Dcm_RequestIndication",
                "type": "void J1939Dcm_RequestIndication (uint8 node,NetworkHandleType channel,uint32 requestedPgn,const J1939Rm_ExtIdInfoType* extIdInfo,uint8 sourceAddress,uint8 destAddress,uint8 priority)",
                "comments": "Indicates reception of a Request or Request 2 PG."
            },
            "66": {
                "name": "J1939Dcm_RxIndication",
                "type": "void J1939Dcm_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "64": {
                "name": "J1939Dcm_TxConfirmation",
                "type": "void J1939Dcm_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "70": {
                "name": "J1939Dcm_StartOfReception",
                "type": "BufReq_ReturnType J1939Dcm_StartOfReception (PduIdType id,const PduInfoType* info,PduLengthType TpSduLength,PduLengthType* bufferSizePtr)",
                "comments": "This function is called at the start of receiving an N-SDU. The N-SDU might be fragmented into multiple N-PDUs (FF with one or more following CFs) or might consist of a single N-PDU (SF). The service shall provide the currently available maximum buffer size when invoked with TpSduLength equal to 0."
            },
            "68": {
                "name": "J1939Dcm_CopyRxData",
                "type": "BufReq_ReturnType J1939Dcm_CopyRxData (PduIdType id,const PduInfoType* info,PduLengthType* bufferSizePtr)",
                "comments": "This function is called to provide the received data of an I-PDU segment (N-PDU) to the upper layer. Each call to this function provides the next part of the I-PDU data. The size of the remaining buffer is written to the position indicated by bufferSizePtr."
            },
            "69": {
                "name": "J1939Dcm_TpRxIndication",
                "type": "void J1939Dcm_TpRxIndication (PduIdType id,Std_ReturnType result)",
                "comments": "Called after an I-PDU has been received via the TP API, the result indicates whether the transmission was successful or not."
            },
            "67": {
                "name": "J1939Dcm_CopyTxData",
                "type": "BufReq_ReturnType J1939Dcm_CopyTxData (PduIdType id,const PduInfoType* info,const RetryInfoType* retry,PduLengthType* availableDataPtr)",
                "comments": "This function is called to acquire the transmit data of an I-PDU segment (N-PDU). Each call to this function provides the next part of the I-PDU data unless retry->TpDataState is TP_DATA_RETRY. In this case the function restarts to copy the data beginning at the offset from the current position indicated by retry->TxTpDataCnt. The size of the remaining data is written to the position indicated by availableDataPtr."
            },
            "72": {
                "name": "J1939Dcm_TpTxConfirmation",
                "type": "void J1939Dcm_TpTxConfirmation (PduIdType id,Std_ReturnType result)",
                "comments": "This function is called after the I-PDU has been transmitted on its network, the result indicates whether the transmission was successful or not."
            },
            "10": {
                "name": "J1939Dcm_DemTriggerOnDTCStatus",
                "type": "void J1939Dcm_DemTriggerOnDTCStatus (uint32 DTC,uint8 ClientId)",
                "comments": "Trigger for DM01 message that a UDS status change has happened."
            },
            "4": {
                "name": "J1939Dcm_MainFunction",
                "type": "void J1939Dcm_MainFunction (void)",
                "comments": "Main function of the J1939 Diagnostic Communication Manager. Used for scheduling purposes and timeout supervision."
            }
        }
    },
    "34": {
        "name": "SAE J1939 Network Management",
        "short_name": "J1939Nm",
        "functions": {
            "1": {
                "name": "J1939Nm_Init",
                "type": "void J1939Nm_Init (const J1939Nm_ConfigType* configPtr)",
                "comments": "This function initializes the J1939 Network Management module."
            },
            "2": {
                "name": "J1939Nm_DeInit",
                "type": "void J1939Nm_DeInit (void)",
                "comments": "This function resets the J1939 Network Management module to the uninitialized state."
            },
            "3": {
                "name": "J1939Nm_GetVersionInfo",
                "type": "void J1939Nm_GetVersionInfo (Std_VersionInfoType* versionInfo)",
                "comments": "Returns the version information of this module."
            },
            "5": {
                "name": "J1939Nm_NetworkRequest",
                "type": "Std_ReturnType J1939Nm_NetworkRequest (NetworkHandleType nmChannelHandle)",
                "comments": "Request the network, since ECU needs to communicate on the bus."
            },
            "6": {
                "name": "J1939Nm_NetworkRelease",
                "type": "Std_ReturnType J1939Nm_NetworkRelease (NetworkHandleType nmChannelHandle)",
                "comments": "Release the network, since ECU doesn\u2019t have to communicate on the bus."
            },
            "13": {
                "name": "J1939Nm_GetState",
                "type": "Std_ReturnType J1939Nm_GetState (NetworkHandleType NetworkHandle,Nm_StateType* nmStatePtr,Nm_ModeType* nmModePtr)",
                "comments": "Returns the state and the mode of the network management."
            },
            "16": {
                "name": "J1939Nm_GetBusOffDelay",
                "type": "void J1939Nm_GetBusOffDelay (NetworkHandleType network,uint8* delayCyclesPtr)",
                "comments": "This callout function returns the number of CanSM base cycles to wait additionally to L1/L2 after a Bus Off occurred."
            },
            "15": {
                "name": "J1939Nm_PassiveStartUp",
                "type": "Std_ReturnType J1939Nm_PassiveStartUp (NetworkHandleType nmChannelHandle)",
                "comments": "Passive startup of the NM. It triggers the transition from Bus-Sleep Mode to the Network Mode without requesting the network."
            },
            "66": {
                "name": "J1939Nm_RxIndication",
                "type": "void J1939Nm_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "64": {
                "name": "J1939Nm_TxConfirmation",
                "type": "void J1939Nm_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "71": {
                "name": "J1939Nm_RequestIndication",
                "type": "void J1939Nm_RequestIndication (uint8 node,NetworkHandleType channel,uint32 requestedPgn,const J1939Rm_ExtIdInfoType* extIdInfo,uint8 sourceAddress,uint8 destAddress,uint8 priority)",
                "comments": "Indicates reception of a Request or Request 2 PG."
            },
            "4": {
                "name": "J1939Nm_MainFunction",
                "type": "void J1939Nm_MainFunction (void)",
                "comments": "Main function of the J1939 Network Management module. Used for scheduling purposes and timeout supervision."
            },
            "32": {
                "name": "User_AddressClaimedIndication",
                "type": "void  User_AddressClaimedIndication  (NetworkHandleType channel,uint8 sourceAddress,const uint8* name)",
                "comments": "Provides the content of received Address Claimed (AC) PGs."
            }
        }
    },
    "59": {
        "name": "SAE J1939 Request Manager",
        "short_name": "J1939Rm",
        "functions": {
            "1": {
                "name": "J1939Rm_Init",
                "type": "void J1939Rm_Init (const J1939Rm_ConfigType* configPtr)",
                "comments": "This function initializes the J1939 Request Manager."
            },
            "2": {
                "name": "J1939Rm_DeInit",
                "type": "void J1939Rm_DeInit (void)",
                "comments": "This function resets the J1939 Request Manager to the uninitialized state."
            },
            "3": {
                "name": "J1939Rm_GetVersionInfo",
                "type": "void J1939Rm_GetVersionInfo (Std_VersionInfoType* versionInfo)",
                "comments": "Returns the version information of this module."
            },
            "5": {
                "name": "J1939Rm_SetState",
                "type": "Std_ReturnType J1939Rm_SetState (NetworkHandleType channel,uint8 node,J1939Rm_StateType newState)",
                "comments": "Changes the communication state of J1939 Rm to offline (only Request for AC supported) or online."
            },
            "7": {
                "name": "J1939Rm_SendRequest",
                "type": "Std_ReturnType J1939Rm_SendRequest (uint8 userId,NetworkHandleType channel,uint32 requestedPgn,const J1939Rm_ExtIdInfoType* extIdInfo,uint8 destAddress,uint8 priority,boolean checkTimeout)",
                "comments": "Requests transmission of a Requestor Request 2 PG."
            },
            "8": {
                "name": "J1939Rm_CancelRequestTimeout",
                "type": "Std_ReturnType J1939Rm_CancelRequestTimeout (uint8 userId,NetworkHandleType channel,uint32 requestedPgn,const J1939Rm_ExtIdInfoType* extIdInfo,uint8 destAddress)",
                "comments": "Cancel timeout monitoring of a request. If the request is not active, or timeout monitoring was not requested, this call has no effect."
            },
            "9": {
                "name": "J1939Rm_SendAck",
                "type": "Std_ReturnType J1939Rm_SendAck (uint8 userId,NetworkHandleType channel,uint32 ackPgn,const J1939Rm_ExtIdInfoType* extIdInfo,J1939Rm_AckCode ackCode,uint8 ackAddress,uint8 priority,boolean broadcast)",
                "comments": "Requests transmission of an Acknowledgement PG."
            },
            "66": {
                "name": "J1939Rm_RxIndication",
                "type": "void J1939Rm_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "64": {
                "name": "J1939Rm_TxConfirmation",
                "type": "void J1939Rm_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "40": {
                "name": "J1939Rm_CheckReceivedComIPdu",
                "type": "boolean J1939Rm_CheckReceivedComIPdu (PduIdType PduId,const PduInfoType* PduInfoPtr)",
                "comments": "Reports are received Com IP du. If this Com IP du was requested via J1939 Rm_SendRequest or the Send Request service operation, a request timeout for this request is stopped."
            },
            "4": {
                "name": "J1939Rm_MainFunction",
                "type": "void J1939Rm_MainFunction (void)",
                "comments": "Main function of the J1939 Request Manager. Used for scheduling purposes and timeout supervision."
            },
            "71": {
                "name": "User_RequestIndication",
                "type": "void  User _RequestIndication (uint8 node,NetworkHandleType channel,uint32 requestedPgn,const J1939Rm_ExtIdInfoType* extIdInfo,uint8 sourceAddress,uint8 destAddress,uint8 priority)",
                "comments": "Indicates reception of a Request or Request 2 PG."
            },
            "77": {
                "name": "User_AckIndication",
                "type": "void  User _AckIndication (uint8 node,NetworkHandleType channel,uint32 ackPgn,const J1939Rm_ExtIdInfoType* extIdInfo,J1939Rm_AckCode ackCode,uint8 ackAddress,uint8 sourceAddress,uint8 priority)",
                "comments": "Indicates reception of an Acknowledgement PG."
            },
            "78": {
                "name": "User_RequestTimeoutIndication",
                "type": "void  User _RequestTimeoutIndication (uint8 node,NetworkHandleType channel,uint32 requestedPgn,const J1939Rm_ExtIdInfoType* extIdInfo,uint8 destAddress)",
                "comments": "Indicates timeout of a request triggered with the same parameters."
            }
        }
    },
    "37": {
        "name": "SAE J1939 Transport Layer",
        "short_name": "J1939Tp",
        "functions": {
            "1": {
                "name": "J1939Tp_Init",
                "type": "void J1939Tp_Init (const J1939Tp_ConfigType* ConfigPtr)",
                "comments": "This function initializes the J1939 Tp module."
            },
            "2": {
                "name": "J1939Tp_Shutdown",
                "type": "void J1939Tp_Shutdown (void)",
                "comments": "This function is used to shut down the J1939 Tp module."
            },
            "3": {
                "name": "J1939Tp_GetVersionInfo",
                "type": "void J1939Tp_GetVersionInfo (Std_VersionInfoType* VersionInfo)",
                "comments": "Returns the version information of J1939 Tp."
            },
            "73": {
                "name": "J1939Tp_Transmit",
                "type": "Std_ReturnType J1939Tp_Transmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU."
            },
            "74": {
                "name": "J1939Tp_CancelTransmit",
                "type": "Std_ReturnType J1939Tp_CancelTransmit (PduIdType TxPduId)",
                "comments": "Requests cancellation of an ongoing transmission of a PDU in a lower layer communication module."
            },
            "76": {
                "name": "J1939Tp_CancelReceive",
                "type": "Std_ReturnType J1939Tp_CancelReceive (PduIdType RxPduId)",
                "comments": "Requests cancellation of an ongoing reception of a PDU in a lower layer transport protocol module."
            },
            "75": {
                "name": "J1939Tp_ChangeParameter",
                "type": "Std_ReturnType J1939Tp_ChangeParameter (PduIdType id,TPParameterType parameter,uint16 value)",
                "comments": "Request to change a specific transport protocol parameter (e.g. block size)."
            },
            "66": {
                "name": "J1939Tp_RxIndication",
                "type": "void J1939Tp_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "64": {
                "name": "J1939Tp_TxConfirmation",
                "type": "void J1939Tp_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "4": {
                "name": "J1939Tp_MainFunction",
                "type": "void J1939Tp_MainFunction (void)",
                "comments": "Main function of the J1939 Tp. Used for scheduling purposes and timeout supervision."
            }
        }
    },
    "150": {
        "name": "Secure Onboard Communication",
        "short_name": "SecOC",
        "functions": {
            "1": {
                "name": "SecOC_Init",
                "type": "void SecOC_Init (const SecOC_ConfigType* config)",
                "comments": "Initializes the SecOC module. Successful initialization leads to state SecOC_INIT. In configurations in which SecOC is assigned to more than one partition (i.e., SecOC_MainFunctions are mapped to partitions), SecOC may provide one init function per partition. The decision on whether a single SecOC_Init() function or one per partition is provided is implementation-specific. In case a given implementation provides one SecOC_Init() function per partition, it is up to the implementation to devise a naming pattern that prevents name clashes among the different SecOC_Init() functions (e.g., by adding a suffix containing a short name of the EcucPartition)."
            },
            "2": {
                "name": "SecOC_GetVersionInfo",
                "type": "void SecOC_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "73": {
                "name": "SecOC_IfTransmit",
                "type": "Std_ReturnType SecOC_IfTransmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests the transmission of a PDU."
            },
            "83": {
                "name": "SecOC_TpTransmit",
                "type": "Std_ReturnType SecOC_TpTransmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests the transmission of a PDU."
            },
            "74": {
                "name": "SecOC_IfCancelTransmit",
                "type": "Std_ReturnType SecOC_IfCancelTransmit (PduIdType TxPduId)",
                "comments": "Requests cancellation of an ongoing transmission of a PDU in a lower layer communication module."
            },
            "84": {
                "name": "SecOC_TpCancelTransmit",
                "type": "Std_ReturnType SecOC_TpCancelTransmit (PduIdType TxPduId)",
                "comments": "Requests cancellation of an ongoing transmission of a PDU in a lower layer communication module."
            },
            "76": {
                "name": "SecOC_TpCancelReceive",
                "type": "Std_ReturnType SecOC_TpCancelReceive (PduIdType RxPduId)",
                "comments": "Requests cancellation of an ongoing reception of a PDU in a lower layer transport protocol module."
            },
            "11": {
                "name": "SecOC_VerifyStatusOverride",
                "type": "Std_ReturnType SecOC_VerifyStatusOverride (uint16 ValueID,SecOC_OverrideStatusType overrideStatus,uint8 numberOfMessagesToOverride)",
                "comments": "This service provides the ability to force specific behaviour of SecOc: accept or drop an I-PDU with or without performing the verification of authenticator or independent of the authenticator verification result, and to force a specific result for SecOC_VerificationResultType allowing additional fault handling in the application. Options SECOC_OVERRIDE_PASS_UNTIL_NOTICE, SECOC_OVERRIDE_SKIP_UNTIL_LIMIT, SECOC_OVERRIDE_PASS_UNTIL_LIMIT, or SECOC_OVERRIDE_SKIP_UNTIL_NOTICE are available only if SecOCEnableForcedPassOverride is set to TRUE."
            },
            "4": {
                "name": "SecOC_SendDefaultAuthenticationInformation",
                "type": "Std_ReturnType SecOC_SendDefaultAuthenticationInformation (uint16 FreshnessValueID,boolean sendDefaultAuthenticationInformation)",
                "comments": "The service provides the ability to enable the sending of un-authenticated PDU to lower layer. (Example: in case authentication build counter has reached the configuration value SecOCAuthenticationBuildAttempts or the query of the freshness function returns E_NOT_OK or the calculation of the authenticator has returned a non-recoverable error such as returning E_NOT_OK or KEY_FAILURE). This service is optional (the service is available only if SecOCDefaultAuthenticationInformationPattern is configured). If the service is not available or the service is available but the service was called with sendDefaultAuthenticationInformation as FALSE for a given FreshnessValueID, SecOC module shall remove the Authentic I-PDU from its internal buffer and cancel the transmission request in case the building of authentication Information failed. If the service is available and the service was called with sendDefaultAuthenticationInformation as TRUE for a given FreshnessValueID, SecOC will use SecOCDefaultAuthenticationInformationPattern as authentication Information and will not cancel the transmission request."
            },
            "66": {
                "name": "SecOC_RxIndication",
                "type": "void SecOC_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU (Protocol Data Unit) from a lower-layer communication interface module."
            },
            "69": {
                "name": "SecOC_TpRxIndication",
                "type": "void SecOC_TpRxIndication (PduIdType id,Std_ReturnType result)",
                "comments": "Called after an I-PDU has been received via the TP API, the result indicates whether the transmission was successful or not."
            },
            "64": {
                "name": "SecOC_TxConfirmation",
                "type": "void SecOC_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of an aPDU, or the failure to transmit a PDU."
            },
            "65": {
                "name": "SecOC_TriggerTransmit",
                "type": "Std_ReturnType SecOC_TriggerTransmit (PduIdType TxPduId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr."
            },
            "68": {
                "name": "SecOC_CopyRxData",
                "type": "BufReq_ReturnType SecOC_CopyRxData (PduIdType id,const PduInfoType* info,PduLengthType* bufferSizePtr)",
                "comments": "This function is called to provide the received data of an I-PDU segment (N-PDU) to the upper layer. Each call to this function provides the next part of the I-PDU data. The size of the remaining buffer is written to the position indicated by bufferSizePtr."
            },
            "70": {
                "name": "SecOC_StartOfReception",
                "type": "BufReq_ReturnType SecOC_StartOfReception (PduIdType id,const PduInfoType* info,PduLengthType TpSduLength,PduLengthType* bufferSizePtr)",
                "comments": "This function is called at the start of receiving an N-SDU. The N-SDU might be fragmented into multiple N-PDUs (FF with one or more following CFs) or might consist of a single N-PDU (SF)."
            },
            "79": {
                "name": "SecOC_GetRxFreshness",
                "type": "Std_ReturnType SecOC_GetRxFreshness (uint16 SecOCFreshnessValueID,const uint8* SecOCTruncatedFreshnessValue,uint32 SecOCTruncatedFreshnessValueLength,uint16 SecOCAuthVerifyAttempts,uint8* SecOCFreshnessValue,uint32* SecOCFreshnessValueLength)",
                "comments": "This interface is used by the SecOC to obtain the current freshness value."
            },
            "78": {
                "name": "SecOC_GetRxFreshnessAuthData",
                "type": "Std_ReturnType SecOC_GetRxFreshnessAuthData (uint16 SecOCFreshnessValueID,const uint8* SecOCTruncatedFreshnessValue,uint32 SecOCTruncatedFreshnessValueLength,const uint8* SecOCAuthDataFreshnessValue,uint16 SecOCAuthDataFreshnessValueLength,uint16 SecOCAuthVerifyAttempts,uint8* SecOCFreshnessValue,uint32* SecOCFreshnessValueLength)",
                "comments": "This interface is used by the SecOC to obtain the current freshness value."
            },
            "82": {
                "name": "SecOC_GetTxFreshness",
                "type": "Std_ReturnType SecOC_GetTxFreshness (uint16 SecOCFreshnessValueID,uint8* SecOCFreshnessValue,uint32* SecOCFreshnessValueLength)",
                "comments": "This API returns the freshness value from the Most Significant Bits in the first byte in the array (SecOCFreshnessValue), in big-endian format."
            },
            "81": {
                "name": "SecOC_GetTxFreshnessTruncData",
                "type": "Std_ReturnType SecOC_GetTxFreshnessTruncData (uint16 SecOCFreshnessValueID,uint8* SecOCFreshnessValue,uint32* SecOCFreshnessValueLength,uint8* SecOCTruncatedFreshnessValue,uint32* SecOCTruncatedFreshnessValueLength)",
                "comments": "This interface is used by the SecOC to obtain the current freshness value. The interface function also provides the truncated freshness transmitted in the secured I-PDU."
            },
            "77": {
                "name": "SecOC_SPduTxConfirmation",
                "type": "void SecOC_SPduTxConfirmation (uint16 SecOCFreshnessValueID)",
                "comments": "This interface is used by the SecOC to indicate that the Secured I-PDU has been initiated for transmission."
            },
            "6": {
                "name": "SecOC_MainFunctionRx",
                "type": "void SecOC_MainFunctionRx (void)",
                "comments": "This function performs the processing of the SecOC module's authentication and verification processing for the Rx path. Per configured SecOC Main Function Rx instance, one SecOC_MainFunctionRx_<shortName> shall be implemented. Hereby, <shortName> is the short name of the SecOC Main Function Rx configuration container in the ECU configuration."
            },
            "3": {
                "name": "SecOC_MainFunctionTx",
                "type": "void SecOC_MainFunctionTx (void)",
                "comments": "This function performs the processing of the SecOC module's authentication and verification processing for the Tx path. Per configured SecOC Main Function Tx instance, one SecOC_MainFunctionTx_<shortName> shall be implemented. Hereby, <shortName> is the short name of the SecOC Main Function Tx configuration container in the ECU configuration."
            },
            "80": {
                "name": "SecOC_VerificationStatusCallout",
                "type": "void SecOC_VerificationStatusCallout (SecOC_VerificationStatusType verificationStatus)",
                "comments": "Service is used to propagate the status of each verification attempt from the SecOC module to other modules. This service can be configured such that:  \n- Only: \"False\" Verification Status is propagated to modules  \n- Both: \"True\" and \"False\" Verification Status are propagated to modules  \n- None: No Verification Status is propagated  "
            },
            "85": {
                "name": "SecOC_VerifyStatus",
                "type": "void SecOC_VerifyStatus (SecOC_VerificationStatusType verificationStatus)",
                "comments": "This service provides the ability to inform the application about the result of the verification attempt of a received PDU by the SecOC module."
            }
        }
    },
    "171": {
        "name": "Service Discovery",
        "short_name": "Sd",
        "functions": {
            "1": {
                "name": "Sd_Init",
                "type": "void Sd_Init (const Sd_ConfigType* ConfigPtr)",
                "comments": "Initialize the Service Discovery."
            },
            "2": {
                "name": "Sd_GetVersionInfo",
                "type": "void Sd_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "7": {
                "name": "Sd_ServerServiceSetState",
                "type": "Std_ReturnType Sd_ServerServiceSetState (uint16 SdServerServiceHandleId,Sd_ServerServiceSetStateType ServerServiceState)",
                "comments": "This API function is used by the BswM to set the Server Service Instance state."
            },
            "8": {
                "name": "Sd_ClientServiceSetState",
                "type": "Std_ReturnType Sd_ClientServiceSetState (uint16 ClientServiceHandleId,Sd_ClientServiceSetStateType ClientServiceState)",
                "comments": "This API function is used by the BswM to set the Client Service Instance state."
            },
            "9": {
                "name": "Sd_ConsumedEventGroupSetState",
                "type": "Std_ReturnType Sd_ConsumedEventGroupSetState (uint16 SdConsumedEventGroupHandleId,Sd_ConsumedEventGroupSetStateType ConsumedEventGroupState)",
                "comments": "This API function is used by the BswM to set the requested state of the Event Group Status."
            },
            "5": {
                "name": "Sd_LocalIpAddrAssignmentChg",
                "type": "void Sd_LocalIpAddrAssignmentChg (SoAd_SoConIdType SoConId,TcpIp_IpAddrStateType State)",
                "comments": "This function gets called by the SoA if an IP address assignment related to a socket connection changes (i.e. new address assigned or assigned address becomes invalid)."
            },
            "67": {
                "name": "Sd_SoConModeChg",
                "type": "void Sd_SoConModeChg (SoAd_SoConIdType SoConId,SoAd_SoConModeType Mode)",
                "comments": "Notification about a socket connection state change, e.g. socket connection gets online."
            },
            "68": {
                "name": "Sd_ServiceGroupStart",
                "type": "void Sd_ServiceGroupStart (Sd_ServiceGroupIdType ServiceGroupId)",
                "comments": "Starts a preconfigured SdServiceGroup. For example, Offer Service entries will be sent out after the call of Sd_ServiceGroupStart() for all Server Services of a SdServiceGroup, which are not requested yet."
            },
            "69": {
                "name": "Sd_ServiceGroupStop",
                "type": "void Sd_ServiceGroupStop (Sd_ServiceGroupIdType ServiceGroupId)",
                "comments": "Stops are preconfigured SdServiceGroup. For example, Stop Offer Service entries will be sent out after the call of Sd_ServiceGroupStop() for all Server Services of a SdServiceGroup, which are not requested by another SdServiceGroup."
            },
            "70": {
                "name": "Sd_AclUpdate",
                "type": "Std_ReturnType Sd_AclUpdate (uint16 SdServiceId,uint16 ServiceInstanceId,const TcpIp_SockAddrType* RemoteAddrPtr,Sd_AclUpdateType RequestType)",
                "comments": "Update Service ACL Sd Client Service Allowed Providers or Sd Server Service Allowed Consumers depending on Client or Server service by adding or removing this IP address. Tags: atp. Status = draft"
            },
            "71": {
                "name": "Sd_AclPolicyCheck",
                "type": "Std_ReturnType Sd_AclPolicyCheck (uint32 PduHeaderID,SoAd_SoConIdType SoConId)",
                "comments": "Callback function, which will be provided to SoAd to be able to trigger the ACL policy check on the received Method call request Tags: atp.Status = draft"
            },
            "66": {
                "name": "Sd_RxIndication",
                "type": "void Sd_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "6": {
                "name": "Sd_MainFunction",
                "type": "void Sd_MainFunction (void)",
                "comments": "It seems there is no text provided to fix. Please provide the text you'd like me to correct, and I'll be happy to help!"
            },
            "16": {
                "name": "SdCapabilityRecordMatchCallout",
                "type": "boolean SdCapabilityRecordMatchCallout (PduIdType pduID,uint8 type,uint16 serviceID,uint16 instanceID,uint8 majorVersion,uint32 minorVersion,const Sd_ConfigOptionStringType* receivedConfigOptionPtrArray,const Sd_ConfigOptionStringType* configuredConfigOptionPtrArray)",
                "comments": "This call out is invoked to determine whether the configuration options contained in a received SD message match the ones configured in the local SD configuration (i.e., SdServerCapabilityRecord or SdClientCapabilityRecord)."
            }
        }
    },
    "56": {
        "name": "Socket Adaptor",
        "short_name": "SoAd",
        "functions": {
            "2": {
                "name": "SoAd_GetVersionInfo",
                "type": "void SoAd_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information."
            },
            "1": {
                "name": "SoAd_Init",
                "type": "void SoAd_Init (const SoAd_ConfigType* SoAdConfigPtr)",
                "comments": "Initialize the Socket Adaptor."
            },
            "73": {
                "name": "SoAd_IfTransmit",
                "type": "Std_ReturnType SoAd_IfTransmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU."
            },
            "29": {
                "name": "SoAd_IfRoutingGroupTransmit",
                "type": "Std_ReturnType SoAd_IfRoutingGroupTransmit (SoAd_RoutingGroupIdType id)",
                "comments": "Triggers the transmission of all If-Tx PDUs identified by the parameter id after requesting the data from the related upper layer."
            },
            "31": {
                "name": "SoAd_IfSpecificRoutingGroupTransmit",
                "type": "Std_ReturnType SoAd_IfSpecificRoutingGroupTransmit (SoAd_RoutingGroupIdType id,SoAd_SoConIdType SoConId)",
                "comments": "Triggers the transmission of all IF-Tx PDUs identified by the parameter id on the socket connection specified by SoConId after requesting the data from the related upper layer."
            },
            "83": {
                "name": "SoAd_TpTransmit",
                "type": "Std_ReturnType SoAd_TpTransmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU."
            },
            "84": {
                "name": "SoAd_TpCancelTransmit",
                "type": "Std_ReturnType SoAd_TpCancelTransmit (PduIdType TxPduId)",
                "comments": "Requests cancellation of an ongoing transmission of a PDU in a lower layer communication module."
            },
            "76": {
                "name": "SoAd_TpCancelReceive",
                "type": "Std_ReturnType SoAd_TpCancelReceive (PduIdType RxPduId)",
                "comments": "Requests cancellation of an ongoing reception of a PDU in a lower layer transport protocol module."
            },
            "7": {
                "name": "SoAd_GetSoConId",
                "type": "Std_ReturnType SoAd_GetSoConId (PduIdType TxPduId,SoAd_SoConIdType* SoConIdPtr)",
                "comments": "Returns socket connection index related to the specified Tx PDU ID."
            },
            "8": {
                "name": "SoAd_OpenSoCon",
                "type": "Std_ReturnType SoAd_OpenSoCon (SoAd_SoConIdType SoConId)",
                "comments": "This service opens the socket connection specified by SoConId."
            },
            "9": {
                "name": "SoAd_CloseSoCon",
                "type": "Std_ReturnType SoAd_CloseSoCon (SoAd_SoConIdType SoConId,boolean abort)",
                "comments": "This service closes the socket connection specified by SoConId."
            },
            "34": {
                "name": "SoAd_GetSoConMode",
                "type": "void SoAd_GetSoConMode (SoAd_SoConIdType SoConId,SoAd_SoConModeType* ModePtr)",
                "comments": "Returns current state of the socket connection specified by SoConId."
            },
            "10": {
                "name": "SoAd_RequestIpAddrAssignment",
                "type": "Std_ReturnType SoAd_RequestIpAddrAssignment (SoAd_SoConIdType SoConId,TcpIp_IpAddrAssignmentType Type,const TcpIp_SockAddrType* LocalIpAddrPtr,uint8 Netmask,const TcpIp_SockAddrType* DefaultRouterPtr)",
                "comments": "By this API service the local IP address assignment which shall be used for the socket connection specified by SoConId is initiated."
            },
            "11": {
                "name": "SoAd_ReleaseIpAddrAssignment",
                "type": "Std_ReturnType SoAd_ReleaseIpAddrAssignment (SoAd_SoConIdType SoConId)",
                "comments": "By this API service the local IP address assignment used for the socket connection specified by SoConId is released."
            },
            "12": {
                "name": "SoAd_GetLocalAddr",
                "type": "Std_ReturnType SoAd_GetLocalAddr (SoAd_SoConIdType SoConId,TcpIp_SockAddrType* LocalAddrPtr,uint8* NetmaskPtr,TcpIp_SockAddrType* DefaultRouterPtr)",
                "comments": "Retrieve the local address (IP address and port) actually used for the SoA socket connection specified by SoCon Id, the netmask and default router."
            },
            "13": {
                "name": "SoAd_GetPhysAddr",
                "type": "Std_ReturnType SoAd_GetPhysAddr (SoAd_SoConIdType SoConId,uint8* PhysAddrPtr)",
                "comments": "Retrieves the physical source address of the Eth If controller used by the So Ad socket connection specified by So Con Id."
            },
            "28": {
                "name": "SoAd_GetRemoteAddr",
                "type": "Std_ReturnType SoAd_GetRemoteAddr (SoAd_SoConIdType SoConId,TcpIp_SockAddrType* IpAddrPtr)",
                "comments": "Retrieve the remote address (IP address and port) actually used for the SoAd socket connection specified by SoConId."
            },
            "14": {
                "name": "SoAd_EnableRouting",
                "type": "Std_ReturnType SoAd_EnableRouting (SoAd_RoutingGroupIdType id)",
                "comments": "Enables routing of a group of PDUs in the SoAd related to the Routing Group specified by parameter id. Routing of PDUs can be either forwarding of PDUs from the upper layer to a TCP or UDP socket of the TCP/IP stack specified by a PduRoute or the other way around specified by a SocketRoute."
            },
            "32": {
                "name": "SoAd_EnableSpecificRouting",
                "type": "Std_ReturnType SoAd_EnableSpecificRouting (SoAd_RoutingGroupIdType id,SoAd_SoConIdType SoConId)",
                "comments": "Enables routing of a group of PDUs in the SoAd related to the Routing Group specified by parameter id only on the socket connection identified by SoConId."
            },
            "15": {
                "name": "SoAd_DisableRouting",
                "type": "Std_ReturnType SoAd_DisableRouting (SoAd_RoutingGroupIdType id)",
                "comments": "Disables routing of a group of PDUs in the SoAd related to the Routing Group specified by parameter id. Routing of PDUs can be either forwarding of PDUs from the upper layer to a TCP or UDP socket of the TCP/IP stack specified by a PduRoute or the other way around specified by a SocketRoute."
            },
            "33": {
                "name": "SoAd_DisableSpecificRouting",
                "type": "Std_ReturnType SoAd_DisableSpecificRouting (SoAd_RoutingGroupIdType id,SoAd_SoConIdType SoConId)",
                "comments": "Disables routing of a group of PDUs in the SoAd related to the Routing Group specified by parameter id only on the socket connection identified by SoCon Id."
            },
            "16": {
                "name": "SoAd_SetRemoteAddr",
                "type": "Std_ReturnType SoAd_SetRemoteAddr (SoAd_SoConIdType SoConId,const TcpIp_SockAddrType* RemoteAddrPtr)",
                "comments": "By this API service the remote address (IP address and port) of the specified socket connection shall be set."
            },
            "30": {
                "name": "SoAd_SetUniqueRemoteAddr",
                "type": "Std_ReturnType SoAd_SetUniqueRemoteAddr (SoAd_SoConIdType SoConId,const TcpIp_SockAddrType* RemoteAddrPtr,SoAd_SoConIdType* AssignedSoConIdPtr)",
                "comments": "This API service shall either return the socket connection index of the SoAd Socket Connection Group where the specified remote address (IP address and port) is set or assign the remote address to an unused socket connection from the same SoAd Socket Connection Group."
            },
            "35": {
                "name": "SoAd_ReleaseRemoteAddr",
                "type": "void SoAd_ReleaseRemoteAddr (SoAd_SoConIdType SoConId)",
                "comments": "By this API service the remote address (IP address and port) of the specified socket connection shall be released, i.e. set back to the configured remote address setting."
            },
            "75": {
                "name": "SoAd_TpChangeParameter",
                "type": "Std_ReturnType SoAd_TpChangeParameter (PduIdType id,TPParameterType parameter,uint16 value)",
                "comments": "Request to change a specific transport protocol parameter (e.g. block size)."
            },
            "26": {
                "name": "SoAd_ReadDhcpHostNameOption",
                "type": "Std_ReturnType SoAd_ReadDhcpHostNameOption (SoAd_SoConIdType SoConId,uint8* length,uint8* data)",
                "comments": "By this API service, an upper layer of the SoAd can read the currently configured hostname, i.e. FQDN option in the DHCP submodule of the TCP/IP stack."
            },
            "27": {
                "name": "SoAd_WriteDhcpHostNameOption",
                "type": "Std_ReturnType SoAd_WriteDhcpHostNameOption (SoAd_SoConIdType SoConId,uint8 length,const uint8* data)",
                "comments": "By this API service an upper layer of the SoAd can set the hostname, i.e. FQDN option in the DHCP submodule of the TCP/IP stack."
            },
            "69": {
                "name": "SoAd_GetAndResetMeasurementData",
                "type": "Std_ReturnType SoAd_GetAndResetMeasurementData (SoAd_MeasurementIdxType MeasurementIdx,boolean MeasurementResetNeeded,uint32* MeasurementDataPtr)",
                "comments": "Allow to read and reset detailed measurement data for diagnostic purposes. Get all Measurement Index\u2019s at once is not supported. SOAD_MEAS_ALL shall only be used to reset all Measurement Index\u2019s at once. A NULL_PTR shall be provided for Measurement Data Ptr in this case."
            },
            "85": {
                "name": "SoAd_IsConnectionReady",
                "type": "TcpIp_ReturnType SoAd_IsConnectionReady (SoAd_SoConIdType SoConId,const TcpIp_SockAddrType* RemoteAddrPtr)",
                "comments": "API allows to check if a communication over this socket connection is possible for a dedicated remote address. It includes that the socket connection is bound to a socket, a physical address is available for the requested remote address and if a security association is configured that a secured connection is already established."
            },
            "18": {
                "name": "SoAd_RxIndication",
                "type": "void SoAd_RxIndication (TcpIp_SocketIdType SocketId,const TcpIp_SockAddrType* RemoteAddrPtr,const uint8* BufPtr,uint16 Length)",
                "comments": "The TCP/IP stack calls this primitive after the reception of data on a socket. The socket identifier along with configuration information determines which module is to be called."
            },
            "19": {
                "name": "SoAd_CopyTxData",
                "type": "BufReq_ReturnType SoAd_CopyTxData (TcpIp_SocketIdType SocketId,uint8* BufPtr,uint16 BufLength)",
                "comments": "This service requests to copy data for transmission to the buffer indicated. This call is triggered by TcpIp_Transmit(). Note: The call to <Up>_CopyTxData() may happen in the context of TcpIp_Transmit()."
            },
            "20": {
                "name": "SoAd_TxConfirmation",
                "type": "void SoAd_TxConfirmation (TcpIp_SocketIdType SocketId,uint16 Length)",
                "comments": "The TCP/IP stack calls this function after the data has been acknowledged by the peer for TCP. Caveats: The upper layer might not be able to determine exactly which data bytes have been confirmed."
            },
            "21": {
                "name": "SoAd_TcpAccepted",
                "type": "Std_ReturnType SoAd_TcpAccepted (TcpIp_SocketIdType SocketId,TcpIp_SocketIdType SocketIdConnected,const TcpIp_SockAddrType* RemoteAddrPtr)",
                "comments": "This service gets called if the stack puts a socket into the listen mode before (as server) and a peer connected to it (as client). In detail: The TCP/IP stack calls this function after a socket was set into the listen state with TcpIp_TcpListen() and a TCP connection is requested by the peer."
            },
            "22": {
                "name": "SoAd_TcpConnected",
                "type": "void SoAd_TcpConnected (TcpIp_SocketIdType SocketId)",
                "comments": "This service gets called if the stack initiated a TCP connection before (as client) and the peer (the server) acknowledged the connection setup. In detail: The TCP/IP stack calls this function after a socket was requested to connect with TcpIp_TcpConnect() and a TCP connection is confirmed by the peer. The parameter value of SocketId equals the SocketId value of the preceding TcpIp_TcpConnect() call."
            },
            "23": {
                "name": "SoAd_TcpIpEvent",
                "type": "void SoAd_TcpIpEvent (TcpIp_SocketIdType SocketId,TcpIp_EventType Event)",
                "comments": "This service gets called if the stack encounters a condition described by the values in Event."
            },
            "24": {
                "name": "SoAd_LocalIpAddrAssignmentChg",
                "type": "void SoAd_LocalIpAddrAssignmentChg (TcpIp_LocalAddrIdType IpAddrId,TcpIp_IpAddrStateType State)",
                "comments": "This service gets called by the TCP/IP stack if an IP address assignment changes (i.e. new address assigned or assigned address becomes invalid)."
            },
            "25": {
                "name": "SoAd_MainFunction",
                "type": "void SoAd_MainFunction (void)",
                "comments": "Schedules the Socket Adaptor. (Entry point for scheduling)"
            }
        }
    },
    "16": {
        "name": "Software Cluster Connection",
        "short_name": "SwCluC",
        "functions": {
            "16": {
                "name": "Com_InvalidateSignal",
                "type": "uint8 Com_InvalidateSignal (Com_SignalIdType SignalId)",
                "comments": "TheServiceCom_InvalidateSignal invalidates the signal with the given SignalId by setting its value to its configured ComSignalDataInvalidValue."
            },
            "17": {
                "name": "SwCluC_BManif_GetHandle_ResourceEntryGroup_Handle",
                "type": "handleType SwCluC_BManif_GetHandle_ResourceEntryGroup_Handle (SwCluC_BManif_TableIndexType resIndex,SwCluC_BManif_HandleIndexType notifierSetIndex)",
                "comments": "Returns a handle of a Resource Entry in a Resource Entry Group"
            },
            "18": {
                "name": "SwCluC_BManif_GetConSwClusterId_ResourceEntryGroup_ResourceEntry_Handle",
                "type": "SwCluC_BManif_SwClusterIdType SwCluC_BManif_GetConSwClusterId_ResourceEntryGroup_ResourceEntry_Handle (SwCluC_BManif_HandleIndexType notifierSetIndex)",
                "comments": "Returns the Id of the connected Software Cluster for a Notifier Handle of a Provide Resource Entry or a Provide Handle of a Require Resource Entry."
            },
            "19": {
                "name": "SwCluC_BManif_GetConSwClusterId_ResourceEntryGroup_Handle",
                "type": "SwCluC_BManif_SwClusterIdType SwCluC_BManif_GetConSwClusterId_ResourceEntryGroup_Handle (SwCluC_BManif_TableIndexType resIndex,SwCluC_BManif_HandleIndexType notifierSetIndex)",
                "comments": "Returns the Id of the connected Software Cluster for a Notifier Handle of a Provide Resource Entry or a Provide Handle of a Require Resource Entry."
            },
            "20": {
                "name": "SwCluC_BManif_GetNoOfHandleSets_ResourceEntryGroup_ResourceEntry",
                "type": "SwCluC_BManif_HandleIndexType SwCluC_BManif_GetNoOfHandleSets_Resource Entry Group_Resource Entry (void)",
                "comments": "Returns the number of actually used - and thereby connected - handle sets."
            },
            "21": {
                "name": "SwCluC_BManif_GetNoOfHandleSets_ResourceEntryGroup",
                "type": "SwCluC_BManif_HandleIndexType SwCluC_BManif_GetNoOfHandleSets_Resource Entry Group (SwCluC_BManif_TableIndexType resIndex)",
                "comments": "Returns the number of actually used - and thereby connected - handle sets."
            },
            "22": {
                "name": "NvM_ReadPRAMBlock",
                "type": "Std_ReturnType NvM_ReadPRAMBlock (NvM_BlockIdType BlockId)",
                "comments": "Service to copy the data of the NV block to its corresponding permanent RAM block."
            },
            "32": {
                "name": "SwCluC_Xcc_Init1",
                "type": "void SwCluC_Xcc_Init1 (void)",
                "comments": "SwCluC_Xcc_Init is intended to allocate and initialize system resources used by the Software Cluster Connection. It initializes interface memory which might be needed to be read by other Software Clusters, but it is not allowed to do any read access to memory of any another Software Cluster."
            },
            "33": {
                "name": "Com_SendDynSignal",
                "type": "uint8 Com_SendDynSignal (Com_SignalIdType SignalId,const void* SignalDataPtr,uint16 Length)",
                "comments": "TheServiceCom_SendDynSignal updates the signal object identified by SignalId with the signal referenced by the SignalDataPtr parameter."
            },
            "48": {
                "name": "SwCluC_OsProxy_Init_SwCluCOsProxyOsBaseSocket",
                "type": "void SwCluC_OsProxy_Init_SwCluCOsProxyOsBaseSocket (void)",
                "comments": "SwCluC_OsProxy_Init is intended to allocate and initialize system resources used by the OsProxy linked to this specific socket."
            },
            "49": {
                "name": "SwCluC_NvMProxy_Init_SwCluCNvMBaseSocket",
                "type": "void SwCluC_NvMProxy_Init_SwCluCNvMBaseSocket (void)",
                "comments": "SwCluC_NvMProxy_Init is intended to allocate and initialize system resources used by the NvM Proxy linked to this specific socket."
            },
            "71": {
                "name": "SwCluC_NvMProxy_MultiBlockReadAllJobFinished",
                "type": "void SwCluC_NvMProxy_MultiBlockReadAllJobFinished (void)",
                "comments": "This function informs the NvM proxy of the SwCluC about the end of the NvM_ReadAll job."
            },
            "50": {
                "name": "SwCluC_LdComProxy_Init_SwCluCLdComBaseSocket",
                "type": "void SwCluC_LdComProxy_Init_SwCluCLdComBaseSocket (void)",
                "comments": "SwCluC_LdComProxy_Init is intended to allocate and initialize system resources used by the LdComProxy linked to this specific socket. Tags: atp. Status = draft"
            },
            "51": {
                "name": "SwCluC_ComProxy_Init_SwCluCComBaseSocket",
                "type": "void SwCluC_ComProxy_Init_SwCluCComBaseSocket (void)",
                "comments": "SwCluC_ComProxy_Init is intended to allocate and initialize system resources used by the ComProxy linked to this specific socket. Tags: atp. Status = draft"
            },
            "52": {
                "name": "SwCluC_DcmProxy_Init_SwCluCDcmBaseSocket",
                "type": "void SwCluC_DcmProxy_Init_SwCluCDcmBaseSocket (void)",
                "comments": "SwCluC_DcmProxy_Init is intended to allocate and initialize system resources used by the DcmProxy linked to this specific socket. Tags: atp. Status = draft"
            },
            "53": {
                "name": "SwCluC_DemProxy_Init_SwCluCDemBaseSocket",
                "type": "void SwCluC_DemProxy_Init_SwCluCDemBaseSocket (void)",
                "comments": "SwCluC_DemProxy_Init is intended to allocate and initialize system resources used by the DemProxy linked to this specific socket. Tags: atp. Status = draft"
            },
            "54": {
                "name": "Xxx_ReadDataLength",
                "type": "Std_ReturnType Xxx_ReadDataLength (uint16* DataLength)",
                "comments": "This function requests the application to return the data length in byte of a Data. Tags: atp. Status = draft."
            },
            "69": {
                "name": "SwCluC_GetVersionInfo",
                "type": "void SwCluC_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Service to get the version information of the SwCluC module."
            },
            "55": {
                "name": "Xxx_ConditionCheckRead",
                "type": "Std_ReturnType Xxx_ConditionCheckRead (Dcm_OpStatusType OpStatus,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application if the conditions to read the Data are correct."
            },
            "56": {
                "name": "SwCluC_ComProxy_BS_CbkInv",
                "type": "void SwCluC_ComProxy_BS_CbkInv (CbkHandleIdType ComUserCbkHandleId)",
                "comments": "This callback function indicates that COM has received a signal and parsed it as \"invalid\". It is an implementation of a <ComUser_CbkInv> callback. Tags: atp.Status = draft"
            },
            "57": {
                "name": "SwCluC_ComProxy_BS_CbkRxTOut",
                "type": "void SwCluC_ComProxy_BS_CbkRxTOut (CbkHandleIdType ComUserCbkHandleId)",
                "comments": "This callback function indicates that the alive Timeout after the last successful reception of the signal of the data item/event has expired (data element outdated). It is an implementation of a <ComUser_CbkRxTOut> callback. Tags: atp. Status = draft"
            },
            "58": {
                "name": "SwCluC_ComProxy_BS_CbkTxAck",
                "type": "void SwCluC_ComProxy_BS_CbkTxAck (CbkHandleIdType ComUserCbkHandleId)",
                "comments": "This callback function indicates that the signal of the data item/event is already handed over by COM to the PDU router. It is an implementation of a <ComUser_CbkTxAck> callback. Tags: atp. Status = draft"
            },
            "59": {
                "name": "SwCluC_ComProxy_BS_CbkTxErr",
                "type": "void SwCluC_ComProxy_BS_CbkTxErr (CbkHandleIdType ComUserCbkHandleId)",
                "comments": "This callback function indicates that an error occurred when the signal of the data item/event was handed over by COM to the PDU router. It is an implementation of a <ComUser_CbkTxErr> callback. Tags: atp. Status = draft"
            },
            "60": {
                "name": "Xxx_ResetToDefault",
                "type": "Std_ReturnType Xxx_ResetToDefault (Dcm_OpStatusType OpStatus,Dcm_ControlMask__DIDType controlMask,uint8* controlMask,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests the application to reset an IO Control to default value."
            },
            "61": {
                "name": "SwCluC_LdComProxy_BS_LdComCbkCopyRxData",
                "type": "BufReq_ReturnType SwCluC_LdComProxy_BS_LdComCbkCopyRxData (CbkHandleIdType LdComUserCbkHandleId,const PduInfoType* info,PduLengthType* bufferSizePtr)",
                "comments": "This function is called to provide the received data of an I-PDU segment (N-PDU) to the upper layer. Each call to this function provides the next part of the I-PDU data. The size of the remaining data is written to the position indicated by bufferSizePtr. Tags: atp. Status = draft"
            },
            "62": {
                "name": "Dem_GetFaultDetectionCounter",
                "type": "Std_ReturnType Dem_GetFaultDetectionCounter (Dem_EventIdType EventId,sint8* FaultDetectionCounter)",
                "comments": "Get the fault detection counter of an event. This API can only be used through the RTE, and therefore no declaration is exported via Dem.h."
            },
            "63": {
                "name": "SwCluC_LdComProxy_BS_LdComCbkRxIndication",
                "type": "void SwCluC_LdComProxy_BS_LdComCbkRxIndication (CbkHandleIdType LdComUserCbkHandleId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module. Tags: atp. Status = draft"
            },
            "64": {
                "name": "SwCluC_LdComProxy_BS_LdComCbkStartOfReception",
                "type": "BufReq_ReturnType SwCluC_LdComProxy_BS_LdComCbkStartOfReception (CbkHandleIdType LdComUserCbkHandleId,const PduInfoType* info,PduLengthType TpSduLength,PduLengthType* bufferSizePtr)",
                "comments": "This function is called at the start of receiving an N-SDU. The N-SDU might be fragmented into multiple N-PDUs (FF with one or more following CFs) or might consist of a single N-PDU (SF). The service shall provide the currently available maximum buffer size when invoked with TpSduLength equal to 0. Tags: atp. Status = draft"
            },
            "65": {
                "name": "SwCluC_LdComProxy_BS_LdComCbkTpRxIndication",
                "type": "void SwCluC_LdComProxy_BS_LdComCbkTpRxIndication (CbkHandleIdType LdComUserCbkHandleId,Std_ReturnType result)",
                "comments": "Called after an I-PDU has been received via the TP-API, the result indicates whether the transmission was successful or not. Tags: atp.Status = draft"
            },
            "66": {
                "name": "SwCluC_LdComProxy_BS_LdComCbkTriggerTransmit",
                "type": "Std_ReturnType SwCluC_LdComProxy_BS_LdComCbkTriggerTransmit (CbkHandleIdType LdComUserCbkHandleId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr. Tags: atp. Status=draft"
            },
            "67": {
                "name": "SwCluC_LdComProxy_BS_LdComCbkTxConfirmation",
                "type": "void SwCluC_LdComProxy_BS_LdComCbkTxConfirmation (CbkHandleIdType LdComUserCbkHandleId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU. Tags: atp. Status = draft"
            },
            "68": {
                "name": "SwCluC_LdComProxy_BS_LdComCbkTpTxConfirmation",
                "type": "void SwCluC_LdComProxy_BS_LdComCbkTpTxConfirmation (CbkHandleIdType LdComUserCbkHandleId,Std_ReturnType result)",
                "comments": "This function is called after a Signal has been transmitted via the TP-API on its network. Tags: atp. Status = draft"
            },
            "70": {
                "name": "SwCluC_Xcc_MainFunction_suffix",
                "type": "void SwCluC_Xcc_MainFunction_suffix (void)",
                "comments": "This function shall perform timeout monitoring of SwCluCXcc."
            },
            "117": {
                "name": "Xxx_ResetToDefault",
                "type": "Std_ReturnType Xxx_ResetToDefault (uint8* controlMask,uint8 controlMaskLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to reset an IO Control to default value. Tags: atp. Status = draft"
            },
            "112": {
                "name": "Xxx_RequestResultsConfirmation",
                "type": "Std_ReturnType Xxx_RequestResultsConfirmation (Dcm_ConfirmationStatusType ConfirmationStatus)",
                "comments": "This function indicates the transmission of a response to a Request Routine Results request."
            },
            "180": {
                "name": "Rte_Rips_PlugIn_DataIsUpdated_SwcBswI_CGI",
                "type": "boolean Rte_Rips_PlugIn_DataIsUpdated_SwcBswI_CGI (void)",
                "comments": "The Rte_Rips_DataIsUpdated API provides access to the update flag for an explicit receiver."
            },
            "255": {
                "name": "Rte_Rips_PlugIn_DRead_SwcBswIPartition_ExE_CGI",
                "type": "Std_ReturnType Rte_Rips_PlugIn_DRead_SwcBswIPartition_ExE_CGI (void)",
                "comments": "Rte_Rips_DReadPerform \"an explicit\" read on a sender-receiver communication data element typed by a primitive data type."
            },
            "181": {
                "name": "Dem_GetMonitorStatus",
                "type": "Std_ReturnType Dem_GetMonitorStatus (Dem_EventIdType EventID,Dem_MonitorStatusType* MonitorStatus)",
                "comments": "Get the current monitor status for an event."
            },
            "182": {
                "name": "Dem_GetEventUdsStatus",
                "type": "Std_ReturnType Dem_GetEventUdsStatus (Dem_EventIdType EventId,Dem_UdsStatusByteType* UDSStatusByte)",
                "comments": "Gets the current UDS status byte assigned to the DTC for the event."
            },
            "236": {
                "name": "Rte_Rips_PlugIn_Invoke_SwcBswI_CGI",
                "type": "Std_ReturnType Rte_Rips_PlugIn_Invoke_SwcBswI_CGI (IN|IN/OUT|OUT data_1,IN|IN/OUT|OUT ___,IN|IN/OUT|OUT data_n,Std_TransformerError transformerError)",
                "comments": "Rte_Rips_Invoke performs a transformer or cross-cluster invocation for clients or trigger sources."
            },
            "238": {
                "name": "nameoftheInvocationHandler",
                "type": "void name of the Invocation Handler (void)",
                "comments": "Performs invocation of server runnables, hard error runnables, ASCR runnables and triggered runnables via a transformer."
            },
            "256": {
                "name": "Rte_Rips_PlugIn_Prm_CGI",
                "type": "Std_ReturnType Rte_Rips_PlugIn_Prm_CGI (void)",
                "comments": "The Rte_Rips_PrmAPI provides access to a parameter provided by another Software Cluster."
            },
            "234": {
                "name": "Rte_Rips_PlugIn_Read_SwcBswIPartition_ExE_CGI",
                "type": "Std_ReturnType Rte_Rips_PlugIn_Read_SwcBswIPartition_ExE_CGI (OUT data,Std_TransformerError transformerError)",
                "comments": "Rte_Rips_ReadPerform is an \"explicit\" read on a sender-receiver communication data element."
            },
            "237": {
                "name": "Rte_Rips_PlugIn_ReturnResult_SwcBswI_CGI",
                "type": "Std_ReturnType Rte_Rips_PlugIn_ReturnResult_SwcBswI_CGI (IN/OUT|OUT param_1,IN/OUT|OUT param_n,Std_TransformerError transformerError)",
                "comments": "Rte_Rips_ReturnResult get the server results of a performed at transformer or cross cluster invocation for clients."
            },
            "241": {
                "name": "Rte_Rips_PlugIn_Rte_Start",
                "type": "void Rte_Rips_PlugIn_Rte_Start (void)",
                "comments": "Rte_Rips_Rte_Start initializes those RTE Implementation Plug-In parts which are relevant for the RTE related operation."
            },
            "242": {
                "name": "Rte_Rips_PlugIn_Rte_Stop",
                "type": "void Rte_Rips_PlugIn_Rte_Stop (void)",
                "comments": "Rte_Rips_Rte_Stop de initializes those RTE Implementation Plug-In parts which are relevant for the RTE related operation."
            },
            "243": {
                "name": "Rte_Rips_SchM_Deinit",
                "type": "void Rte_Rips_SchM_Deinit (void)",
                "comments": "Rte_Rips_SchM_Deinit deinitializes those RTE Implementation Plug-In parts which are relevant for the SchM related operations."
            },
            "240": {
                "name": "Rte_Rips_PlugIn_SchM_Init",
                "type": "void Rte_Rips_PlugIn_SchM_Init (void)",
                "comments": "Rte_Rips_SchM_Init initializes those RTE Implementation Plug-In parts which are relevant for the SchM related operations."
            },
            "176": {
                "name": "Rte_Rips_PlugIn_Switch_BswSwcI_MMI",
                "type": "void Rte_Rips_PlugIn_Switch_BswSwcI_MMI (Rte_Rips_SwitchNotificationStatusType switchNotificationStatus,uint32 previousmode,uint32 nextmode)",
                "comments": "Rte_Rips_StartModeSwitch notifies the RTE Implementation Plug-In about an enqueue operation in a mode queue."
            },
            "177": {
                "name": "Rte_Rips_PlugIn_DequeueModeSwitch_MMI_OsTask",
                "type": "Rte_Rips_SwitchNotificationStatusType Rte_Rips_PlugIn_DequeueModeSwitch_MMI_OsTask (void)",
                "comments": "Rte_Rips_DequeueModeSwitch dequeues a mode switch notification from the mode queue when it is called after the last on-entry Executable Entity terminated."
            },
            "178": {
                "name": "Rte_Rips_PlugIn_Trigger_BswSwcI_MMI",
                "type": "void Rte_Rips_PlugIn_Trigger_BswSwcI_MMI (void)",
                "comments": "Rte_Rips_Trigger notifies the RTE Implementation Plug-In about a raised trigger."
            },
            "235": {
                "name": "Rte_Rips_PlugIn_Write_SwcBswIPartition_ExE_CGI",
                "type": "Std_ReturnType Rte_Rips_PlugIn_Write_SwcBswIPartition_ExE_CGI (IN data,Std_TransformerError transformerError)",
                "comments": "Rte_Rips_WritePerforms an \"explicit\" write on a sender-receiver communication data element."
            },
            "9": {
                "name": "Dem_ResetEventDebounceStatus",
                "type": "Std_ReturnType Dem_ResetEventDebounceStatus (Dem_EventIdType EventId,Dem_DebounceResetStatusType DebounceResetStatus)",
                "comments": "Control the internal debounce counter/timer by BSW modules and SW-Cs. The event qualification will not be affected by these debounce state changes. This API is available for BSW modules as soon as Dem_PreInit has been completed (refer to SWS_Dem_00438 and SWS_Dem_00167)."
            },
            "2": {
                "name": "NvM_GetDataIndex",
                "type": "Std_ReturnType NvM_GetDataIndex (NvM_BlockIdType BlockId,uint8* DataIndexPtr)",
                "comments": "Service forgetting the currently set Data Index of a dataset NVRAM block"
            },
            "4": {
                "name": "Dem_SetEventStatus",
                "type": "Std_ReturnType Dem_SetEventStatus (Dem_EventIdType EventId,Dem_EventStatusType EventStatus)",
                "comments": "Called by SW-C, sor BSW modules to report monitor status information to the Dem. BSW modules calling Dem_SetEventStatus can safely ignore the return value. This API will be available only if ({Dem/DemConfigSet/DemEventParameter/DemEventReportingType} == STANDARD_REPORTING)"
            },
            "11": {
                "name": "Com_ReceiveSignal",
                "type": "uint8 Com_ReceiveSignal (Com_SignalIdType SignalId,void* SignalDataPtr)",
                "comments": "Com_ReceiveSignal copies the data of the signal identified by SignalId to the location specified by SignalDataPtr."
            },
            "6": {
                "name": "Dem_PrestoreFreezeFrame",
                "type": "Std_ReturnType Dem_PrestoreFreezeFrame (Dem_EventIdType EventId)",
                "comments": "Captures the freeze frame data for a specific event. This API can only be used through the RTE and therefore no declaration is exported via Dem.h. API Availability: This API will be available only if ({ecuc(Dem/DemConfigSet/DemEventParameter.DemFFPrestorageSupported)} == true)"
            },
            "8": {
                "name": "NvM_RestoreBlockDefaults",
                "type": "Std_ReturnType NvM_RestoreBlockDefaults (NvM_BlockIdType BlockId,void* NvM_DestPtr)",
                "comments": "Service to restore the default data to its corresponding RAM block."
            },
            "24": {
                "name": "NvM_RestorePRAMBlockDefaults",
                "type": "Std_ReturnType NvM_RestorePRAMBlockDefaults (NvM_BlockIdType BlockId)",
                "comments": "Service to restore the default data to its corresponding permanent RAM block."
            },
            "3": {
                "name": "NvM_SetBlockProtection",
                "type": "Std_ReturnType NvM_SetBlockProtection (NvM_BlockIdType BlockId,boolean ProtectionEnabled)",
                "comments": "Service for setting/resetting the write protection for a NV block."
            },
            "1": {
                "name": "FiM_GetFunctionPermission",
                "type": "Std_ReturnType FiM_GetFunctionPermission (FiM_FunctionIdType FID,boolean* Permission)",
                "comments": "This service reports the permission state to the functionality."
            },
            "5": {
                "name": "Dem_ResetEventStatus",
                "type": "Std_ReturnType Dem_ResetEventStatus (Dem_EventIdType EventId)",
                "comments": "Resets the event failed status. This API can only be used through the RTE and therefore no declaration is exported via Dem.h."
            },
            "7": {
                "name": "FiM_SetFunctionAvailable",
                "type": "Std_ReturnType FiM_SetFunctionAvailable (FiM_FunctionIdType FID,boolean Availability)",
                "comments": "This service sets the availability of a function. The function is only available if FiM Availability Support is configured as True."
            },
            "23": {
                "name": "NvM_WritePRAMBlock",
                "type": "Std_ReturnType NvM_WritePRAMBlock (NvM_BlockIdType BlockId)",
                "comments": "Service to copy the data of the permanent RAM block to its corresponding NV block."
            },
            "12": {
                "name": "NvM_ReadAll",
                "type": "void NvM_ReadAll (void)",
                "comments": "Initiates a multiblock read request."
            },
            "13": {
                "name": "Dem_GetDTCOfEvent",
                "type": "Std_ReturnType Dem_GetDTCOfEvent (Dem_EventIdType EventId,Dem_DTCFormatType DTCFormat,uint32* DTCOfEvent)",
                "comments": "Get the DTC of an event."
            },
            "10": {
                "name": "Com_SendSignal",
                "type": "uint8 Com_SendSignal (Com_SignalIdType SignalId,const void* SignalDataPtr)",
                "comments": "The service Com_SendSignal updates the signal object identified by SignalId with the signal referenced by the SignalDataPtr parameter."
            },
            "35": {
                "name": "Com_SendSignalGroupArray",
                "type": "uint8 Com_SendSignalGroupArray (Com_SignalGroupIdType SignalGroupId,const uint8* SignalGroupArrayPtr)",
                "comments": "TheServiceCom_SendSignalGroupArray copies the content of the provided SignalGroupArrayPtr to the associated I-PDU. The provided data shall correspond to the array representation of the signal group."
            },
            "77": {
                "name": "Com_SendSignalWithMetaData",
                "type": "uint8 Com_SendSignalWithMetaData (Com_SignalIdType SignalId,const void* SignalDataPtr,const uint8* MetaDataPtr)",
                "comments": "The service Com_SendSignalWithMetaData updates the signal object identified by SignalId with the signal referenced by the SignalDataPtr parameter. The metadata is provided via the MetaDataPtr parameter."
            },
            "78": {
                "name": "Com_SendDynSignalWithMetaData",
                "type": "uint8 Com_SendDynSignalWithMetaData (Com_SignalIdType SignalId,const void* SignalDataPtr,uint16 Length,const uint8* MetaDataPtr)",
                "comments": "TheServiceCom_SendDynSignalWithMetaData updates the signal object identified by SignalId with the signal referenced by the SignalDataPtr parameter. The metadata is provided via the MetaDataPtr parameter."
            },
            "79": {
                "name": "Com_SendSignalGroupWithMetaData",
                "type": "uint8 Com_SendSignalGroupWithMetaData (Com_SignalGroupIdType SignalGroupId,const uint8* MetaDataPtr)",
                "comments": "TheServiceCom_SendSignalGroupWithMetaData copies the content of the associated shadow buffer to the associated I-PDU. The metadata is provided via the MetaDataPtr parameter."
            },
            "80": {
                "name": "Com_SendSignalGroupArrayWithMetaData",
                "type": "uint8 Com_SendSignalGroupArrayWithMetaData (Com_SignalGroupIdType SignalGroupId,const uint8* SignalGroupArrayPtr,const uint8* MetaDataPtr)",
                "comments": "TheServiceCom_SendSignalGroupArrayWithMetaData copies the content of the provided SignalGroupArrayPtr to the associated I-PDU. The provided data shall correspond to the array representation of the signal group. The metadata is provided via the MetaDataPtr parameter."
            },
            "34": {
                "name": "Com_ReceiveDynSignal",
                "type": "uint8 Com_ReceiveDynSignal (Com_SignalIdType SignalId,void* SignalDataPtr,uint16* Length)",
                "comments": "Com_ReceiveDynSignal copies the data of the signal identified by SignalId to the location specified by SignalDataPtr and stores the length of the dynamically length signal at the position given by the Length parameter."
            },
            "14": {
                "name": "Com_ReceiveSignalGroup",
                "type": "uint8 Com_ReceiveSignalGroup (Com_SignalGroupIdType SignalGroupId)",
                "comments": "TheServiceCom_ReceiveSignalGroup copies the received signal group from the I-PDU to the shadow buffer."
            },
            "36": {
                "name": "Com_ReceiveSignalGroupArray",
                "type": "uint8 Com_ReceiveSignalGroupArray (Com_SignalGroupIdType SignalGroupId,uint8* SignalGroupArrayPtr)",
                "comments": "The service Com_ReceiveSignalGroupArray copies the received signal group array representation from the PDU to the location designated by SignalGroupArrayPtr."
            },
            "73": {
                "name": "LdCom_Transmit",
                "type": "Std_ReturnType LdCom_Transmit (PduIdType Id,const PduInfoType* InfoPtr)",
                "comments": "Requests transmission of a signal."
            },
            "74": {
                "name": "Com_ReceiveDynSignalWithMetaData",
                "type": "uint8 Com_ReceiveDynSignalWithMetaData (Com_SignalIdType SignalId,void* SignalDataPtr,uint16* Length,uint8* MetaDataPtr)",
                "comments": "Com_ReceiveDynSignalWithMetaData copies the data of the signal identified by SignalId to the location specified by SignalDataPtr and stores the length of the dynamically length signal at the position given by the Length parameter. The received metadata is stored at the position given by the MetaDataPtr parameter."
            },
            "75": {
                "name": "Com_ReceiveSignalGroupWithMetaData",
                "type": "uint8 Com_ReceiveSignalGroupWithMetaData (Com_SignalGroupIdType SignalGroupId,uint8* MetaDataPtr)",
                "comments": "TheServiceCom_ReceiveSignalGroupWithMetaData copies the received signal group from the I-PDU to the shadow buffer. The received metadata is stored at the position given by the MetaDataPtr parameter."
            },
            "76": {
                "name": "Xxx_ReadDataLength",
                "type": "Std_ReturnType Xxx_ReadDataLength (Dcm_OpStatusType OpStatus,uint16* DataLength)",
                "comments": "This function requests the application to return the data length in bytes of a Data. Tags: atp. Status = draft"
            },
            "27": {
                "name": "Com_InvalidateSignalGroup",
                "type": "uint8 Com_InvalidateSignalGroup (Com_SignalGroupIdType SignalGroupId)",
                "comments": "The service Com_InvalidateSignalGroup invalidates all group signals of the signal group with the given SignalGroupId by setting their values to their configured ComSignalData Invalid Values."
            },
            "104": {
                "name": "Xxx_ReadData",
                "type": "Std_ReturnType Xxx_ReadData (uint8* Data,uint16 DataLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application a data value of a DID/PID if DcmDspDataUsePort is set to USE_DATA_SYNCH_FNC_PROXY. Tags: atp. Status = draft"
            },
            "105": {
                "name": "Xxx_StopConfirmation",
                "type": "Std_ReturnType Xxx_StopConfirmation (Dcm_ConfirmationStatusType ConfirmationStatus)",
                "comments": "This function indicates the transmission of a response to a Stop Routine request."
            },
            "113": {
                "name": "Xxx_WriteData",
                "type": "Std_ReturnType Xxx_WriteData (const uint8* Data,uint16 DataLength,Dcm_OpStatusType OpStatus,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests the application to write a data value of a DID if DcmDspDataUsePort is set to USE_DATA_ASYNCH_FNC_PROXY. Tags: atp. Status = draft"
            },
            "114": {
                "name": "Xxx_GetScalingInformation",
                "type": "Std_ReturnType Xxx_GetScalingInformation (uint8* ScalingInfo,uint8 ScalingInfoLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application for the scaling information of a Data. Tags: atp. Status = draft"
            },
            "115": {
                "name": "Xxx_GetScalingInformation",
                "type": "Std_ReturnType Xxx_GetScalingInformation (Dcm_OpStatusType OpStatus,uint8* ScalingInfo,uint8 ScalingInfoLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application for the scaling information of a Data. Tags: atp. Status = draft"
            },
            "116": {
                "name": "Xxx_ReturnControlToECU",
                "type": "Std_ReturnType Xxx_ReturnControlToECU (uint8* controlMask,uint8 controlMaskLength,Dcm_NegativeResponseCodeType ErrorCode)",
                "comments": "This function requests to the application to return control to ECU of an IO Control. Tags: atp. Status = draft"
            },
            "119": {
                "name": "Xxx_FreezeCurrentState",
                "type": "Std_ReturnType Xxx_FreezeCurrentState (uint8* controlMask,uint8 controlMaskLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to freeze the current state of an I/O Control. Tags: atp. Status = draft"
            },
            "120": {
                "name": "Xxx_FreezeCurrentState",
                "type": "Std_ReturnType Xxx_FreezeCurrentState (Dcm_OpStatusType OpStatus,uint8* controlMask,uint8 controlMaskLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to freeze the current state of an IO Control. Tags: atp. Status = draft"
            },
            "121": {
                "name": "Xxx_ShortTermAdjustment",
                "type": "Std_ReturnType Xxx_ShortTermAdjustment (const uint8* ControlStateInfo,uint16 DataLength,uint8* controlMask,uint8 controlMaskLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to adjust the IO signal. Tags: atp. Status = draft"
            },
            "131": {
                "name": "Xxx_ShortTermAdjustment",
                "type": "Std_ReturnType Xxx_ShortTermAdjustment (const uint8* ControlStateInfo,uint16 DataLength,Dcm_OpStatusType OpStatus,uint8* controlMask,uint8 controlMaskLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to adjust the IO signal. Tags: atp. Status = draft"
            },
            "128": {
                "name": "Xxx_Start",
                "type": "Std_ReturnType Xxx_Start (Dcm_OpStatusType OpStatus,uint8* dataInOut,uint16* currentDataLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to start the execution of a routine. Tags: atp. Status = draft"
            },
            "129": {
                "name": "Xxx_Stop",
                "type": "Std_ReturnType Xxx_Stop (Dcm_OpStatusType OpStatus,uint8* dataInOut,uint16* currentDataLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application to stop the execution of a routine. Tags: atp.Status = draft"
            },
            "130": {
                "name": "Xxx_RequestResults",
                "type": "Std_ReturnType Xxx_RequestResults (Dcm_OpStatusType OpStatus,uint8* dataInOut,uint16* currentDataLength,Dcm_NegativeResponseCodeType* ErrorCode)",
                "comments": "This function requests to the application the result of a routine execution. Tags: atp.Status = draft"
            },
            "101": {
                "name": "Xxx_Indication",
                "type": "Std_ReturnType Xxx_Indication (uint8 SID,const uint8* RequestData,uint32 DataSize,uint8 ReqType,uint16 ConnectionId,Dcm_NegativeResponseCodeType* ErrorCode,Dcm_ProtocolType ProtocolType,uint16 TesterSourceAddress)",
                "comments": "This function indicates to the application that a service is about to be executed and allows the application to reject the execution of the service request."
            },
            "102": {
                "name": "Xxx_Confirmation",
                "type": "Std_ReturnType Xxx_Confirmation (uint8 SID,uint8 ReqType,uint16 ConnectionId,Dcm_ConfirmationStatusType ConfirmationStatus,Dcm_ProtocolType ProtocolType,uint16 TesterSourceAddress)",
                "comments": "This function confirms to the application the successful transmission or a transmission error of a diagnostic service."
            },
            "81": {
                "name": "Dem_SetEventDisabled",
                "type": "Std_ReturnType Dem_SetEventDisabled (Dem_EventIdType EventId)",
                "comments": "Service for reporting the event as disabled to the Dem for the PID $41 computation. API is needed in OBD-relevant ECUs only. API Availability: This API will be available only if ({ecuc(Dem/DemGeneral.DemOBDSupport)} != DEM_OBD_NO_OBD_SUPPORT)"
            },
            "159": {
                "name": "Dem_GetDebouncingOfEvent",
                "type": "Std_ReturnType Dem_GetDebouncingOfEvent (Dem_EventIdType EventId,Dem_DebouncingStateType* DebouncingState)",
                "comments": "Gets the debouncing status of an event. This function shall not be used for Event Id with native debouncing within their functions. It is rather for Event Ids using debouncing within the Dem."
            },
            "190": {
                "name": "Dem_GetEventAvailable",
                "type": "Std_ReturnType Dem_GetEventAvailable (Dem_EventIdType EventId,boolean* AvailableStatus)",
                "comments": "Get the Event\u2019s availability."
            },
            "109": {
                "name": "Dem_GetEventExtendedDataRecordEx",
                "type": "Std_ReturnType Dem_GetEventExtendedDataRecordEx (Dem_EventIdType EventId,uint8 RecordNumber,uint8* DestBuffer,uint16* BufSize)",
                "comments": "Gets the data of an extended data record by event."
            },
            "110": {
                "name": "Dem_GetEventFreezeFrameDataEx",
                "type": "Std_ReturnType Dem_GetEventFreezeFrameDataEx (Dem_EventIdType EventId,uint8 RecordNumber,uint16 DataId,uint8* DestBuffer,uint16* BufSize)",
                "comments": "Gets the data of a freeze frame by event."
            },
            "189": {
                "name": "Dem_SetEventStatusWithMonitorData",
                "type": "Std_ReturnType Dem_SetEventStatusWithMonitorData (Dem_EventIdType EventId,Dem_EventStatusType EventStatus,Dem_MonitorDataType monitorData0,Dem_MonitorDataType monitorData1)",
                "comments": "This API will be available only if ({Dem/DemConfigSet/DemEventParameter/DemEventReportingType} == STANDARD_REPORTING_WITH_MONITOR_DATA)"
            },
            "122": {
                "name": "Dem_SetWIRStatus",
                "type": "Std_ReturnType Dem_SetWIRStatus (Dem_EventIdType EventId,boolean WIRStatus)",
                "comments": "Sets the WIR status bit via failsafe SW-Cs. This API can only be used through the RTE and therefore no declaration is exported via Dem.h."
            }
        }
    },
    "174": {
        "name": "SOME/IP Transformer",
        "short_name": "SomeIpXf",
        "functions": {
            "5": {
                "name": "SomeIpXf_ExtractProtocolHeaderFields",
                "type": "Std_ReturnType SomeIpXf_ExtractProtocolHeaderFields (const uint8* buffer,uint32 bufferLength,Std_MessageTypeType* messageType,Std_MessageResultType* messageResult)",
                "comments": "Function to extract the relevant SOME/IP protocol header fields of the message and the type of the message result. - At the time being, this is limited to the types used for C/S communication (i.e., REQUEST and RESPONSE and OK and ERROR)."
            },
            "3": {
                "name": "SomeIpXf_transformerId",
                "type": "uint8 SomeIpXf_transformerId (uint8* buffer,uint32* bufferLength)",
                "comments": "This function transforms an external trigger event using the serialization of SOME/IP. It takes trigger as input and outputs a uint8 array. The length of the transformed data shall be calculated by the transformer during runtime and returned in the OUT parameter bufferLength. It may be smaller than the maximum buffer size used by the RTE for buffer allocation."
            },
            "4": {
                "name": "SomeIpXf_Inv_transformerId",
                "type": "uint8 SomeIpXf_Inv_transformerId (const uint8* buffer,uint32 bufferLength)",
                "comments": "This function deserializes an external trigger event using the deserialization of SOMA/IP."
            },
            "1": {
                "name": "SomeIpXf_Init",
                "type": "void SomeIpXf_Init (const SomeIpXf_ConfigType* config)",
                "comments": "This service initializes the transformer for the further processing."
            },
            "2": {
                "name": "SomeIpXf_DeInit",
                "type": "void SomeIpXf_DeInit (void)",
                "comments": "This service deinitializes the transformer."
            },
            "0": {
                "name": "SomeIpXf_GetVersionInfo",
                "type": "void SomeIpXf_GetVersionInfo (Std_VersionInfoType* VersionInfo)",
                "comments": "This service returns the version information of the called transformer module."
            }
        }
    },
    "177": {
        "name": "SOME/IP Transport Protocol",
        "short_name": "SomeIpTp",
        "functions": {
            "1": {
                "name": "SomeIpTp_GetVersionInfo",
                "type": "void SomeIpTp_GetVersionInfo (Std_VersionInfoType* VersionInfo)",
                "comments": "Returns the version information of this module."
            },
            "2": {
                "name": "SomeIpTp_Init",
                "type": "void SomeIpTp_Init (const SomeIpTp_ConfigType* config)",
                "comments": "Initializes the SOME/IP TP module."
            },
            "73": {
                "name": "SomeIpTp_Transmit",
                "type": "Std_ReturnType SomeIpTp_Transmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU."
            },
            "65": {
                "name": "SomeIpTp_TriggerTransmit",
                "type": "Std_ReturnType SomeIpTp_TriggerTransmit (PduIdType TxPduId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr."
            },
            "66": {
                "name": "SomeIpTp_RxIndication",
                "type": "void SomeIpTp_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "64": {
                "name": "SomeIpTp_TxConfirmation",
                "type": "void SomeIpTp_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "3": {
                "name": "SomeIpTp_MainFunctionTx",
                "type": "void SomeIpTp_MainFunctionTx (void)",
                "comments": "This function performs the processing of the AUTOSAR SOME/IP TP module's transmission activities."
            },
            "4": {
                "name": "SomeIpTp_MainFunctionRx",
                "type": "void SomeIpTp_MainFunctionRx (void)",
                "comments": "This function performs the processing of the AUTOSAR SOME/IP TP module\u2019s reception activities."
            }
        }
    },
    "83": {
        "name": "SPI Handler Driver",
        "short_name": "Spi",
        "functions": {
            "0": {
                "name": "Spi_Init",
                "type": "void Spi_Init (const Spi_ConfigType* ConfigPtr)",
                "comments": "Service for SPI Initialization."
            },
            "1": {
                "name": "Spi_DeInit",
                "type": "Std_ReturnType Spi_DeInit (void)",
                "comments": "Service for SPI de-initialization."
            },
            "2": {
                "name": "Spi_WriteIB",
                "type": "Std_ReturnType Spi_WriteIB (Spi_ChannelType Channel,const Spi_DataBufferType* DataBufferPtr)",
                "comments": "Service for writing one or more data to an IB SPI Handler/Driver Channel specified by parameter."
            },
            "3": {
                "name": "Spi_AsyncTransmit",
                "type": "Std_ReturnType Spi_AsyncTransmit (Spi_SequenceType Sequence)",
                "comments": "Service to transmit data on the SPI bus."
            },
            "4": {
                "name": "Spi_ReadIB",
                "type": "Std_ReturnType Spi_ReadIB (Spi_ChannelType Channel,Spi_DataBufferType* DataBufferPointer)",
                "comments": "Service for reading synchronously from one or more data channels specified by an IB SPI Handler/Driver parameter."
            },
            "5": {
                "name": "Spi_SetupEB",
                "type": "Std_ReturnType Spi_SetupEB (Spi_ChannelType Channel,const Spi_DataBufferType* SrcDataBufferPtr,Spi_DataBufferType* DesDataBufferPtr,Spi_NumberOfDataType Length)",
                "comments": "Service to set up the buffers and the length of data for the EB SPI Handler/Driver Channel specified."
            },
            "6": {
                "name": "Spi_GetStatus",
                "type": "Spi_StatusType Spi_GetStatus (void)",
                "comments": "Service returns the SPI handler/driver software module status."
            },
            "7": {
                "name": "Spi_GetJobResult",
                "type": "Spi_JobResultType Spi_GetJobResult (Spi_JobType Job)",
                "comments": "This service returns the last transmission result of the specified job."
            },
            "8": {
                "name": "Spi_GetSequenceResult",
                "type": "void Spi_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "This service returns the last transmission result of the specified sequence."
            },
            "9": {
                "name": "Spi_GetVersionInfo",
                "type": "void Spi_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "This service returns the version information of this module."
            },
            "10": {
                "name": "Spi_SyncTransmit",
                "type": "Std_ReturnType Spi_SyncTransmit (Spi_SequenceType Sequence)",
                "comments": "Service to transmit data on the SPI bus."
            },
            "11": {
                "name": "Spi_GetHWUnitStatus",
                "type": "Spi_StatusType Spi_GetHWUnitStatus (Spi_HWUnitType HWUnit)",
                "comments": "This service returns the status of the specified SPI hardware microcontroller peripheral."
            },
            "12": {
                "name": "Spi_Cancel",
                "type": "void Spi_Cancel (Spi_SequenceType Sequence)",
                "comments": "Service cancels the specified ongoing sequence transmission."
            },
            "13": {
                "name": "Spi_SetAsyncMode",
                "type": "Std_ReturnType Spi_SetAsyncMode (Spi_AsyncModeType Mode)",
                "comments": "Service to set the asynchronous mechanism mode for SPI buses handled asynchronously."
            },
            "16": {
                "name": "Spi_MainFunction_Handling",
                "type": "void Spi_MainFunction_Handling (void)",
                "comments": "It seems that you've provided a prompt requesting a correction of a specific text, but I don't see any text to fix. Could you please provide the text you'd like me to correct?"
            }
        }
    },
    "160": {
        "name": "Synchronized Time-Base Manager",
        "short_name": "StbM",
        "functions": {
            "5": {
                "name": "StbM_GetVersionInfo",
                "type": "void StbM_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "0": {
                "name": "StbM_Init",
                "type": "void StbM_Init (const StbM_ConfigType* ConfigPtr)",
                "comments": "Initializes the Synchronized Time-base Manager"
            },
            "7": {
                "name": "StbM_GetCurrentTime",
                "type": "Std_ReturnType_StbM StbM_GetCurrentTime (StbM_SynchronizedTimeBaseType timeBaseId,StbM_TimeTupleType* timeTuple,StbM_UserDataType* userData)",
                "comments": "Returns a time tuple (Local time, Global time and Time base status) and user data details. Note: This API shall be called with locked interrupts / within an Exclusive Area to prevent interruption (i.e., the risk that the timestamp is outdated on return of the function call)."
            },
            "48": {
                "name": "StbM_GetCurrentSafeTime",
                "type": "Std_ReturnType_StbM StbM_GetCurrentSafeTime (StbM_SynchronizedTimeBaseType timeBaseId,StbM_TimeTripleType* timeTriple,StbM_UserDataType* userData)",
                "comments": "Returns a time triple (LocalTime, FallbackLocalTime, GlobalTime and time base status) and user data details. Note: This API shall be called with locked interrupts / within an Exclusive Area to prevent interruption (i.e., the risk that the timestamp is outdated on return of the function call). Tags: atp. Status = draft"
            },
            "8": {
                "name": "StbM_GetCurrentTimeExtended",
                "type": "Std_ReturnType_StbM StbM_GetCurrentTimeExtended (StbM_SynchronizedTimeBaseType timeBaseId,StbM_TimeStampExtendedType* timeStamp,StbM_UserDataType* userData)",
                "comments": "Returns a time value (Local Time Based derived from Global Time Base) in extended format. Note: This API shall be called with locked interrupts / within an Exclusive Area to prevent interruption (i.e., the risk that the timestamp is outdated on return of the function call). Tags: atp. Status = obsolete"
            },
            "30": {
                "name": "StbM_GetCurrentVirtualLocalTime",
                "type": "Std_ReturnType_StbM StbM_GetCurrentVirtualLocalTime (StbM_SynchronizedTimeBaseType timeBaseId,StbM_VirtualLocalTimeType* localTimePtr)",
                "comments": "Returns the Virtual Local Time of the referenced Time Base."
            },
            "49": {
                "name": "StbM_GetFallbackVirtualLocalTime",
                "type": "Std_ReturnType_StbM StbM_GetFallbackVirtualLocalTime (StbM_SynchronizedTimeBaseType timeBaseId,StbM_VirtualLocalTimeType* localTimePtr)",
                "comments": "Returns the Fallback Virtual Local Time of the referenced Time Base. Tags: atp. Status = draft"
            },
            "11": {
                "name": "StbM_SetGlobalTime",
                "type": "Std_ReturnType_StbM StbM_SetGlobalTime (StbM_SynchronizedTimeBaseType timeBaseId,const StbM_TimeStampType* timeStamp,const StbM_UserDataType* userData)",
                "comments": "Allows the Customers to set the new global time that has to be valid for the system, which will be sent to the busses. This function will be used if a Time Master is present in this ECU."
            },
            "16": {
                "name": "StbM_UpdateGlobalTime",
                "type": "Std_ReturnType_StbM StbM_UpdateGlobalTime (StbM_SynchronizedTimeBaseType timeBaseId,const StbM_TimeStampType* timeStamp,const StbM_UserDataType* userData)",
                "comments": "Allows the Customers to set the Global Time that will be sent to the buses. This function will be used if a Time Master is present in this ECU. Using Update Global Time will not lead to an immediate transmission of the Global Time."
            },
            "12": {
                "name": "StbM_SetUserData",
                "type": "Std_ReturnType_StbM StbM_SetUserData (StbM_SynchronizedTimeBaseType timeBaseId,const StbM_UserDataType* userData)",
                "comments": "Allows the Customers to set the new User Data that has to be valid for the system, which will be sent to the busses."
            },
            "13": {
                "name": "StbM_SetOffset",
                "type": "Std_ReturnType_StbM StbM_SetOffset (StbM_SynchronizedTimeBaseType timeBaseId,const StbM_TimeStampType* timeStamp,const StbM_UserDataType* userData)",
                "comments": "Allows the Customers and the Time sync Modules to set the Offset Time and the User Data."
            },
            "14": {
                "name": "StbM_GetOffset",
                "type": "Std_ReturnType_StbM StbM_GetOffset (StbM_SynchronizedTimeBaseType timeBaseId,StbM_TimeStampType* timeStamp,StbM_UserDataType* userData)",
                "comments": "Allows the Time sync Modules to get the current Offset Time and User Data."
            },
            "31": {
                "name": "StbM_BusGetCurrentTime",
                "type": "Std_ReturnType_StbM StbM_BusGetCurrentTime (StbM_SynchronizedTimeBaseType timeBaseId,StbM_TimeStampType* globalTimePtr,StbM_VirtualLocalTimeType* localTimePtr,StbM_UserDataType* userData)",
                "comments": "Returns the current Time Tuple, status and User Data of the Time Base. Tags: atp. Status = obsolete"
            },
            "15": {
                "name": "StbM_BusSetGlobalTime",
                "type": "Std_ReturnType_StbM StbM_BusSetGlobalTime (StbM_SynchronizedTimeBaseType timeBaseId,const StbM_TimeTupleType* timeTuplePtr,const StbM_UserDataType* userDataPtr,const StbM_MeasurementType* measureDataPtr)",
                "comments": "Allows the Time Base Provider Modules to forward the Rx Time Tuple to the Stb M."
            },
            "17": {
                "name": "StbM_GetRateDeviation",
                "type": "Std_ReturnType_StbM StbM_GetRateDeviation (StbM_SynchronizedTimeBaseType timeBaseId,StbM_RateDeviationType* rateDeviation)",
                "comments": "Returns value of the current rate deviation of a Time Base"
            },
            "18": {
                "name": "StbM_SetRateCorrection",
                "type": "Std_ReturnType_StbM StbM_SetRateCorrection (StbM_SynchronizedTimeBaseType timeBaseId,StbM_RateDeviationType rateDeviation)",
                "comments": "Allows to set the rate of a Synchronized Time Base (being either a Pure Local Time Base or not)."
            },
            "19": {
                "name": "StbM_GetTimeLeap",
                "type": "Std_ReturnType_StbM StbM_GetTimeLeap (StbM_SynchronizedTimeBaseType timeBaseId,StbM_TimeDiffType* timeJump)",
                "comments": "Returns value of Time Leap."
            },
            "20": {
                "name": "StbM_GetTimeBaseStatus",
                "type": "Std_ReturnType_StbM StbM_GetTimeBaseStatus (StbM_SynchronizedTimeBaseType timeBaseId,StbM_TimeBaseStatusType* syncTimeBaseStatus,StbM_TimeBaseStatusType* offsetTimeBaseStatus)",
                "comments": "Returns detailed status information for a Synchronized (or Pure Local) Time Base and, if called for an Offset Time Base, for the Offset Time Base and the underlying Synchronized Time Base."
            },
            "43": {
                "name": "StbM_CloneTimeBase",
                "type": "Std_ReturnType_StbM StbM_CloneTimeBase (StbM_SynchronizedTimeBaseType timeBaseId,StbM_CloneConfigType cloneCfg,StbM_TimeBaseStatusType statusMask,StbM_TimeBaseStatusType statusValue)",
                "comments": "Copies Time Base data (current time, user data, rate correction) from Source Time Base to Destination Time Base. The Source Time Base is identified by the parameter StbM_SourceTimeBase (ECUC_StbM_00074). StbM_CloneTimeBase behaves synchronously (immediate copy of Time Base) if DEFERRED_COPY flag of parameter cloneCfg is set to true; otherwise, it behaves asynchronously (deferred copy of Time Base). Note: Even if configured to behave synchronously (immediate copy of Time Base), actual transmission of cloned Time Base value on the bus occurs asynchronously."
            },
            "21": {
                "name": "StbM_StartTimer",
                "type": "Std_ReturnType_StbM StbM_StartTimer (StbM_SynchronizedTimeBaseType timeBaseId,StbM_CustomerIdType customerId,const StbM_TimeStampType* expireTime)",
                "comments": "Sets a time value, which the Time Base value is compared against."
            },
            "22": {
                "name": "StbM_GetSyncTimeRecordHead",
                "type": "Std_ReturnType_StbM StbM_GetSyncTimeRecordHead (StbM_SynchronizedTimeBaseType timeBaseId,StbM_SyncRecordTableHeadType* syncRecordTableHead)",
                "comments": "Access to the recorded snapshot data header of the table belonging to the Synchronized Time Base."
            },
            "23": {
                "name": "StbM_GetOffsetTimeRecordHead",
                "type": "Std_ReturnType_StbM StbM_GetOffsetTimeRecordHead (StbM_SynchronizedTimeBaseType timeBaseId,StbM_OffsetRecordTableHeadType* offsetRecordTableHead)",
                "comments": "Access to the recorded snapshot data header of the table belonging to the Offset Time Base."
            },
            "28": {
                "name": "StbM_TriggerTimeTransmission",
                "type": "Std_ReturnType_StbM StbM_TriggerTimeTransmission (StbM_SynchronizedTimeBaseType timeBaseId)",
                "comments": "Called by the <UpperLayer> to force the Time sync Modules to transmit the current Time Base again due to an incremented time Base Update Counter timeBaseId"
            },
            "27": {
                "name": "StbM_GetTimeBaseUpdateCounter",
                "type": "uint8 StbM_GetTimeBaseUpdateCounter (StbM_SynchronizedTimeBaseType timeBaseId)",
                "comments": "Allows the Time sync Modules to detect, whether a Time Base should be transmitted immediately in the subsequent <Bus> TSyn_MainFunction() cycle."
            },
            "29": {
                "name": "StbM_GetMasterConfig",
                "type": "Std_ReturnType_StbM StbM_GetMasterConfig (StbM_SynchronizedTimeBaseType timeBaseId,StbM_MasterConfigType* masterConfig)",
                "comments": "Indicates if the functionality for a system wide master (e.g. StbM_SetGlobalTime) for a given Time Base is available or not."
            },
            "38": {
                "name": "StbM_CanSetSlaveTimingData",
                "type": "Std_ReturnType_StbM StbM_CanSetSlaveTimingData (StbM_SynchronizedTimeBaseType timeBaseId,const StbM_CanTimeSlaveMeasurementType* measureDataPtr)",
                "comments": "Allows the CanTSyn Module to forward CAN specific details to the StbM. Tags: atp. Status = draft"
            },
            "39": {
                "name": "StbM_FrSetSlaveTimingData",
                "type": "Std_ReturnType_StbM StbM_FrSetSlaveTimingData (StbM_SynchronizedTimeBaseType timeBaseId,const StbM_FrTimeSlaveMeasurementType* measureDataPtr)",
                "comments": "Allows the FrT Syn Module to forward Flexray specific details to the Stb M. Tags: atp. Status = draft."
            },
            "40": {
                "name": "StbM_EthSetSlaveTimingData",
                "type": "Std_ReturnType_StbM StbM_EthSetSlaveTimingData (StbM_SynchronizedTimeBaseType timeBaseId,const StbM_EthTimeSlaveMeasurementType* measureDataPtr)",
                "comments": "Allows the EthT Syn Module to forward Ethernet specific details to the Stb M. Tags: atp. Status = draft"
            },
            "32": {
                "name": "StbM_CanSetMasterTimingData",
                "type": "Std_ReturnType_StbM StbM_CanSetMasterTimingData (StbM_SynchronizedTimeBaseType timeBaseId,const StbM_CanTimeMasterMeasurementType* measureDataPtr)",
                "comments": "Provides CAN Time synchronization module specific data for a Time Master to the StbM. Tags: atp. Status = draft"
            },
            "33": {
                "name": "StbM_FrSetMasterTimingData",
                "type": "Std_ReturnType_StbM StbM_FrSetMasterTimingData (StbM_SynchronizedTimeBaseType timeBaseId,const StbM_FrTimeMasterMeasurementType* measureDataPtr)",
                "comments": "Provides Flexray Timesyn module specific data for a Time Master to the StbM. Tags: atp. Status = draft"
            },
            "34": {
                "name": "StbM_EthSetMasterTimingData",
                "type": "Std_ReturnType_StbM StbM_EthSetMasterTimingData (StbM_SynchronizedTimeBaseType timeBaseId,const StbM_EthTimeMasterMeasurementType* measureDataPtr)",
                "comments": "Provides Ethernet Time sync module specific data for a Time Master to the Stb M. Tags: atp. Status = draft"
            },
            "35": {
                "name": "StbM_EthSetPdelayInitiatorData",
                "type": "Std_ReturnType_StbM StbM_EthSetPdelayInitiatorData (StbM_SynchronizedTimeBaseType timeBaseId,const StbM_PdelayInitiatorMeasurementType* measureDataPtr)",
                "comments": "\u2013Tags: atp.Status = draft"
            },
            "36": {
                "name": "StbM_EthSetPdelayResponderData",
                "type": "Std_ReturnType_StbM StbM_EthSetPdelayResponderData (StbM_SynchronizedTimeBaseType timeBaseId,const StbM_PdelayResponderMeasurementType* measureDataPtr)",
                "comments": "\u2013Tags: atp.Status=draft"
            },
            "41": {
                "name": "StbM_GetBusProtocolParam",
                "type": "Std_ReturnType_StbM StbM_GetBusProtocolParam (StbM_SynchronizedTimeBaseType timeBaseId,StbM_ProtocolParamType* protocolParam)",
                "comments": "This API is used to get bus specific parameters from received Follow_Up message."
            },
            "42": {
                "name": "StbM_SetBusProtocolParam",
                "type": "Std_ReturnType_StbM StbM_SetBusProtocolParam (StbM_SynchronizedTimeBaseType timeBaseId,const StbM_ProtocolParamType* protocolParam)",
                "comments": "This API is used to set bus specific parameters of a Time Master."
            },
            "44": {
                "name": "StbM_GetTxFreshness",
                "type": "Std_ReturnType_StbM StbM_GetTxFreshness (uint16 StbMFreshnessValueId,uint8* StbMFreshnessValue,uint32* StbMFreshnessValueLength)",
                "comments": "This API returns the freshness value from the Most Significant Bits in the first byte of the Freshness array, in big endian format. Tags: atp. Status = draft"
            },
            "45": {
                "name": "StbM_GetTxFreshnessTruncData",
                "type": "Std_ReturnType_StbM StbM_GetTxFreshnessTruncData (uint16 StbMFreshnessValueId,uint8* StbMFreshnessValue,uint32* StbMFreshnessValueLength,uint8* StbMTruncatedFreshnessValue,uint32* StbMTruncatedFreshnessValueLength)",
                "comments": "This interface is used by the StbM to obtain the current freshness value. The interface function provides also the truncated freshness transmitted in the secured time sync message. Tags: atp. Status = draft"
            },
            "46": {
                "name": "StbM_SPduTxConfirmation",
                "type": "void StbM_SPduTxConfirmation (uint16 StbMFreshnessValueId)",
                "comments": "This interface is used by the StbM to indicate that the Secured Time Synchronization Message has been initiated for transmission. Tags: atp.Status = draft"
            },
            "47": {
                "name": "StbM_GetRxFreshness",
                "type": "Std_ReturnType_StbM StbM_GetRxFreshness (uint16 StbMFreshnessValueId,const uint8* StbMTruncatedFreshnessValue,uint32 StbMTruncatedFreshnessValueLength,uint16 StbMAuthVerifyAttempts,uint8* StbMFreshnessValue,uint32* StbMFreshnessValueLength)",
                "comments": "This interface is used by the StbM to query the current freshness value. Tags: atp.Status = draft"
            },
            "4": {
                "name": "StbM_MainFunction",
                "type": "void StbM_MainFunction (void)",
                "comments": "This function will be called cyclically by a task body provided by the BSW Schedule. It will invoke the triggered customers and synchronize the referenced OS Schedule Tables."
            }
        }
    },
    "170": {
        "name": "TCP/IP Stack",
        "short_name": "TcpIp",
        "functions": {
            "1": {
                "name": "TcpIp_Init",
                "type": "void TcpIp_Init (const TcpIp_ConfigType* ConfigPtr)",
                "comments": "This service initializes the TCP/IP Stack. TcpIp_Init may not block the start-up process for an indefinite amount of time. Caveats: The call of this service is mandatory before using the TcpIp instance for further processing."
            },
            "2": {
                "name": "TcpIp_GetVersionInfo",
                "type": "void TcpIp_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information."
            },
            "4": {
                "name": "TcpIp_Close",
                "type": "Std_ReturnType TcpIp_Close (TcpIp_SocketIdType SocketId,boolean Abort)",
                "comments": "By this API service the TCP/IP stack is requested to close the socket and release all related resources."
            },
            "5": {
                "name": "TcpIp_Bind",
                "type": "Std_ReturnType TcpIp_Bind (TcpIp_SocketIdType SocketId,TcpIp_LocalAddrIdType LocalAddrId,uint16* PortPtr)",
                "comments": "By this API service the TCP/IP stack is requested to bind a UDP or TCP socket to a local resource."
            },
            "6": {
                "name": "TcpIp_TcpConnect",
                "type": "Std_ReturnType TcpIp_TcpConnect (TcpIp_SocketIdType SocketId,const TcpIp_SockAddrType* RemoteAddrPtr)",
                "comments": "By this API service the TCP/IP stack is requested to establish a TCP connection to the configured peer."
            },
            "7": {
                "name": "TcpIp_TcpListen",
                "type": "Std_ReturnType TcpIp_TcpListen (TcpIp_SocketIdType SocketId,uint16 MaxChannels)",
                "comments": "By this API service the TCP/IP stack is requested to listen on the TCP socket specified by the socket identifier."
            },
            "8": {
                "name": "TcpIp_TcpReceived",
                "type": "Std_ReturnType TcpIp_TcpReceived (TcpIp_SocketIdType SocketId,uint32 Length)",
                "comments": "By this API service the reception of socket data is confirmed to the TCP/IP stack."
            },
            "9": {
                "name": "TcpIp_RequestComMode",
                "type": "Std_ReturnType TcpIp_RequestComMode (uint8 CtrlIdx,TcpIp_StateType State)",
                "comments": "By this API service the TCP/IP stack is requested to change the TCP/IP state of the communication network identified by EthIf controller index."
            },
            "10": {
                "name": "TcpIp_RequestIpAddrAssignment",
                "type": "Std_ReturnType TcpIp_RequestIpAddrAssignment (TcpIp_LocalAddrIdType LocalAddrId,TcpIp_IpAddrAssignmentType Type,const TcpIp_SockAddrType* LocalIpAddrPtr,uint8 Netmask,const TcpIp_SockAddrType* DefaultRouterPtr)",
                "comments": "By this API service the local IP address assignment for the IP address specified by LocalAddrId shall be initiated."
            },
            "11": {
                "name": "TcpIp_ReleaseIpAddrAssignment",
                "type": "Std_ReturnType TcpIp_ReleaseIpAddrAssignment (TcpIp_LocalAddrIdType LocalAddrId)",
                "comments": "By this API service the local IP address assignment for the IP address specified by LocalAddrId shall be released."
            },
            "27": {
                "name": "TcpIp_ResetIpAssignment",
                "type": "Std_ReturnType TcpIp_ResetIpAssignment (void)",
                "comments": "Resets all learned IP-addresses to invalid values."
            },
            "12": {
                "name": "TcpIp_IcmpTransmit",
                "type": "Std_ReturnType TcpIp_IcmpTransmit (TcpIp_LocalAddrIdType LocalIpAddrId,const TcpIp_SockAddrType* RemoteAddrPtr,uint8 Ttl,uint8 Type,uint8 Code,uint16 DataLength,const uint8* DataPtr)",
                "comments": "By this API service the TCP/IP stack sends an ICMP message according to the specified parameters."
            },
            "24": {
                "name": "TcpIp_IcmpV6Transmit",
                "type": "Std_ReturnType TcpIp_IcmpV6Transmit (TcpIp_LocalAddrIdType LocalIpAddrId,const TcpIp_SockAddrType* RemoteAddrPtr,uint8 HopLimit,uint8 Type,uint8 Code,uint16 DataLength,const uint8* DataPtr)",
                "comments": "By this API service the TCP/IP stack sends an ICMPv6 message according to the specified parameters."
            },
            "13": {
                "name": "TcpIp_DhcpReadOption",
                "type": "Std_ReturnType TcpIp_DhcpReadOption (TcpIp_LocalAddrIdType LocalIpAddrId,uint8 Option,uint8* DataLength,uint8* DataPtr)",
                "comments": "By this API service the TCP/IP stack retrieves DHCP option data identified by parameter option for already received DHCP options."
            },
            "25": {
                "name": "TcpIp_DhcpV6ReadOption",
                "type": "Std_ReturnType TcpIp_DhcpV6ReadOption (TcpIp_LocalAddrIdType LocalIpAddrId,uint16 Option,uint16* DataLength,uint8* DataPtr)",
                "comments": "By this API service, the TCP/IP stack retrieves DHCPv6 option data identified by parameter option for already received DHCPv6 options."
            },
            "14": {
                "name": "TcpIp_DhcpWriteOption",
                "type": "Std_ReturnType TcpIp_DhcpWriteOption (TcpIp_LocalAddrIdType LocalIpAddrId,uint8 Option,uint8 DataLength,const uint8* DataPtr)",
                "comments": "By this API service the TCP/IP stack writes the DHCP option data identified by parameter option."
            },
            "26": {
                "name": "TcpIp_DhcpV6WriteOption",
                "type": "Std_ReturnType TcpIp_DhcpV6WriteOption (TcpIp_LocalAddrIdType LocalIpAddrId,uint16 Option,uint16 DataLength,const uint8* DataPtr)",
                "comments": "By this API service the TCP/IP stack writes the DHCPv6 option data identified by parameter option."
            },
            "15": {
                "name": "TcpIp_ChangeParameter",
                "type": "Std_ReturnType TcpIp_ChangeParameter (TcpIp_SocketIdType SocketId,TcpIp_ParamIdType ParameterId,const uint8* ParameterValue)",
                "comments": "By this API service the TCP/IP stack is requested to change a parameter of a socket. E.g. the Nagle algorithm may be controlled by this API."
            },
            "16": {
                "name": "TcpIp_GetIpAddr",
                "type": "Std_ReturnType TcpIp_GetIpAddr (TcpIp_LocalAddrIdType LocalAddrId,TcpIp_SockAddrType* IpAddrPtr,uint8* NetmaskPtr,TcpIp_SockAddrType* DefaultRouterPtr)",
                "comments": "ObtainsthelocalIPaddressactuallyusedbyLocalAddrId, thenetmaskanddefaultrouter."
            },
            "17": {
                "name": "TcpIp_GetPhysAddr",
                "type": "Std_ReturnType TcpIp_GetPhysAddr (TcpIp_LocalAddrIdType LocalAddrId,uint8* PhysAddrPtr)",
                "comments": "Obtains the physical source address used by the Eth If controller implicitly specified via Local Addr Id."
            },
            "22": {
                "name": "TcpIp_GetRemotePhysAddr",
                "type": "TcpIp_ReturnType TcpIp_GetRemotePhysAddr (uint8 CtrlIdx,const TcpIp_SockAddrType* IpAddrPtr,uint8* PhysAddrPtr,boolean initRes)",
                "comments": "TcpIp_GetRemotePhysAddr queries the IP/physical address translation table specified by CtrlIdx and returns the physical address related to the IP address specified by IpAddrPtr. In case no physical address can be retrieved and parameter initRes is TRUE, address resolution for the specified IP address is initiated on the local network."
            },
            "23": {
                "name": "TcpIp_GetCtrlIdx",
                "type": "Std_ReturnType TcpIp_GetCtrlIdx (TcpIp_LocalAddrIdType LocalAddrId,uint8* CtrlIdxPtr)",
                "comments": "TcpIp_GetCtrlIdx returns the index of the controller related to LocalAddrId."
            },
            "29": {
                "name": "TcpIp_GetArpCacheEntries",
                "type": "Std_ReturnType TcpIp_GetArpCacheEntries (uint8 ctrlIdx,uint32* numberOfElements,TcpIp_ArpCacheEntryType* entryListPtr)",
                "comments": "Copies entries from the physical address cache of the IPv4 instance that is active on the Eth If controller specified by ctrlIdx into a user-provided buffer. The function will copy all or numberOfElements into the output list. If the input value of numberOfElements is 0, the function will not copy any data but only return the number of valid entries in the cache. EntryListPtr may be NULL_PTR in this case."
            },
            "28": {
                "name": "TcpIp_GetNdpCacheEntries",
                "type": "Std_ReturnType TcpIp_GetNdpCacheEntries (uint8 ctrlIdx,uint32* numberOfElements,TcpIp_NdpCacheEntryType* entryListPtr)",
                "comments": "Copies entries from the physical address cache of the IPv6 instance that is active on the EthIf controller specified by ctrlIdx into a user provided buffer. The function will copy all or numberOfElements into the output list. If input value of numberOfElements is 0, the function will not copy any data but only return the number of valid entries in the cache. EntryListPtr may be NULL_PTR in this case."
            },
            "69": {
                "name": "TcpIp_GetAndResetMeasurementData",
                "type": "Std_ReturnType TcpIp_GetAndResetMeasurementData (TcpIp_MeasurementIdxType MeasurementIdx,boolean MeasurementResetNeeded,uint32* MeasurementDataPtr)",
                "comments": "Allow store read and reset detailed measurement data for diagnostic purposes. Get all Measurement Index\u2019s at once is not supported. TCPIP_MEAS_ALL shall only be used to reset all Measurement Index\u2019s at once. A NULL_PTR shall be provided for Measurement Data Ptr in this case."
            },
            "70": {
                "name": "TcpIp_IsConnectionReady",
                "type": "TcpIp_ReturnType TcpIp_IsConnectionReady (TcpIp_SocketIdType SocketId,const TcpIp_SockAddrType* RemoteAddrPtr)",
                "comments": "API allows to check if a communication over this socket is possible for a dedicated remote address. It includes that the socket is bound, a physical address is available for the requested remote address and if a security association is configured that a secured connection is already established."
            },
            "18": {
                "name": "TcpIp_UdpTransmit",
                "type": "Std_ReturnType TcpIp_UdpTransmit (TcpIp_SocketIdType SocketId,const uint8* DataPtr,const TcpIp_SockAddrType* RemoteAddrPtr,uint16 TotalLength)",
                "comments": "This service transmits data via UDP to a remote node. The transmission of the data is immediately performed with this function call by forwarding it to Eth If."
            },
            "19": {
                "name": "TcpIp_TcpTransmit",
                "type": "Std_ReturnType TcpIp_TcpTransmit (TcpIp_SocketIdType SocketId,const uint8* DataPtr,uint32 AvailableLength,boolean ForceRetrieve)",
                "comments": "This service request transmits data via TCP to a remote node. The transmission of the data is decoupled. Note: The TCP segment(s) are sent dependent on runtime factors (e.g. receive window) and configuration parameters (e.g. Nagle algorithm)."
            },
            "20": {
                "name": "TcpIp_RxIndication",
                "type": "void TcpIp_RxIndication (uint8 CtrlIdx,Eth_FrameType FrameType,boolean IsBroadcast,const uint8* PhysAddrPtr,const uint8* DataPtr,uint16 LenByte)",
                "comments": "By this API service the TCP/IP stack gets an indication and the data of a received frame."
            },
            "21": {
                "name": "TcpIp_MainFunction",
                "type": "void TcpIp_MainFunction (void)",
                "comments": "Schedules the TCP/IP stack. (Entry point for scheduling)"
            },
            "3": {
                "name": "TcpIp_UpGetSocket",
                "type": "Std_ReturnType TcpIp_UpGetSocket (TcpIp_DomainType Domain,TcpIp_ProtocolType Protocol,TcpIp_SocketIdType* SocketIdPtr)",
                "comments": "By this API service the TCP/IP stack is requested to allocate a new socket. Note: Each accepted incoming TCP connection also allocates a socket resource."
            },
            "30": {
                "name": "Up_DADAddressConflict",
                "type": "void Up_DADAddressConflict (TcpIp_LocalAddrIdType IpAddrId,const TcpIp_SockAddrType* IpAddrPtr,const uint8* LocalPhysAddrPtr,const uint8* RemotePhysAddrPtr)",
                "comments": "This API is called by TCP/IP in case the Duplicate Address Detection (DAD) is enabled and detecting a duplicate IP address."
            }
        }
    },
    "14": {
        "name": "Time Service",
        "short_name": "Tm",
        "functions": {
            "1": {
                "name": "Tm_GetVersionInfo",
                "type": "void Tm_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information of this module."
            },
            "2": {
                "name": "Tm_ResetTimer1us16bit",
                "type": "Std_ReturnType Tm_ResetTimer1us16bit (Tm_PredefTimer1us16bitType* TimerPtr)",
                "comments": "ResetSatimerInstance(userPointOfView)."
            },
            "3": {
                "name": "Tm_GetTimeSpan1us16bit",
                "type": "Std_ReturnType Tm_GetTimeSpan1us16bit (const Tm_PredefTimer1us16bitType* TimerPtr,uint16* TimeSpanPtr)",
                "comments": "DeliverstheTimeDifference(currentTime - referenceTime)."
            },
            "4": {
                "name": "Tm_ShiftTimer1us16bit",
                "type": "void Tm_ShiftTimer1us16bit (Tm_PredefTimer1us16bitType* TimerPtr,uint16 TimeValue)",
                "comments": "Shifts the reference time of the timer instance."
            },
            "5": {
                "name": "Tm_SyncTimer1us16bit",
                "type": "void Tm_SyncTimer1us16bit (Tm_PredefTimer1us16bitType* TimerDstPtr,const Tm_PredefTimer1us16bitType* TimerSrcPtr)",
                "comments": "Synchronize two timer instances."
            },
            "6": {
                "name": "Tm_BusyWait1us16bit",
                "type": "Std_ReturnType Tm_BusyWait1us16bit (uint8 WaitingTimeMin)",
                "comments": "Performs busy waiting by polling with a guaranteed minimum waiting time."
            },
            "7": {
                "name": "Tm_ResetTimer1us24bit",
                "type": "Std_ReturnType Tm_ResetTimer1us24bit (Tm_PredefTimer1us24bitType* TimerPtr)",
                "comments": "ResetSatelliteTimerInstance(userPointOfView)."
            },
            "8": {
                "name": "Tm_GetTimeSpan1us24bit",
                "type": "Std_ReturnType Tm_GetTimeSpan1us24bit (const Tm_PredefTimer1us24bitType* TimerPtr,uint32* TimeSpanPtr)",
                "comments": "Deliversthe_time_difference(current_time - reference_time)."
            },
            "9": {
                "name": "Tm_ShiftTimer1us24bit",
                "type": "void Tm_ShiftTimer1us24bit (Tm_PredefTimer1us24bitType* TimerPtr,uint32 TimeValue)",
                "comments": "Shifts the reference time of the timer instance."
            },
            "10": {
                "name": "Tm_SyncTimer1us24bit",
                "type": "void Tm_SyncTimer1us24bit (Tm_PredefTimer1us24bitType* TimerDstPtr,const Tm_PredefTimer1us24bitType* TimerSrcPtr)",
                "comments": "Synchronize two timer instances."
            },
            "11": {
                "name": "Tm_BusyWait1us24bit",
                "type": "Std_ReturnType Tm_BusyWait1us24bit (uint8 WaitingTimeMin)",
                "comments": "Performs busy waiting by polling with a guaranteed minimum waiting time."
            },
            "12": {
                "name": "Tm_ResetTimer1us32bit",
                "type": "Std_ReturnType Tm_ResetTimer1us32bit (Tm_PredefTimer1us32bitType* TimerPtr)",
                "comments": "ResetSatimerInstance(userPointOfView)."
            },
            "13": {
                "name": "Tm_GetTimeSpan1us32bit",
                "type": "Std_ReturnType Tm_GetTimeSpan1us32bit (const Tm_PredefTimer1us32bitType* TimerPtr,uint32* TimeSpanPtr)",
                "comments": "DeliverstheTimeDifference(currentTime - referenceTime)."
            },
            "14": {
                "name": "Tm_ShiftTimer1us32bit",
                "type": "void Tm_ShiftTimer1us32bit (Tm_PredefTimer1us32bitType* TimerPtr,uint32 TimeValue)",
                "comments": "Shifts the reference time of the timer instance."
            },
            "15": {
                "name": "Tm_SyncTimer1us32bit",
                "type": "void Tm_SyncTimer1us32bit (Tm_PredefTimer1us32bitType* TimerDstPtr,const Tm_PredefTimer1us32bitType* TimerSrcPtr)",
                "comments": "Synchronize two timer instances."
            },
            "16": {
                "name": "Tm_BusyWait1us32bit",
                "type": "Std_ReturnType Tm_BusyWait1us32bit (uint8 WaitingTimeMin)",
                "comments": "Performs busy waiting by polling with a guaranteed minimum waiting time."
            },
            "17": {
                "name": "Tm_ResetTimer100us32bit",
                "type": "Std_ReturnType Tm_ResetTimer100us32bit (Tm_PredefTimer100us32bitType* TimerPtr)",
                "comments": "ResetSatTimerInstance(userPointOfView)."
            },
            "18": {
                "name": "Tm_GetTimeSpan100us32bit",
                "type": "Std_ReturnType Tm_GetTimeSpan100us32bit (const Tm_PredefTimer100us32bitType* TimerPtr,uint32* TimeSpanPtr)",
                "comments": "Deliversthe_time_difference(current_time - reference_time)."
            },
            "19": {
                "name": "Tm_ShiftTimer100us32bit",
                "type": "void Tm_ShiftTimer100us32bit (Tm_PredefTimer100us32bitType* TimerPtr,uint32 TimeValue)",
                "comments": "Shifts the reference time of the timer instance."
            },
            "20": {
                "name": "Tm_SyncTimer100us32bit",
                "type": "void Tm_SyncTimer100us32bit (Tm_PredefTimer100us32bitType* TimerDstPtr,const Tm_PredefTimer100us32bitType* TimerSrcPtr)",
                "comments": "Synchronize two timer instances."
            }
        }
    },
    "161": {
        "name": "Time Sync Over CAN",
        "short_name": "CanTSyn",
        "functions": {
            "1": {
                "name": "CanTSyn_Init",
                "type": "void CanTSyn_Init (const CanTSyn_ConfigType* configPtr)",
                "comments": "This function initializes the Time Synchronization over CAN."
            },
            "2": {
                "name": "CanTSyn_GetVersionInfo",
                "type": "void CanTSyn_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "3": {
                "name": "CanTSyn_SetTransmissionMode",
                "type": "void CanTSyn_SetTransmissionMode (uint8 CtrlIdx,CanTSyn_TransmissionModeType Mode)",
                "comments": "This API is used to turn on and off the TX capabilities of the Can T Syn."
            },
            "66": {
                "name": "CanTSyn_RxIndication",
                "type": "void CanTSyn_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "64": {
                "name": "CanTSyn_TxConfirmation",
                "type": "void CanTSyn_TxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "7": {
                "name": "CanTSyn_IcvGenerationIndication",
                "type": "void CanTSyn_IcvGenerationIndication (uint32 jobId,Std_ReturnType_Csm result)",
                "comments": "By this API service the CanT Syn gets an indication and the result of ICV generation. Tags: atp. Status = draft"
            },
            "8": {
                "name": "CanTSyn_IcvVerificationIndication",
                "type": "void CanTSyn_IcvVerificationIndication (uint32 jobId,Std_ReturnType_Csm result)",
                "comments": "By this API service the CanT Syn gets an indication and the result of ICV verification. Tags: atp. Status = draft"
            },
            "6": {
                "name": "CanTSyn_MainFunction",
                "type": "void CanTSyn_MainFunction (void)",
                "comments": "Main function for cyclic call/response. Time sync message transmission."
            }
        }
    },
    "164": {
        "name": "Time Sync Over Ethernet",
        "short_name": "EthTSyn",
        "functions": {
            "1": {
                "name": "EthTSyn_Init",
                "type": "void EthTSyn_Init (const EthTSyn_ConfigType* configPtr)",
                "comments": "This function initializes the Time Synchronization over Ethernet."
            },
            "2": {
                "name": "EthTSyn_GetVersionInfo",
                "type": "void EthTSyn_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "5": {
                "name": "EthTSyn_SetTransmissionMode",
                "type": "void EthTSyn_SetTransmissionMode (uint8 CtrlIdx,EthTSyn_TransmissionModeType Mode)",
                "comments": "This API is used to turn on and off the TX capabilities of the EthT Syn."
            },
            "10": {
                "name": "EthTSyn_SetProtocolParam",
                "type": "Std_ReturnType EthTSyn_SetProtocolParam (StbM_SynchronizedTimeBaseType timeBaseId,const StbM_ProtocolParamType* protocolParam)",
                "comments": "This API is used to set Follow Up information TLV parameters of a Follow_Up message prior transmission. The API is called within StbM_SetBusProtocolParam which provides the content of the structure protocolParam."
            },
            "11": {
                "name": "EthTSyn_GetProtocolParam",
                "type": "Std_ReturnType EthTSyn_GetProtocolParam (StbM_SynchronizedTimeBaseType timeBaseId,StbM_ProtocolParamType* protocolParam)",
                "comments": "This API is used to read Follow Up information TLV parameters from received Follow_Up message."
            },
            "6": {
                "name": "EthTSyn_RxIndication",
                "type": "void EthTSyn_RxIndication (uint8 CtrlIdx,Eth_FrameType FrameType,boolean IsBroadcast,const uint8* PhysAddrPtr,const uint8* DataPtr,uint16 LenByte)",
                "comments": "By this API service the EthT Syn gets an indication and the data of a received frame."
            },
            "7": {
                "name": "EthTSyn_TxConfirmation",
                "type": "void EthTSyn_TxConfirmation (uint8 CtrlIdx,Eth_BufIdxType BufIdx,Std_ReturnType Result)",
                "comments": "Confirms the transmission of an Ethernet frame."
            },
            "8": {
                "name": "EthTSyn_TrcvLinkStateChg",
                "type": "void EthTSyn_TrcvLinkStateChg (uint8 CtrlIdx,EthTrcv_LinkStateType TrcvLinkState)",
                "comments": "Allows resetting state machine in case of unexpected Link loss to avoid inconsistent Sync and Follow-Up sequences"
            },
            "12": {
                "name": "EthTSyn_IcvGenerationIndication",
                "type": "void EthTSyn_IcvGenerationIndication (uint32 jobId,Std_ReturnType_Csm result)",
                "comments": "By this API service the EthT Syn gets an indication and the result of ICV generation. Tags: atp. Status = draft"
            },
            "13": {
                "name": "EthTSyn_IcvVerificationIndication",
                "type": "void EthTSyn_IcvVerificationIndication (uint32 jobId,Std_ReturnType_Csm result)",
                "comments": "By this API service the EthT Syn gets an indication and the result of ICV verification. Tags: atp. Status = draft"
            },
            "9": {
                "name": "EthTSyn_MainFunction",
                "type": "void EthTSyn_MainFunction (void)",
                "comments": "Main function for cyclic call/resp. Sync, Follow Up and Pdelay Req transmissions"
            }
        }
    },
    "163": {
        "name": "Time Sync Over FlexRay",
        "short_name": "FrTSyn",
        "functions": {
            "1": {
                "name": "FrTSyn_Init",
                "type": "void FrTSyn_Init (const FrTSyn_ConfigType* configPtr)",
                "comments": "This function initializes the Time Synchronization over FlexRay."
            },
            "2": {
                "name": "FrTSyn_GetVersionInfo",
                "type": "void FrTSyn_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "3": {
                "name": "FrTSyn_SetTransmissionMode",
                "type": "void FrTSyn_SetTransmissionMode (uint8 CtrlIdx,FrTSyn_TransmissionModeType Mode)",
                "comments": "This API is used to turn on and off the TX capabilities of the FrT Syn."
            },
            "66": {
                "name": "FrTSyn_RxIndication",
                "type": "void FrTSyn_RxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "65": {
                "name": "FrTSyn_TriggerTransmit",
                "type": "Std_ReturnType FrTSyn_TriggerTransmit (PduIdType TxPduId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr."
            },
            "5": {
                "name": "FrTSyn_IcvGenerationIndication",
                "type": "void FrTSyn_IcvGenerationIndication (uint32 jobId,Std_ReturnType_Csm result)",
                "comments": "By this API service the FrT Syn gets an indication and the result of ICV generation. Tags: atp. Status = draft"
            },
            "6": {
                "name": "FrTSyn_IcvVerificationIndication",
                "type": "void FrTSyn_IcvVerificationIndication (uint32 jobId,Std_ReturnType_Csm result)",
                "comments": "By this API service the FrT Syn gets an indication and the result of ICV verification. Tags: atp. Status = draft"
            },
            "4": {
                "name": "FrTSyn_MainFunction",
                "type": "void FrTSyn_MainFunction (void)",
                "comments": "Main function for cyclic call/resp. Time sync message transmission"
            }
        }
    },
    "84": {
        "name": "TTCAN Driver",
        "short_name": "Ttcan",
        "functions": {
            "51": {
                "name": "Can_TTGetControllerTime",
                "type": "void Can_TTGetControllerTime (uint8 Controller,Can_TTTimeType* Can_TTGlobalTime,Can_TTTimeType* Can_TTLocalTime,Can_TTTimeType* Can_TTCycleTime,uint8* Can_TTCycleCount)",
                "comments": "Gets the current values for the global, local and cycle time and the cycle count of the controller."
            },
            "52": {
                "name": "Can_TTGetMasterState",
                "type": "void Can_TTGetMasterState (uint8 Controller,Can_TTMasterStateType* Can_TTMasterState)",
                "comments": "Get the master state. The master state includes the sync mode (sync_off, synchronizing, in_gap, in_schedule), the master-slave mode (master_off, slave, backup_master, current_master), and the current value for ref trigger offset."
            },
            "53": {
                "name": "Can_TTGetNTUActual",
                "type": "void Can_TTGetNTUActual (uint8 Controller,Can_TTTURType* Can_TTTURAct)",
                "comments": "Gets the actual value of NTU (network time unit). Together with the local oscillator period, the actual value of NTU can be derived from the actual value of TUR."
            },
            "54": {
                "name": "Can_TTGetErrorLevel",
                "type": "void Can_TTGetErrorLevel (uint8 Controller,Can_TTErrorLevelType* Can_TTErrorLevel)",
                "comments": "Gets the error level. This includes the severity of the error level (S0-S3) and the minimum and maximum value of the message status count."
            },
            "55": {
                "name": "Can_TTSetNextIsGap",
                "type": "void Can_TTSetNextIsGap (uint8 Controller)",
                "comments": "Sets the \"Next_is_Gap\" bit."
            },
            "56": {
                "name": "Can_TTSetEndOfGap",
                "type": "void Can_TTSetEndOfGap (uint8 Controller)",
                "comments": "Signals the end of a gap."
            },
            "57": {
                "name": "Can_TTSetTimeCommand",
                "type": "void Can_TTSetTimeCommand (uint8 Controller)",
                "comments": "Adjusts the global time at the beginning of the next basic cycle by the amount of \"global time preset.\""
            },
            "58": {
                "name": "Can_TTGlobalTimePreset",
                "type": "void Can_TTGlobalTimePreset (uint8 Controller,Can_TTTimeType Can_TTGlobalTimePreset)",
                "comments": "Sets the value of \"global time preset\"."
            },
            "59": {
                "name": "Can_TTSetExtClockSyncCommand",
                "type": "void Can_TTSetExtClockSyncCommand (uint8 Controller)",
                "comments": "Adjust the NTU (network time unit) according to the value given by \"NTU adjust\". Together with the local oscillator period, \"TUR adjust\" can be derived from \"NTU adjust\"."
            },
            "60": {
                "name": "Can_TTSetNTUAdjust",
                "type": "void Can_TTSetNTUAdjust (uint8 Controller,Can_TTTURType Can_TTTURAdjust)",
                "comments": "Sets the value of \"NTU adjust\". Together with the local oscillator period, \"TUR adjust\" can be derived from \"NTU adjust\"."
            },
            "71": {
                "name": "Can_TTGetSyncQuality",
                "type": "void Can_TTGetSyncQuality (uint8 Controller,boolean* Can_TTClockSpeed,boolean* Can_TTGlobalTimePhase)",
                "comments": "Get the synchronization quality."
            },
            "72": {
                "name": "Can_TTSetTimeMark",
                "type": "void Can_TTSetTimeMark (uint8 Controller,Can_TTTimeType Can_TTTimeMark,Can_TTTimeSourceType Can_TTTimeSource)",
                "comments": "Sets a new value for the time mark for the given time source."
            },
            "73": {
                "name": "Can_TTCancelTimeMark",
                "type": "void Can_TTCancelTimeMark (uint8 Controller)",
                "comments": "Cancel the time mark."
            },
            "74": {
                "name": "Can_TTAckTimeMark",
                "type": "void Can_TTAckTimeMark (uint8 Controller)",
                "comments": "Acknowledges the time mark interrupt by resetting the flag in the interrupt vector register."
            },
            "75": {
                "name": "Can_TTEnableTimeMarkIRQ",
                "type": "void Can_TTEnableTimeMarkIRQ (uint8 Controller)",
                "comments": "Enables the timer mark interrupt."
            },
            "76": {
                "name": "Can_TTDisableTimeMarkIRQ",
                "type": "void Can_TTDisableTimeMarkIRQ (uint8 Controller)",
                "comments": "Disable the time mark interrupt."
            },
            "77": {
                "name": "Can_TTGetTimeMarkIRQStatus",
                "type": "void Can_TTGetTimeMarkIRQStatus (uint8 Controller,boolean* Can_TTIRQStatus)",
                "comments": "Gets the IRQ status of the timer mark."
            },
            "78": {
                "name": "Can_TTReceive",
                "type": "void Can_TTReceive (uint8 Controller,uint8 Hrh,Can_IdType* CanId,uint8* CanDlc,uint8* CanSduPtr)",
                "comments": "Reads received data from the controller by returning the pointer of the Can ID, the DLC, and the Data of the message in the requested HRH."
            },
            "80": {
                "name": "Can_TTMainFunction_IRQ",
                "type": "void Can_TTMainFunction_IRQ (void)",
                "comments": "Polls the interrupt flags specific to TTCAN"
            }
        }
    },
    "66": {
        "name": "TTCAN Interface",
        "short_name": "TtcanIf",
        "functions": {
            "51": {
                "name": "CanIf_TTGetControllerTime",
                "type": "Std_ReturnType CanIf_TTGetControllerTime (uint8 ControllerId,CanIf_TTTimeType* CanIf_TTGlobalTime,CanIf_TTTimeType* CanIf_TTLocalTime,CanIf_TTTimeType* CanIf_TTCycleTime,uint8* CanIf_TTCycleCount)",
                "comments": "Gets the current values for the global, local and cycle time and the cycle count of the controller."
            },
            "52": {
                "name": "CanIf_TTGetMasterState",
                "type": "Std_ReturnType CanIf_TTGetMasterState (uint8 ControllerId,CanIf_TTMasterStateType* CanIf_TTMasterState)",
                "comments": "Get the master state. The master state includes the sync mode (sync_off, synchronizing, in_gap, in_schedule), the master-slave mode (master_off, slave, backup_master, current_master), and the current value for ref_trigger_offset."
            },
            "53": {
                "name": "CanIf_TTGetNTUActual",
                "type": "Std_ReturnType CanIf_TTGetNTUActual (uint8 ControllerId,float32 CanIf_TTNTUAct)",
                "comments": "Gets the actual value of NTU (network time unit). Together with the local oscillator period, the actual value of NTU can be derived from the actual value of TUR."
            },
            "54": {
                "name": "CanIf_TTGetErrorLevel",
                "type": "Std_ReturnType CanIf_TTGetErrorLevel (uint8 ControllerId,CanIf_TTErrorLevelType* CanIf_TTErrorLevel)",
                "comments": "Gets the error level. This includes the severity of the error level (S0-S3) and the minimum and maximum value of the message status count."
            },
            "55": {
                "name": "CanIf_TTSetNextIsGap",
                "type": "Std_ReturnType CanIf_TTSetNextIsGap (uint8 ControllerId)",
                "comments": "Sets the \"Next_is_Gap\" bit."
            },
            "56": {
                "name": "CanIf_TTSetEndOfGap",
                "type": "Std_ReturnType CanIf_TTSetEndOfGap (uint8 ControllerId)",
                "comments": "Signals the end of a gap."
            },
            "57": {
                "name": "CanIf_TTSetTimeCommand",
                "type": "Std_ReturnType CanIf_TTSetTimeCommand (uint8 ControllerId)",
                "comments": "Adjusts the global time at the beginning of the next basic cycle by the amount of \"global time preset\"."
            },
            "58": {
                "name": "CanIf_TTGlobalTimePreset",
                "type": "Std_ReturnType CanIf_TTGlobalTimePreset (uint8 ControllerId,CanIf_TTTimeType CanIf_TTGlobalTimePreset)",
                "comments": "Sets the value of \"global time preset\"."
            },
            "59": {
                "name": "CanIf_TTSetExtClockSyncCommand",
                "type": "Std_ReturnType CanIf_TTSetExtClockSyncCommand (uint8 ControllerId)",
                "comments": "Adjust the NTU (network time unit) according to the value given by \"NTU adjust\". Together with the local oscillator period, \"TUR adjust\" can be derived from \"NTU adjust\"."
            },
            "60": {
                "name": "CanIf_TTSetNTUAdjust",
                "type": "Std_ReturnType CanIf_TTSetNTUAdjust (uint8 ControllerId,float32 CanIf_TTNTUAdjust)",
                "comments": "Sets the value of \"NTU adjust\". Together with the local oscillator period, \"TUR adjust\" can be derived from \"NTU adjust\"."
            },
            "80": {
                "name": "CanIf_TTJobListExec_Controller",
                "type": "void CanIf_TTJobListExec_Controller (void)",
                "comments": "Processes the job list of the TTCAN controller <Controller>."
            },
            "71": {
                "name": "CanIf_TTGetSyncQuality",
                "type": "Std_ReturnType CanIf_TTGetSyncQuality (uint8 ControllerId,boolean* CanIf_TTClockSpeed,boolean* CanIf_TTGlobalTimePhase)",
                "comments": "Get the synchronization quality."
            },
            "72": {
                "name": "CanIf_TTSetTimeMark",
                "type": "Std_ReturnType CanIf_TTSetTimeMark (uint8 ControllerId,CanIf_TTTimeType CanIf_TTTimeMark,CanIf_TTTimeSourceType CanIf_TTTimeSource)",
                "comments": "Set a new value for the time mark for the given time source."
            },
            "73": {
                "name": "CanIf_TTCancelTimeMark",
                "type": "Std_ReturnType CanIf_TTCancelTimeMark (uint8 ControllerId)",
                "comments": "Cancel the time mark."
            },
            "74": {
                "name": "CanIf_TTAckTimeMark",
                "type": "Std_ReturnType CanIf_TTAckTimeMark (uint8 ControllerId)",
                "comments": "Acknowledge the time mark interrupt by resetting the flag in the interrupt vector register."
            },
            "75": {
                "name": "CanIf_TTEnableTimeMarkIRQ",
                "type": "Std_ReturnType CanIf_TTEnableTimeMarkIRQ (uint8 ControllerId)",
                "comments": "Enable the timer interrupt."
            },
            "76": {
                "name": "CanIf_TTDisableTimeMarkIRQ",
                "type": "Std_ReturnType CanIf_TTDisableTimeMarkIRQ (uint8 ControllerId)",
                "comments": "Disable the time mark interrupt."
            },
            "77": {
                "name": "CanIf_TTGetTimeMarkIRQStatus",
                "type": "Std_ReturnType CanIf_TTGetTimeMarkIRQStatus (uint8 ControllerId,boolean* CanIf_TTIRQStatus)",
                "comments": "Gets the IRQ status of the time mark."
            },
            "91": {
                "name": "CanIf_TTApplWatchdogError",
                "type": "Std_ReturnType CanIf_TTApplWatchdogError (uint8 ControllerId)",
                "comments": "Reports an application watchdog error."
            },
            "92": {
                "name": "CanIf_TTTimingError",
                "type": "Std_ReturnType CanIf_TTTimingError (uint8 ControllerId,CanIf_TTTimingErrorIRQType CanIf_TTTimingErrorIRQ)",
                "comments": "Reports one of the following errors: \u2022 Change of error level \u2022 Tx overflow/underflow \u2022 Synchronization failed \u2022 Init watch trigger"
            },
            "97": {
                "name": "CanIf_TTSevereError",
                "type": "void CanIf_TTSevereError (uint8 ControllerId,CanIf_TTSevereErrorEnumType CanIf_TTSevereError)",
                "comments": "Reports one of the following errors: \u2022 failed to serve appl. watchdog \u2022 config error \u2022 watch trigger reached"
            },
            "93": {
                "name": "CanIf_TTGap",
                "type": "Std_ReturnType CanIf_TTGap (uint8 ControllerId)",
                "comments": "Reports the occurrence of a gap."
            },
            "94": {
                "name": "CanIf_TTStartOfCycle",
                "type": "Std_ReturnType CanIf_TTStartOfCycle (uint8 ControllerId,uint8 CanIf_TTCycleCount)",
                "comments": "Reports the start of a basic cycle."
            },
            "95": {
                "name": "CanIf_TTTimeDisc",
                "type": "Std_ReturnType CanIf_TTTimeDisc (uint8 ControllerId)",
                "comments": "Reports a time discontinuity."
            },
            "96": {
                "name": "CanIf_TTMasterStateChange",
                "type": "Std_ReturnType CanIf_TTMasterStateChange (uint8 ControllerId,CanIf_TTMasterStateType CanIf_TTMasterState)",
                "comments": "Reports change of the master state between potential and current master."
            }
        }
    },
    "33": {
        "name": "UDP Network Management",
        "short_name": "UdpNm",
        "functions": {
            "1": {
                "name": "UdpNm_Init",
                "type": "void UdpNm_Init (const UdpNm_ConfigType* UdpNmConfigPtr)",
                "comments": "Initialize the complete Udp Nm module, i.e. all channels which are activated at configuration time are initialized. A UDP socket shall be set up with the TCP/IP stack. Caveats: This function has to be called after initialization of the TCP/IP stack. Configuration: Mandatory"
            },
            "14": {
                "name": "UdpNm_PassiveStartUp",
                "type": "Std_ReturnType UdpNm_PassiveStartUp (NetworkHandleType nmChannelHandle)",
                "comments": "Passive startup of the AUTOSAR Udp Nm. It triggers the transition from Bus-Sleep Mode or Prepare Bus Sleep Mode to the Network Mode in Repeat Message State. Caveats: Udp Nm is initialized correctly."
            },
            "2": {
                "name": "UdpNm_NetworkRequest",
                "type": "Std_ReturnType UdpNm_NetworkRequest (NetworkHandleType nmChannelHandle)",
                "comments": "Request the network, since ECU needs to communicate on the bus. Network state shall be changed to 'requested'. Caveats: Udp Nm is initialized correctly. Configuration: Optional (Only available if Udp Nm Passive Mode Enabled == false)."
            },
            "3": {
                "name": "UdpNm_NetworkRelease",
                "type": "Std_ReturnType UdpNm_NetworkRelease (NetworkHandleType nmChannelHandle)",
                "comments": "Release then network, since ECU doesn\u2019t have to communicate on the bus. Network state shall be changed to \u2018released\u2019. Caveats: UdpN is initialized correctly. Configuration: Optional (Only available if UdpNmPassiveModeEnabled == false)"
            },
            "12": {
                "name": "UdpNm_DisableCommunication",
                "type": "Std_ReturnType UdpNm_DisableCommunication (NetworkHandleType nmChannelHandle)",
                "comments": "Disable the NM PDU transmission ability due to a ISO 14229 Communication Control (0x28) service Caveats: Udp Nm is initialized correctly. Configuration: Optional (Only available if Udp Nm Com Control Enabled == true)"
            },
            "13": {
                "name": "UdpNm_EnableCommunication",
                "type": "Std_ReturnType UdpNm_EnableCommunication (NetworkHandleType nmChannelHandle)",
                "comments": "Enable the NM PDU transmission ability due to a ISO 14229 Communication Control (0x28) service. Caveats: Udp Nm is initialized correctly. Configuration: Optional (Only available if Udp Nm Com Control Enabled == true)."
            },
            "4": {
                "name": "UdpNm_SetUserData",
                "type": "Std_ReturnType UdpNm_SetUserData (NetworkHandleType nmChannelHandle,const uint8* nmUserDataPtr)",
                "comments": "Set user data for all NM messages transmitted on the bus after this function has returned without error. Caveats: UdpNm is initialized correctly. Configuration: Optional (Only available if UdpNmUserDataEnabled == true and UdpNmPassiveModeEnabled == false)."
            },
            "5": {
                "name": "UdpNm_GetUserData",
                "type": "Std_ReturnType UdpNm_GetUserData (NetworkHandleType nmChannelHandle,uint8* nmUserDataPtr)",
                "comments": "Get user data from the most recently received NM message. Caveats: Udp Nm is initialized correctly. Configuration: Optional (Only available if Udp Nm User Data Enabled == true)."
            },
            "6": {
                "name": "UdpNm_GetNodeIdentifier",
                "type": "Std_ReturnType UdpNm_GetNodeIdentifier (NetworkHandleType nmChannelHandle,uint8* nmNodeIdPtr)",
                "comments": "Get node identifier from the most recently received NMPDU. Caveats: UDP NMI is initialized correctly."
            },
            "7": {
                "name": "UdpNm_GetLocalNodeIdentifier",
                "type": "Std_ReturnType UdpNm_GetLocalNodeIdentifier (NetworkHandleType nmChannelHandle,uint8* nmNodeIdPtr)",
                "comments": "Get node identifier configured for the local node. Caveats: UdpNm is initialized correctly."
            },
            "8": {
                "name": "UdpNm_RepeatMessageRequest",
                "type": "Std_ReturnType UdpNm_RepeatMessageRequest (NetworkHandleType nmChannelHandle)",
                "comments": "Set Repeat Message Request Bit for all NM messages transmitted on the bus after this function has returned without error."
            },
            "10": {
                "name": "UdpNm_GetPduData",
                "type": "Std_ReturnType UdpNm_GetPduData (NetworkHandleType nmChannelHandle,uint8* nmPduDataPtr)",
                "comments": "Get the whole PDU data out of the most recently received NM message. Caveats: Udp Nm is initialized correctly."
            },
            "11": {
                "name": "UdpNm_GetState",
                "type": "Std_ReturnType UdpNm_GetState (NetworkHandleType nmChannelHandle,Nm_StateType* nmStatePtr,Nm_ModeType* nmModePtr)",
                "comments": "Returns the state and the mode of the network management. Caveats: UDP NM is initialized correctly. Configuration: Mandatory."
            },
            "9": {
                "name": "UdpNm_GetVersionInfo",
                "type": "void UdpNm_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "This service returns the version information of this module."
            },
            "20": {
                "name": "UdpNm_RequestBusSynchronization",
                "type": "Std_ReturnType UdpNm_RequestBusSynchronization (NetworkHandleType nmChannelHandle)",
                "comments": "Request bus synchronization. Caveats: Udp Nm is initialized correctly. Configuration: Optional (only available if Udp Nm Bus Synchronization Enabled == true and Udp Nm Passive Mode Enabled == false)."
            },
            "17": {
                "name": "UdpNm_CheckRemoteSleepIndication",
                "type": "Std_ReturnType UdpNm_CheckRemoteSleepIndication (NetworkHandleType nmChannelHandle,boolean* NmRemoteSleepIndPtr)",
                "comments": "Check if remote sleep indication takes place or not. Caveats: Udp Nm is initialized correctly. Configuration: Optional (only available if Udp Nm Remote Sleep Ind Enabled == true)"
            },
            "22": {
                "name": "UdpNm_SetSleepReadyBit",
                "type": "Std_ReturnType UdpNm_SetSleepReadyBit (NetworkHandleType nmChannelHandle,boolean nmSleepReadyBit)",
                "comments": "Set the NM Coordinator Sleep Ready bit in the Control Bit Vector"
            },
            "73": {
                "name": "UdpNm_Transmit",
                "type": "Std_ReturnType UdpNm_Transmit (PduIdType TxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Requests transmission of a PDU."
            },
            "74": {
                "name": "UdpNm_PnLearningRequest",
                "type": "Std_ReturnType UdpNm_PnLearningRequest (NetworkHandleType nmChannelHandle)",
                "comments": "Set Repeat Message Request Bit and Partial Network Learning Bit for NM messages transmitted next on the bus. This will force all nodes on the bus to enter the PNC Learning Phase. This is needed for the optional Dynamic PNC-to-channel-mapping feature. Tags: atp. Status = draft"
            },
            "244": {
                "name": "UdpNm_ActivateTxPnShutdownMsg",
                "type": "Std_ReturnType UdpNm_ActivateTxPnShutdownMsg (NetworkHandleType nmChannelHandle)",
                "comments": "N Mind indicates to activate the transmission of PN shutdown messages on the given NM-Channel. This results in the transmission of a NM-PDU with PN SR bit set to 1 (PN shutdown message)."
            },
            "245": {
                "name": "UdpNm_DeactivateTxPnShutdownMsg",
                "type": "Std_ReturnType UdpNm_DeactivateTxPnShutdownMsg (NetworkHandleType nmChannelHandle)",
                "comments": "N Mind indicate to deactivate the transmission of PN shutdown messages on the given NM-Channel. This results in transmission of usual NM-PDUs with PN SR bit set to 0."
            },
            "26": {
                "name": "UdpNm_RepeatMessageIndication",
                "type": "void UdpNm_RepeatMessageIndication (NetworkHandleType nmNetworkHandle)",
                "comments": "Service to indicate that an NM message with set Repeat Message Request B has been received. This is needed for node detection and PNC dynamic learning."
            },
            "64": {
                "name": "UdpNm_SoAdIfTxConfirmation",
                "type": "void UdpNm_SoAdIfTxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "66": {
                "name": "UdpNm_SoAdIfRxIndication",
                "type": "void UdpNm_SoAdIfRxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "65": {
                "name": "UdpNm_SoAdIfTriggerTransmit",
                "type": "Std_ReturnType UdpNm_SoAdIfTriggerTransmit (PduIdType TxPduId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr."
            },
            "19": {
                "name": "UdpNm_MainFunctionInstance_Id",
                "type": "void UdpNm_MainFunctionInstance_Id (void)",
                "comments": "Main function of the UdpNm which processes the algorithm described in that document. E.g.: UdpNm_MainFunction_0() represents the UdpNm instance for the UDP channel 0. UdpNm_MainFunction_1() represents the UdpNm instance for the UDP channel 1."
            }
        }
    },
    "186": {
        "name": "V2X Data Manager",
        "short_name": "V2xDM",
        "functions": {
            "1": {
                "name": "V2xDM_Init",
                "type": "void V2xDM_Init (void CfgPtr)",
                "comments": "Service to initialize the module V2xDM. It initializes all variables and sets the module state to initialized."
            },
            "2": {
                "name": "V2xDM_GetVersionInfo",
                "type": "void V2xDM_GetVersionInfo (Std_VersionInfoType VersionInfoPtr)",
                "comments": "Returns version information, vendor ID, and AUTOSAR module ID of the component."
            },
            "7": {
                "name": "V2xDM_RxIndication",
                "type": "void V2xDM_RxIndication (PduIdType RxPduId,const PduIdType PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module (PduR)."
            },
            "4": {
                "name": "V2xDM_V2xStackRxIndication",
                "type": "void V2xDM_V2xStackRxIndication (uint32 MsgId,uint8* V2xMsgDataPtr,uint32 V2xMsgDataLength)",
                "comments": "Function is called by the underlying V2x stack to provide a V2x message to the V2x Data Manager."
            },
            "3": {
                "name": "V2xDM_MainFunction",
                "type": "void V2xDM_MainFunction (void)",
                "comments": "Function is called periodically according to the specified time interval."
            }
        }
    },
    "183": {
        "name": "Vehicle-2-X Basic Transport",
        "short_name": "V2xBtp",
        "functions": {
            "1": {
                "name": "V2xBtp_Init",
                "type": "void V2xBtp_Init (void* CfgPtr)",
                "comments": "Initializes the V2xBtpmodule."
            },
            "2": {
                "name": "V2xBtp_GetVersionInfo",
                "type": "void V2xBtp_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information of this module."
            },
            "3": {
                "name": "V2xBtp_Transmit",
                "type": "Std_ReturnType V2xBtp_Transmit (const V2xBtp_TxParamsType* TransmitParams,uint16 Length,const uint8* DataPtr)",
                "comments": "This API is called by the V2X Fac module to request sending a BTP-PDU to the peer BTP entity."
            },
            "4": {
                "name": "V2xBtp_RxIndication",
                "type": "void V2xBtp_RxIndication (const V2xBtp_RxParamsType* ReceiveParams,uint16 Length,const uint8* DataPtr)",
                "comments": "Viathis API, the V2X BTP module gets the data (BTP-PDU) and the GeoNetworking parameters of a received GeoNetworking packet."
            },
            "6": {
                "name": "V2xBtp_CopyTxData",
                "type": "Std_ReturnType V2xBtp_CopyTxData (uint8* DestPtr,uint16* Length)",
                "comments": "This API is called by the V2x Gn module to request the V2x Btp module to copy the transmission data to a specific location."
            }
        }
    },
    "184": {
        "name": "Vehicle-2-X Facilities",
        "short_name": "V2xFac",
        "functions": {
            "1": {
                "name": "V2xFac_Init",
                "type": "void V2xFac_Init (void* CfgPtr)",
                "comments": "Initializes the V2xFac module."
            },
            "2": {
                "name": "V2xFac_GetVersionInfo",
                "type": "void V2xFac_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information of this module."
            },
            "3": {
                "name": "V2xFac_V2xM_PreparePseudonymChange",
                "type": "Std_ReturnType V2xFac_V2xM_PreparePseudonymChange (const V2x_PseudonymType* PseudonymPtr)",
                "comments": "By this API primitive the V2x Fac module gets an indication that the given Pseudonym and hereby the Station Id is about to be changed."
            },
            "4": {
                "name": "V2xFac_V2xM_CommitPseudonymChange",
                "type": "Std_ReturnType V2xFac_V2xM_CommitPseudonymChange (void)",
                "comments": "This function is called by the V2xM when all modules are OK with the pseudonym change and the change is to be committed."
            },
            "5": {
                "name": "V2xFac_V2xM_AbortPseudonymChange",
                "type": "Std_ReturnType V2xFac_V2xM_AbortPseudonymChange (void)",
                "comments": "This function is called by the V2xM when not all modules are OK with the pseudonym change and the change is to be rolled back."
            },
            "6": {
                "name": "V2xFac_V2xM_SetTGenCamDcc",
                "type": "void V2xFac_V2xM_SetTGenCamDcc (uint16 TGenCamDcc)",
                "comments": "By this API primitive the V2xFac module gets an indication of the current TG en Cam Dcc value."
            },
            "7": {
                "name": "V2xFac_V2xM_SetCaBsOperation",
                "type": "void V2xFac_V2xM_SetCaBsOperation (boolean OperationState)",
                "comments": "By this API primitive the V2xFac module gets an indication of the current operation state of the CABasicService."
            },
            "9": {
                "name": "V2xFac_RxIndication",
                "type": "void V2xFac_RxIndication (const V2xFac_RxParamsType* ReceiveParams,uint16 Length,const uint8* DataPtr)",
                "comments": "This API primitive is called by the V2X BTP module, providing the data and the GeoNetworking parameters of a received BTP packet to the V2X Fac module."
            },
            "10": {
                "name": "V2xFac_CaBs_MainFunction",
                "type": "void V2xFac_CaBs_MainFunction (void)",
                "comments": "This is the main processing function of the CA basic service."
            },
            "11": {
                "name": "V2xFac_DenBs_MainFunction",
                "type": "void V2xFac_DenBs_MainFunction (void)",
                "comments": "This is the main processing function of the DEN basic service."
            },
            "12": {
                "name": "V2xFac_RxS_MainFunction",
                "type": "void V2xFac_RxS_MainFunction (void)",
                "comments": "This is the main processing function of the Facilities message reception service."
            }
        }
    },
    "182": {
        "name": "Vehicle-2-X GeoNetworking",
        "short_name": "V2xGn",
        "functions": {
            "1": {
                "name": "V2xGn_Init",
                "type": "void V2xGn_Init (void* CfgPtr)",
                "comments": "Initialize the V2xGn module."
            },
            "2": {
                "name": "V2xGn_GetVersionInfo",
                "type": "void V2xGn_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information of this module."
            },
            "5": {
                "name": "V2xGn_V2xM_PreparePseudonymChange",
                "type": "Std_ReturnType V2xGn_V2xM_PreparePseudonymChange (const V2x_PseudonymType* PseudonymPtr)",
                "comments": "This function is called by the V2xM when a Pseudonym Change occurs to prepare the change in every module using it."
            },
            "9": {
                "name": "V2xGn_V2xM_CommitPseudonymChange",
                "type": "Std_ReturnType V2xGn_V2xM_CommitPseudonymChange (void)",
                "comments": "This function is called by the V2xM when all modules are OK with the pseudonym change and the change is to be committed."
            },
            "10": {
                "name": "V2xGn_V2xM_AbortPseudonymChange",
                "type": "Std_ReturnType V2xGn_V2xM_AbortPseudonymChange (void)",
                "comments": "This function is called by the V2xM when not all modules are OK with the pseudonym change and the change is to be rolled back."
            },
            "3": {
                "name": "V2xGn_Transmit",
                "type": "V2x_GnTxResultType V2xGn_Transmit (const V2xGn_TxParamsType* TxParams,uint16 Length)",
                "comments": "Is called by V2x_Btp to send a message."
            },
            "11": {
                "name": "V2xGn_V2xM_EncapConfirmation",
                "type": "void V2xGn_V2xM_EncapConfirmation (uint16 EncapReqId)",
                "comments": "This function is called by the V2xM when an encapsulation has been finished."
            },
            "12": {
                "name": "V2xGn_V2xM_DecapConfirmation",
                "type": "void V2xGn_V2xM_DecapConfirmation (uint32 DecapReqId,V2x_SecReportType SecReport,uint64 CertificateId,uint32 ItsAid,uint8 SspLength,uint8* SspBits)",
                "comments": "This function is called by the V2xM when a decapsulation has been finished."
            },
            "4": {
                "name": "V2xGn_RxIndication",
                "type": "void V2xGn_RxIndication (uint8 CtrlIdx,Eth_FrameType FrameType,boolean IsBroadcast,const uint8* PhysAddrPtr,uint8* DataPtr,uint16 LenByte)",
                "comments": "Indicates the reception of an Ethernet frame"
            },
            "8": {
                "name": "V2xGn_MainFunction",
                "type": "void V2xGn_MainFunction (void)",
                "comments": "Main function of the V2X Gn module for periodical execution of protocol operations."
            }
        }
    },
    "185": {
        "name": "Vehicle-2-X Management",
        "short_name": "V2xM",
        "functions": {
            "1": {
                "name": "V2xM_Init",
                "type": "void V2xM_Init (const void * CfgPtr)",
                "comments": "Initialize the V2xM module."
            },
            "2": {
                "name": "V2xM_GetVersionInfo",
                "type": "void V2xM_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Provides the version information of this module."
            },
            "3": {
                "name": "V2xM_GetPositionAndTime",
                "type": "Std_ReturnType V2xM_GetPositionAndTime (V2xM_PositionAndTimeType* Poti)",
                "comments": "Provides the instantaneous position information."
            },
            "4": {
                "name": "V2xM_GetRefTimePtr",
                "type": "Std_ReturnType V2xM_GetRefTimePtr (const uint32** RefTimePtr)",
                "comments": "Provides a pointer to the time reference of the V2X-Stack."
            },
            "6": {
                "name": "V2xM_V2xGn_ReqEncap",
                "type": "V2x_SecReturnType V2xM_V2xGn_ReqEncap (uint16 EncapReqId,V2x_SecProfileType SecProfile,uint16 UnsecuredDataLength,const uint8* UnsecuredDataPtr,uint16* SecuredDataLength,uint8* SecuredDataPtr)",
                "comments": "This function is called by the V2xGn to sign and/or encrypt a message. An asynchronous V2xGn_V2xM_EncapConfirmation call will be used to notify V2xGn of the result."
            },
            "7": {
                "name": "V2xM_V2xGn_ReqDecap",
                "type": "V2x_SecReturnType V2xM_V2xGn_ReqDecap (uint32 DecapReqId,uint16 SecuredDataLength,const uint8* SecuredDataPtr,uint16* UnsecuredDataLength,uint8* UnsecuredDataPtr,V2x_SecReportType* SecReport,uint64* CertificateId,uint32* ItsAid,uint8* SspLength,uint8* SspBits)",
                "comments": "This function is called by the V2x Gn to decrypt and verify a message. An asynchronous V2x Gn_V2xM_DecapConfirmation call will be used to notify V2x Gn of the result."
            },
            "8": {
                "name": "V2xM_TriggerPseudonymChange",
                "type": "Std_ReturnType V2xM_TriggerPseudonymChange (void)",
                "comments": "This function is called by the V2XFac, V2xGn or another entity to change the pseudonym used by the V2X-Stack, e.g. due to a GeoNetworking address conflict."
            },
            "9": {
                "name": "V2xM_LockPseudonymChange",
                "type": "Std_ReturnType V2xM_LockPseudonymChange (uint16 Duration,uint64* HandleId)",
                "comments": "This function is called by V2xGnor from the Application Service Interface to lock the pseudonym change."
            },
            "10": {
                "name": "V2xM_UnlockPseudonymChange",
                "type": "Std_ReturnType V2xM_UnlockPseudonymChange (uint64 HandleId)",
                "comments": "This function is called by V2xG nor from the Application Service Interface to unlock the pseudonym change."
            },
            "11": {
                "name": "V2xM_V2xGn_SetGlobalRxParams",
                "type": "void V2xM_V2xGn_SetGlobalRxParams (const uint16* Cbr_Gs,const V2x_ChanType* Channel)",
                "comments": "This function is called by V2xGn to set the current channel busy percentage for the specified channel."
            },
            "12": {
                "name": "V2xM_V2xGn_GetGlobalTxParams",
                "type": "void V2xM_V2xGn_GetGlobalTxParams (const V2x_ChanType* channel,uint16* Cbr)",
                "comments": "This function is called by V2x Gn to get the current channel busy percentage for the specified channel."
            },
            "14": {
                "name": "V2xM_CalcDistance",
                "type": "Std_ReturnType V2xM_CalcDistance (sint32 LatitudeA,sint32 LongitudeA,sint32 LatitudeB,sint32 LongitudeB,float32* Distance)",
                "comments": "Calculate the distance between two geographical points on Earth with the assumption that they are on elevation 0."
            },
            "15": {
                "name": "V2xM_CalcHeadingInTolerance",
                "type": "boolean V2xM_CalcHeadingInTolerance (float32 Heading1,float32 Heading2,float32 Tolerance)",
                "comments": "Calculates if difference of heading values are within a tolerance value."
            },
            "16": {
                "name": "V2xM_SetTollingZoneInformation",
                "type": "void V2xM_SetTollingZoneInformation (sint32 protectedZoneLatitude,sint32 protectedZoneLongitude,uint32 protectedZoneRadius,uint8 protectedZoneID)",
                "comments": "Set available tolling zone information. This is done from V2x Fact that receives this information via CAM messages."
            },
            "18": {
                "name": "V2xM_Vdp_GetNextLongTermCertificateExpirationDate",
                "type": "Std_ReturnType V2xM_Vdp_GetNextLongTermCertificateExpirationDate (uint32* ExpirationDate)",
                "comments": "Service to get the certificate expiration date of the long term certificate that expires in the nearest future."
            },
            "19": {
                "name": "V2xM_Vdp_GetNextPseudonymCertificateExpirationDate",
                "type": "Std_ReturnType V2xM_Vdp_GetNextPseudonymCertificateExpirationDate (uint32* expirationDate)",
                "comments": "Service to get the certificate expiration date of the pseudonym certificate that expires in the nearest future."
            },
            "20": {
                "name": "V2xM_Vdp_SetPositionAndTime",
                "type": "Std_ReturnType V2xM_Vdp_SetPositionAndTime (V2xM_PositionAndTimeType PositionAndTime)",
                "comments": "Service for setting positional and time information relevant for the V2X-Stack"
            },
            "21": {
                "name": "V2xM_GetTime",
                "type": "Std_ReturnType V2xM_GetTime (uint32* CurrentItsTime)",
                "comments": "Service forgetting the ITS time as estimated by the V2X-Stack"
            },
            "13": {
                "name": "V2xM_MainFunction",
                "type": "void V2xM_MainFunction (void)",
                "comments": "Scheduled Main Function of V2X M"
            }
        }
    },
    "102": {
        "name": "Watchdog Driver",
        "short_name": "Wdg",
        "functions": {
            "0": {
                "name": "Wdg_Init",
                "type": "void Wdg_Init (const Wdg_ConfigType* ConfigPtr)",
                "comments": "Initializes the module."
            },
            "1": {
                "name": "Wdg_SetMode",
                "type": "Std_ReturnType Wdg_SetMode (WdgIf_ModeType Mode)",
                "comments": "Switches the watchdog into the mode Mode."
            },
            "3": {
                "name": "Wdg_SetTriggerCondition",
                "type": "void Wdg_SetTriggerCondition (uint16 timeout)",
                "comments": "Sets the timeout value for the trigger counter."
            },
            "4": {
                "name": "Wdg_GetVersionInfo",
                "type": "void Wdg_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of the module."
            }
        }
    },
    "43": {
        "name": "Watchdog Interface",
        "short_name": "WdgIf",
        "functions": {
            "1": {
                "name": "WdgIf_SetMode",
                "type": "Std_ReturnType WdgIf_SetMode (uint8 DeviceIndex,WdgIf_ModeType WdgMode)",
                "comments": "Map the service Wdg If_Set Mode to the service Wdg_Set Mode of the corresponding Watchdog Driver."
            },
            "2": {
                "name": "WdgIf_SetTriggerCondition",
                "type": "void WdgIf_SetTriggerCondition (uint8 DeviceIndex,uint16 Timeout)",
                "comments": "Map the service Wdg If_Set Trigger Condition to the service Wdg_Set Trigger Condition of the corresponding Watchdog Driver."
            },
            "3": {
                "name": "WdgIf_GetVersionInfo",
                "type": "void WdgIf_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information."
            }
        }
    },
    "13": {
        "name": "Watchdog Manager",
        "short_name": "WdgM",
        "functions": {
            "0": {
                "name": "WdgM_Init",
                "type": "void WdgM_Init (const WdgM_ConfigType* ConfigPtr)",
                "comments": "Initializes the Watchdog Manager."
            },
            "1": {
                "name": "WdgM_DeInit",
                "type": "void WdgM_DeInit (void)",
                "comments": "De-initializes the Watchdog Manager."
            },
            "2": {
                "name": "WdgM_GetVersionInfo",
                "type": "void WdgM_GetVersionInfo (Std_VersionInfoType* VersionInfo)",
                "comments": "Returns the version information of this module."
            },
            "3": {
                "name": "WdgM_SetMode",
                "type": "Std_ReturnType WdgM_SetMode (WdgM_ModeType Mode)",
                "comments": "Sets the current mode of Watchdog Manager."
            },
            "11": {
                "name": "WdgM_GetMode",
                "type": "Std_ReturnType WdgM_GetMode (WdgM_ModeType* Mode)",
                "comments": "Returns the current mode of the Watchdog Manager."
            },
            "14": {
                "name": "WdgM_CheckpointReached",
                "type": "Std_ReturnType WdgM_CheckpointReached (WdgM_SupervisedEntityIdType SEID,WdgM_CheckpointIdType CheckpointID)",
                "comments": "Indicates to the Watchdog Manager that a Checkpoint within a Supervised Entity has been reached."
            },
            "12": {
                "name": "WdgM_GetLocalStatus",
                "type": "Std_ReturnType WdgM_GetLocalStatus (WdgM_SupervisedEntityIdType SEID,WdgM_LocalStatusType* Status)",
                "comments": "Returns the supervision status of an individual Supervised Entity."
            },
            "13": {
                "name": "WdgM_GetGlobalStatus",
                "type": "Std_ReturnType WdgM_GetGlobalStatus (WdgM_GlobalStatusType* Status)",
                "comments": "Returns the global supervision status of the Watchdog Manager."
            },
            "15": {
                "name": "WdgM_PerformReset",
                "type": "void WdgM_PerformReset (void)",
                "comments": "Instructs the Watchdog Manager to cause a watchdog reset."
            },
            "16": {
                "name": "WdgM_GetFirstExpiredSEID",
                "type": "Std_ReturnType WdgM_GetFirstExpiredSEID (WdgM_SupervisedEntityIdType* SEID)",
                "comments": "Returns SEID that first reached the state WDGM_LOCAL_STATUS_EXPIRED."
            },
            "8": {
                "name": "WdgM_MainFunction",
                "type": "void WdgM_MainFunction (void)",
                "comments": "Performs the processing of the cyclic Watchdog Manager jobs."
            }
        }
    },
    "87": {
        "name": "Wireless Ethernet Driver",
        "short_name": "WEth",
        "functions": {
            "1": {
                "name": "WEth_Init",
                "type": "void WEth_Init (const WEth_ConfigType* CfgPtr)",
                "comments": "Initialize the Wireless Ethernet Driver"
            },
            "3": {
                "name": "WEth_SetControllerMode",
                "type": "Std_ReturnType WEth_SetControllerMode (uint8 CtrlId,Eth_ModeType CtrlMode)",
                "comments": "Enables/disables the indexed controller"
            },
            "4": {
                "name": "WEth_GetControllerMode",
                "type": "Std_ReturnType WEth_GetControllerMode (uint8 CtrlId,Eth_ModeType* CtrlModePtr)",
                "comments": "Obtains the state of the indexed controller"
            },
            "8": {
                "name": "WEth_GetPhysAddr",
                "type": "void WEth_GetPhysAddr (uint8 CtrlId,uint8* PhysAddrPtr)",
                "comments": "Obtainsthephysicalsourceaddressusedbytheindexedcontroller"
            },
            "19": {
                "name": "WEth_SetPhysAddr",
                "type": "void WEth_SetPhysAddr (uint8 CtrlId,const uint8* PhysAddrPtr)",
                "comments": "Sets the physical source address used by the indexed controller."
            },
            "18": {
                "name": "WEth_UpdatePhysAddrFilter",
                "type": "Std_ReturnType WEth_UpdatePhysAddrFilter (uint8 CtrlId,const uint8* PhysAddrPtr,const uint8* PhysMaskPtr,Eth_FilterActionType Action)",
                "comments": "Update the physical source address to/from the indexed context filter. If the Wireless Ethernet Controller is not capable to do the filtering, the software has to do this."
            },
            "9": {
                "name": "WEth_ProvideTxBuffer",
                "type": "BufReq_ReturnType WEth_ProvideTxBuffer (uint8 CtrlId,uint8 Priority,Eth_BufIdxType* BufIdPtr,uint8** BufPtr,uint16* LenBytePtr)",
                "comments": "Provides access to a transmit buffer of the specified controller."
            },
            "20": {
                "name": "WEth_Transmit",
                "type": "Std_ReturnType WEth_Transmit (uint8 CtrlId,Eth_BufIdxType BufId,Eth_FrameType FrameType,boolean TxConfirmation,uint16 LenByte,const uint8* PhysAddrPtr)",
                "comments": "Triggers transmission of a previously filled transmit buffer."
            },
            "2": {
                "name": "WEth_TxConfirmation",
                "type": "void WEth_TxConfirmation (uint8 CtrlId)",
                "comments": "Triggers frame transmission confirmation"
            },
            "5": {
                "name": "WEth_Receive",
                "type": "void WEth_Receive (uint8 CtrlId,Eth_RxStatusType* RxStatusPtr)",
                "comments": "Triggers frame reception."
            },
            "21": {
                "name": "WEth_GetWEtherStats32",
                "type": "Std_ReturnType WEth_GetWEtherStats32 (uint8 CtrlId,uint32* WEtherStats)",
                "comments": "Returns the following list according to IEEE 802.11-2012, where the maximal possible value shall denote an invalid value, e.g. if this counter is not available: \n\n1. dot11STAStatisticsTransmittedFragmentCount \n2. dot11STAStatisticsGroupTransmittedFrameCount \n3. dot11STAStatisticsFailedCount \n4. dot11STAStatisticsRetryCount \n5. dot11STAStatisticsMultipleRetryCount \n6. dot11STAStatisticsFrameDuplicateCount \n7. dot11STAStatisticsRTSSuccessCount \n8. dot11STAStatisticsRTSFailureCount \n9. dot11STAStatisticsACKFailureCount \n10. dot11STAStatisticsQosTransmittedFragmentCount \n11. dot11STAStatisticsQosFailedCount \n12. dot11STAStatisticsQosRetryCount \n13. dot11STAStatisticsQosMultipleRetryCount \n14. dot11STAStatisticsQosFrameDuplicateCount \n15. dot11STAStatisticsQosRTSSuccessCount \n16. dot11STAStatisticsQosRTSFailureCount \n17. dot11STAStatisticsQosACKFailureCount \n18. dot11STAStatisticsQosReceivedFragmentCount \n19. dot11STAStatisticsQosTransmittedFrameCount \n20. dot11STAStatisticsQosDiscardedFrameCount \n21. dot11STAStatisticsQosMPDUsReceivedCount \n22. dot11STAStatisticsQosRetriesReceivedCount \n23. dot11STAStatisticsReceivedFragmentCount \n24. dot11STAStatisticsGroupReceivedFrameCount \n25. dot11STAStatisticsFCSErrorCount \n26. dot11STAStatisticsTransmittedFrameCount \n27. dot11STAStatisticsRSNAStatsCMACICVErrors \n28. dot11STAStatisticsRSNAStatsCMACReplays \n29. dot11STAStatisticsRSNAStatsRobustMgmtCCMPReplays \n30. dot11STAStatisticsRSNAStatsTKIPICVErrors \n31. dot11STAStatisticsRSNAStatsTKIPReplays \n32. dot11STAStatisticsRSNAStatsCCMPDecryptErrors \n33. dot11STAStatisticsRSNAStatsCCMPReplays \n34. dot11STAStatisticsTransmittedAMSDUCount \n35. dot11STAStatisticsFailedAMSDUCount \n36. dot11STAStatisticsRetryAMSDUCount \n37. dot11STAStatisticsMultipleRetryAMSDUCount \n38. dot11STAStatisticsAMSDUAckFailureCount \n39. dot11STAStatisticsReceivedAMSDUCount \n40. dot11STAStatisticsTransmittedAMPDUCount \n41. dot11STAStatisticsTransmittedMPDUsInAMPDUCount \n42. dot11STAStatisticsAMPDUReceivedCount \n43. dot11STAStatisticsMPDUInReceivedAMPDUCount \n44. dot11STAStatisticsAMPDUDelimiterCRCErrorCount \n45. dot11STAStatisticsImplicitBARFailureCount \n46. dot11STAStatisticsExplicitBARFailureCount \n47. dot11STAStatisticsChannelWidthSwitchCount \n48. dot11STAStatisticsTwentyMHzFrameTransmittedCount \n49. dot11STAStatisticsFortyMHzFrameTransmittedCount \n50. dot11STAStatisticsTwentyMHzFrameReceivedCount \n51. dot11STAStatisticsFortyMHzFrameReceivedCount \n52. dot11STAStatisticsPSMPUTTGrantDuration \n53. dot11STAStatisticsPSMPUTTUsedDuration \n54. dot11STAStatisticsGrantedRDGUsedCount \n55. dot11STAStatisticsGrantedRDGUnusedCount \n56. dot11STAStatisticsTransmittedFramesInGrantedRDGCount \n57. dot11STAStatisticsDualCTSSuccessCount \n58. dot11STAStatisticsDualCTSFailureCount \n59. dot11STAStatisticsRTSLSIGSuccessCount \n60. dot11STAStatisticsRTSLSIGFailureCount \n61. dot11STAStatisticsBeamformingFrameCount \n62. dot11STAStatisticsSTBCCTSSuccessCount \n63. dot11STAStatisticsSTBCCTSFailureCount \n64. dot11STAStatisticsnonSTBCCTSSuccessCount \n65. dot11STAStatisticsnonSTBCCTSFailureCount"
            },
            "224": {
                "name": "WEth_GetWEtherStats64",
                "type": "Std_ReturnType WEth_GetWEtherStats64 (uint8 CtrlId,uint64* WEtherStats)",
                "comments": "Returns the following list according to IEEE 802.11-2012, where the maximal possible value shall denote an invalid value, e.g., if this counter is not available: \n\n1. dot11STAStatisticsTransmittedOctetsInAMSDUCount  \n2. dot11STAStatisticsReceivedOctetsInAMSDUCount  \n3. dot11STAStatisticsTransmittedOctetsInAMPDUCount  \n4. dot11STAStatisticsReceivedOctetsInAMPDUCount  \n5. dot11STAStatisticsTransmittedOctetsInGrantedRDGCount  "
            },
            "48": {
                "name": "WEth_WriteTrcvRegs",
                "type": "Std_ReturnType WEth_WriteTrcvRegs (uint8 CtrlId,uint8 TrcvId,uint8 RadioId,const uint32* RegIds,const uint32* RegVals,uint8 NumRegs)",
                "comments": "Configures a transceivers registers or triggers a function offered by the receiver"
            },
            "49": {
                "name": "WEth_ReadTrcvRegs",
                "type": "Std_ReturnType WEth_ReadTrcvRegs (uint8 CtrlId,uint8 TrcvId,uint8 RadioId,const uint32* RegIds,uint32* RegValsPtr,uint8 NumRegs)",
                "comments": "Reads a transceiver register"
            },
            "52": {
                "name": "WEth_GetBufWRxParams",
                "type": "Std_ReturnType WEth_GetBufWRxParams (uint8 CtrlId,const WEth_BufWRxParamIdType* RxParamIds,uint32* ParamValues,uint8 NumParams)",
                "comments": "Read out values related to the received direction for a received packet. For example, this could be RSSI or Channel belonging to one single packet. This API is valid only within the context of WEth_Receive."
            },
            "53": {
                "name": "WEth_GetBufWTxParams",
                "type": "Std_ReturnType WEth_GetBufWTxParams (uint8 CtrlId,const WEth_BufWTxParamIdType* TxParamIds,uint32* ParamValues,uint8 NumParams)",
                "comments": "Read out values related to the transmit direction for a transmitted packet. This API is valid only within the context of WEth_TxConfirmation."
            },
            "54": {
                "name": "WEth_SetBufWTxParams",
                "type": "Std_ReturnType WEth_SetBufWTxParams (uint8 CtrlId,Eth_BufIdxType BufId,const WEth_BufWTxParamIdType* TxParamIds,const uint32* ParamValues,uint8 NumParams)",
                "comments": "Set values related to the transmit direction for a specific buffer (packet to be sent). For example, this can be the desired transmit power or the channel belonging to one single packet."
            },
            "13": {
                "name": "WEth_GetVersionInfo",
                "type": "void WEth_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information of this module."
            },
            "55": {
                "name": "WEth_TriggerPriorityQueueTransmit",
                "type": "Std_ReturnType WEth_TriggerPriorityQueueTransmit (uint8 CtrlId,uint8 PriorityQueue,uint8 MaxTxPower)",
                "comments": "Triggers transmission of a previously filled transmit buffer that is waiting in a software priority queue."
            },
            "10": {
                "name": "WEth_MainFunction",
                "type": "void WEth_MainFunction (void)",
                "comments": "Support for indirect transmissions (extended frame timing constraints) and mechanisms for channel selection when using multiple channels. Used for polling state changes. Calls EthIf_CtrlModeIndication when the controller mode changed."
            }
        }
    },
    "74": {
        "name": "Wireless Ethernet TransceiverDriver",
        "short_name": "WEthTrcv",
        "functions": {
            "1": {
                "name": "WEthTrcv_Init",
                "type": "void WEthTrcv_Init (const WEthTrcv_ConfigType* CfgPtr)",
                "comments": "Initializes the Wireless Ethernet Transceiver Driver"
            },
            "3": {
                "name": "WEthTrcv_SetTransceiverMode",
                "type": "Std_ReturnType WEthTrcv_SetTransceiverMode (uint8 TrcvId,Eth_ModeType TrcvMode)",
                "comments": "Enables/disables the indexed transceiver"
            },
            "4": {
                "name": "WEthTrcv_GetTransceiverMode",
                "type": "Std_ReturnType WEthTrcv_GetTransceiverMode (uint8 TrcvId,Eth_ModeType* TrcvModePtr)",
                "comments": "Obtains the state of the indexed transceiver"
            },
            "6": {
                "name": "WEthTrcv_GetLinkState",
                "type": "Std_ReturnType WEthTrcv_GetLinkState (uint8 TrcvId,EthTrcv_LinkStateType* LinkStatePtr)",
                "comments": "Obtains the link state of the indexed transceiver."
            },
            "48": {
                "name": "WEthTrcv_SetRadioParams",
                "type": "Std_ReturnType WEthTrcv_SetRadioParams (uint8 TrcvId,const WEthTrcv_SetRadioParamIdType* ParamIds,const uint32* ParamValue,uint8 NumParams)",
                "comments": "Set values related to a transceiver\u2019s wireless radio. For example, this could be the selection of the radio settings (channel, ...)."
            },
            "49": {
                "name": "WEthTrcv_SetChanRxParams",
                "type": "Std_ReturnType WEthTrcv_SetChanRxParams (uint8 TrcvId,uint8 RadioId,const WEthTrcv_SetChanRxParamIdType* ParamIds,const uint32* ParamValues,uint8 NumParams)",
                "comments": "Set values related to the received direction of a transceiver\u2019s wireless channel. For example, this could be a channel parameter like the frequency."
            },
            "50": {
                "name": "WEthTrcv_SetChanTxParams",
                "type": "Std_ReturnType WEthTrcv_SetChanTxParams (uint8 TrcvId,uint8 RadioId,const WEthTrcv_SetChanTxParamIdType* TxParamIds,const uint32* ParamValues,uint8 NumParams)",
                "comments": "Set values related to the transmit direction of a transceiver\u2019s wireless channel. For example, this could be the bitrate of a channel."
            },
            "51": {
                "name": "WEthTrcv_GetChanRxParams",
                "type": "Std_ReturnType WEthTrcv_GetChanRxParams (uint8* TrcvId,uint8 RadioId,const WEthTrcv_GetChanRxParamIdType* ParamIds,uint32* ParamValues,uint8 NumParams)",
                "comments": "Read values related to the received direction of the transceiver. For example, this could be a Channel Busy Ratio (CBR) or the average Channel Idle Time (CIT)."
            },
            "11": {
                "name": "WEthTrcv_GetVersionInfo",
                "type": "void WEthTrcv_GetVersionInfo (Std_VersionInfoType* VersionInfoPtr)",
                "comments": "Returns the version information of this module."
            },
            "12": {
                "name": "WEthTrcv_MainFunction",
                "type": "void WEthTrcv_MainFunction (void)",
                "comments": "Used for polling state changes. Calls Eth If_Trcv Mode Indication when the transceiver mode changed."
            }
        }
    },
    "212": {
        "name": "XCP",
        "short_name": "Xcp",
        "functions": {
            "0": {
                "name": "Xcp_Init",
                "type": "void Xcp_Init (const Xcp_ConfigType* Xcp_ConfigPtr)",
                "comments": "This service initializes interfaces and variables of the AUTOSAR XC Player."
            },
            "1": {
                "name": "Xcp_GetVersionInfo",
                "type": "void Xcp_GetVersionInfo (Std_VersionInfoType* versioninfo)",
                "comments": "Returns the version information of this module."
            },
            "5": {
                "name": "Xcp_SetTransmissionMode",
                "type": "void Xcp_SetTransmissionMode (NetworkHandleType Channel,Xcp_TransmissionModeType Mode)",
                "comments": "This API is used to turn on and off the TX capabilities of used communication bus channel in XCP module."
            },
            "66": {
                "name": "Xcp_LoRxIndication",
                "type": "void Xcp_LoRxIndication (PduIdType RxPduId,const PduInfoType* PduInfoPtr)",
                "comments": "Indication of a received PDU from a lower layer communication interface module."
            },
            "64": {
                "name": "Xcp_LoTxConfirmation",
                "type": "void Xcp_LoTxConfirmation (PduIdType TxPduId,Std_ReturnType result)",
                "comments": "The lower layer communication interface module confirms the transmission of a PDU, or the failure to transmit a PDU."
            },
            "65": {
                "name": "Xcp_LoTriggerTransmit",
                "type": "Std_ReturnType Xcp_LoTriggerTransmit (PduIdType TxPduId,PduInfoType* PduInfoPtr)",
                "comments": "Within this API, the upper layer module (called module) shall check whether the available data fits into the buffer size reported by PduInfoPtr->SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr->SduDataPtr and update the length of the actual copied data in PduInfoPtr->SduLength. If not, it returns E_NOT_OK without changing PduInfoPtr."
            },
            "4": {
                "name": "Xcp_MainFunction",
                "type": "void Xcp_MainFunction (void)",
                "comments": "Scheduled function of the XCP module"
            }
        }
    }
}